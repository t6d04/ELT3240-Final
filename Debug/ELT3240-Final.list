
ELT3240-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002660  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002800  08002800  00003800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002898  08002898  0000408c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002898  08002898  00003898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028a0  080028a0  0000408c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a0  080028a0  000038a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028a4  080028a4  000038a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080028a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000008c  08002934  0000408c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08002934  00004224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c06  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163a  00000000  00000000  00007cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  00009300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000033e  00000000  00000000  000097c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a38  00000000  00000000  00009b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008de3  00000000  00000000  0002053e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085795  00000000  00000000  00029321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aeab6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001554  00000000  00000000  000aeafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b0050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080027e8 	.word	0x080027e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	080027e8 	.word	0x080027e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <adc_init>:
#include "stm32f4xx.h"
#include "adc.h"

void adc_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <adc_init+0x58>)
 8000286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <adc_init+0x58>)
 800028a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800028e:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <adc_init+0x58>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <adc_init+0x58>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (3 << (0 * 2));
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <adc_init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <adc_init+0x5c>)
 80002a2:	f043 0303 	orr.w	r3, r3, #3
 80002a6:	6013      	str	r3, [r2, #0]
    ADC->CCR = 0;
 80002a8:	4b0d      	ldr	r3, [pc, #52]	@ (80002e0 <adc_init+0x60>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
    ADC1->CR1 = 0;
 80002ae:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <adc_init+0x64>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = ADC_CR2_ADON;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <adc_init+0x64>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	609a      	str	r2, [r3, #8]
    ADC1->SMPR2 |= (7 << 0);
 80002ba:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <adc_init+0x64>)
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	4a09      	ldr	r2, [pc, #36]	@ (80002e4 <adc_init+0x64>)
 80002c0:	f043 0307 	orr.w	r3, r3, #7
 80002c4:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 0;
 80002c6:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <adc_init+0x64>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012300 	.word	0x40012300
 80002e4:	40012000 	.word	0x40012000

080002e8 <adc_read>:

uint16_t adc_read(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <adc_read+0x30>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a09      	ldr	r2, [pc, #36]	@ (8000318 <adc_read+0x30>)
 80002f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002f6:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 80002f8:	bf00      	nop
 80002fa:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <adc_read+0x30>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f9      	beq.n	80002fa <adc_read+0x12>
    return ADC1->DR;
 8000306:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <adc_read+0x30>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030a:	b29b      	uxth	r3, r3
}
 800030c:	4618      	mov	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40012000 	.word	0x40012000

0800031c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	2b00      	cmp	r3, #0
 800032c:	db0b      	blt.n	8000346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 021f 	and.w	r2, r3, #31
 8000334:	4907      	ldr	r1, [pc, #28]	@ (8000354 <__NVIC_EnableIRQ+0x38>)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	095b      	lsrs	r3, r3, #5
 800033c:	2001      	movs	r0, #1
 800033e:	fa00 f202 	lsl.w	r2, r0, r2
 8000342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000e100 	.word	0xe000e100

08000358 <button_init>:
#include "stm32f4xx.h"
#include "state_machine.h"

void button_init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
//
//    GPIOB->MODER &= ~(3 << (3 * 2));
//    GPIOB->PUPDR &= ~(3 << (3 * 2));
//    GPIOB->PUPDR |=  (1 << (3 * 2));

    SYSCFG->EXTICR[3] &= ~(0xF << 4 * (13 - 12));
 800035c:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <button_init+0x64>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a16      	ldr	r2, [pc, #88]	@ (80003bc <button_init+0x64>)
 8000362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000366:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |=  (0x2 << 4 * (13 - 12));
 8000368:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <button_init+0x64>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a13      	ldr	r2, [pc, #76]	@ (80003bc <button_init+0x64>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6153      	str	r3, [r2, #20]

    SYSCFG->EXTICR[0] &= ~(0xF << 4 * 3);
 8000374:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <button_init+0x64>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	4a10      	ldr	r2, [pc, #64]	@ (80003bc <button_init+0x64>)
 800037a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800037e:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  (0x1 << 4 * 3);
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <button_init+0x64>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a0d      	ldr	r2, [pc, #52]	@ (80003bc <button_init+0x64>)
 8000386:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800038a:	6093      	str	r3, [r2, #8]

    EXTI->IMR  |= (1 << 13) | (1 << 3);
 800038c:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <button_init+0x68>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0b      	ldr	r2, [pc, #44]	@ (80003c0 <button_init+0x68>)
 8000392:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 13) | (1 << 3);
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <button_init+0x68>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <button_init+0x68>)
 80003a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ac:	2028      	movs	r0, #40	@ 0x28
 80003ae:	f7ff ffb5 	bl	800031c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI3_IRQn);
 80003b2:	2009      	movs	r0, #9
 80003b4:	f7ff ffb2 	bl	800031c <__NVIC_EnableIRQ>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40013800 	.word	0x40013800
 80003c0:	40013c00 	.word	0x40013c00

080003c4 <buzzer_on>:

static uint32_t buzzer_start = 0;
static uint32_t buzzer_active = 0;
static uint32_t buzzer_duration = 0;

void buzzer_on(int duration) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	GPIOB->ODR |= (1 << BUZZER_PIN);
 80003cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <buzzer_on+0x40>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <buzzer_on+0x40>)
 80003d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003d6:	6153      	str	r3, [r2, #20]
	buzzer_active = 1;
 80003d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <buzzer_on+0x44>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
	if (duration > 0) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dd08      	ble.n	80003f6 <buzzer_on+0x32>
		buzzer_duration = duration;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a09      	ldr	r2, [pc, #36]	@ (800040c <buzzer_on+0x48>)
 80003e8:	6013      	str	r3, [r2, #0]
		buzzer_start = millis();
 80003ea:	f000 ff8d 	bl	8001308 <millis>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a07      	ldr	r2, [pc, #28]	@ (8000410 <buzzer_on+0x4c>)
 80003f2:	6013      	str	r3, [r2, #0]
	} else {
		buzzer_duration = 0;
	}
}
 80003f4:	e002      	b.n	80003fc <buzzer_on+0x38>
		buzzer_duration = 0;
 80003f6:	4b05      	ldr	r3, [pc, #20]	@ (800040c <buzzer_on+0x48>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40020400 	.word	0x40020400
 8000408:	200000ac 	.word	0x200000ac
 800040c:	200000b0 	.word	0x200000b0
 8000410:	200000a8 	.word	0x200000a8

08000414 <buzzer_off>:

void buzzer_off(void) {
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(1 << BUZZER_PIN);
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <buzzer_off+0x28>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a07      	ldr	r2, [pc, #28]	@ (800043c <buzzer_off+0x28>)
 800041e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000422:	6153      	str	r3, [r2, #20]
	buzzer_active = 0;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <buzzer_off+0x2c>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
	buzzer_duration = 0;
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <buzzer_off+0x30>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40020400 	.word	0x40020400
 8000440:	200000ac 	.word	0x200000ac
 8000444:	200000b0 	.word	0x200000b0

08000448 <buzzer_check>:

void buzzer_check(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	if (buzzer_active && buzzer_duration > 0) {
 800044c:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <buzzer_check+0x30>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d00f      	beq.n	8000474 <buzzer_check+0x2c>
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <buzzer_check+0x34>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00b      	beq.n	8000474 <buzzer_check+0x2c>
		if ((millis() - buzzer_start) >= buzzer_duration) {
 800045c:	f000 ff54 	bl	8001308 <millis>
 8000460:	4602      	mov	r2, r0
 8000462:	4b07      	ldr	r3, [pc, #28]	@ (8000480 <buzzer_check+0x38>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	1ad2      	subs	r2, r2, r3
 8000468:	4b04      	ldr	r3, [pc, #16]	@ (800047c <buzzer_check+0x34>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	d301      	bcc.n	8000474 <buzzer_check+0x2c>
			buzzer_off();
 8000470:	f7ff ffd0 	bl	8000414 <buzzer_off>
		}
	}
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200000ac 	.word	0x200000ac
 800047c:	200000b0 	.word	0x200000b0
 8000480:	200000a8 	.word	0x200000a8

08000484 <rs_from_adc>:
#define RL 20000.0f
#define VCC 5.0f
static float R0 = 10000.0f;

static float rs_from_adc(uint16_t adc)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
    float vout = ((float)adc / 4095.0f) * VCC;
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	ee07 3a90 	vmov	s15, r3
 8000494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000498:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80004f8 <rs_from_adc+0x74>
 800049c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004a0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80004a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004a8:	edc7 7a03 	vstr	s15, [r7, #12]
    if (vout < 0.01f) vout = 0.01f;
 80004ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80004b0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80004fc <rs_from_adc+0x78>
 80004b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004bc:	d501      	bpl.n	80004c2 <rs_from_adc+0x3e>
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <rs_from_adc+0x7c>)
 80004c0:	60fb      	str	r3, [r7, #12]
    float rs = (VCC - vout) * RL / vout;
 80004c2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80004c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80004ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004ce:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000504 <rs_from_adc+0x80>
 80004d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80004d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80004da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80004de:	edc7 7a02 	vstr	s15, [r7, #8]
    return rs;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	ee07 3a90 	vmov	s15, r3
}
 80004e8:	eeb0 0a67 	vmov.f32	s0, s15
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	457ff000 	.word	0x457ff000
 80004fc:	3c23d70a 	.word	0x3c23d70a
 8000500:	3c23d70a 	.word	0x3c23d70a
 8000504:	469c4000 	.word	0x469c4000

08000508 <gas_sensor_init>:

void gas_sensor_init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    adc_init();
 800050c:	f7ff feb8 	bl	8000280 <adc_init>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <gas_sensor_calibrate>:

void gas_sensor_calibrate(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 100; i++) {
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	e009      	b.n	8000538 <gas_sensor_calibrate+0x24>
        sum += adc_read();
 8000524:	f7ff fee0 	bl	80002e8 <adc_read>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4413      	add	r3, r2
 8000530:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 100; i++) {
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	3301      	adds	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2b63      	cmp	r3, #99	@ 0x63
 800053c:	ddf2      	ble.n	8000524 <gas_sensor_calibrate+0x10>
    }
    uint16_t avg_adc = sum / 100;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <gas_sensor_calibrate+0x50>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	095b      	lsrs	r3, r3, #5
 8000548:	80fb      	strh	r3, [r7, #6]
    float rs = rs_from_adc(avg_adc);
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ff99 	bl	8000484 <rs_from_adc>
 8000552:	ed87 0a00 	vstr	s0, [r7]
    R0 = rs / 1.0f;
 8000556:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <gas_sensor_calibrate+0x54>)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	51eb851f 	.word	0x51eb851f
 8000568:	20000000 	.word	0x20000000

0800056c <gas_sensor_read_ppm>:

uint16_t gas_sensor_read_ppm(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
    uint16_t adc = adc_read();
 8000572:	f7ff feb9 	bl	80002e8 <adc_read>
 8000576:	4603      	mov	r3, r0
 8000578:	827b      	strh	r3, [r7, #18]
    float rs = rs_from_adc(adc);
 800057a:	8a7b      	ldrh	r3, [r7, #18]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff81 	bl	8000484 <rs_from_adc>
 8000582:	ed87 0a03 	vstr	s0, [r7, #12]
    float ratio = rs / R0;
 8000586:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <gas_sensor_read_ppm+0x88>)
 8000588:	ed93 7a00 	vldr	s14, [r3]
 800058c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000594:	edc7 7a02 	vstr	s15, [r7, #8]

    float log_ppm = (log10f(ratio) - 0.32f) / -0.47f;
 8000598:	ed97 0a02 	vldr	s0, [r7, #8]
 800059c:	f001 fbde 	bl	8001d5c <log10f>
 80005a0:	eef0 7a40 	vmov.f32	s15, s0
 80005a4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80005f8 <gas_sensor_read_ppm+0x8c>
 80005a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80005ac:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80005fc <gas_sensor_read_ppm+0x90>
 80005b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005b4:	edc7 7a01 	vstr	s15, [r7, #4]
    float ppm = powf(10.0f, log_ppm);
 80005b8:	edd7 0a01 	vldr	s1, [r7, #4]
 80005bc:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80005c0:	f001 fbfa 	bl	8001db8 <powf>
 80005c4:	ed87 0a05 	vstr	s0, [r7, #20]
    if (ppm > 10000.0f) ppm = 10000.0f;
 80005c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80005cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000600 <gas_sensor_read_ppm+0x94>
 80005d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d8:	dd01      	ble.n	80005de <gas_sensor_read_ppm+0x72>
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <gas_sensor_read_ppm+0x98>)
 80005dc:	617b      	str	r3, [r7, #20]

    return (uint16_t)ppm;
 80005de:	edd7 7a05 	vldr	s15, [r7, #20]
 80005e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e6:	ee17 3a90 	vmov	r3, s15
 80005ea:	b29b      	uxth	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	3ea3d70a 	.word	0x3ea3d70a
 80005fc:	bef0a3d7 	.word	0xbef0a3d7
 8000600:	461c4000 	.word	0x461c4000
 8000604:	461c4000 	.word	0x461c4000

08000608 <gpio_init>:
#include "stm32f4xx.h"

void gpio_init(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
    // Enable GPIO Clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800060c:	4b98      	ldr	r3, [pc, #608]	@ (8000870 <gpio_init+0x268>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000610:	4a97      	ldr	r2, [pc, #604]	@ (8000870 <gpio_init+0x268>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000618:	4b95      	ldr	r3, [pc, #596]	@ (8000870 <gpio_init+0x268>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	4a94      	ldr	r2, [pc, #592]	@ (8000870 <gpio_init+0x268>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000624:	4b92      	ldr	r3, [pc, #584]	@ (8000870 <gpio_init+0x268>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	4a91      	ldr	r2, [pc, #580]	@ (8000870 <gpio_init+0x268>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000630:	4b8f      	ldr	r3, [pc, #572]	@ (8000870 <gpio_init+0x268>)
 8000632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000634:	4a8e      	ldr	r2, [pc, #568]	@ (8000870 <gpio_init+0x268>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800063c:	4b8c      	ldr	r3, [pc, #560]	@ (8000870 <gpio_init+0x268>)
 800063e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000640:	4a8b      	ldr	r2, [pc, #556]	@ (8000870 <gpio_init+0x268>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000648:	4b89      	ldr	r3, [pc, #548]	@ (8000870 <gpio_init+0x268>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a88      	ldr	r2, [pc, #544]	@ (8000870 <gpio_init+0x268>)
 800064e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40

    // ===== MQ-5 Sensor: PA0 (Analog input) =====
    GPIOA->MODER &= ~(3 << (0 * 2));
 8000654:	4b87      	ldr	r3, [pc, #540]	@ (8000874 <gpio_init+0x26c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a86      	ldr	r2, [pc, #536]	@ (8000874 <gpio_init+0x26c>)
 800065a:	f023 0303 	bic.w	r3, r3, #3
 800065e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0 << (0 * 2));
 8000660:	4b84      	ldr	r3, [pc, #528]	@ (8000874 <gpio_init+0x26c>)
 8000662:	4a84      	ldr	r2, [pc, #528]	@ (8000874 <gpio_init+0x26c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6013      	str	r3, [r2, #0]

    // ===== Relay: PB12 (Output) =====
    GPIOB->MODER &= ~(3 << (12 * 2));
 8000668:	4b83      	ldr	r3, [pc, #524]	@ (8000878 <gpio_init+0x270>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a82      	ldr	r2, [pc, #520]	@ (8000878 <gpio_init+0x270>)
 800066e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000672:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (12 * 2));
 8000674:	4b80      	ldr	r3, [pc, #512]	@ (8000878 <gpio_init+0x270>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a7f      	ldr	r2, [pc, #508]	@ (8000878 <gpio_init+0x270>)
 800067a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800067e:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER &= ~(1 << 12);
 8000680:	4b7d      	ldr	r3, [pc, #500]	@ (8000878 <gpio_init+0x270>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a7c      	ldr	r2, [pc, #496]	@ (8000878 <gpio_init+0x270>)
 8000686:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800068a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (12 * 2));
 800068c:	4b7a      	ldr	r3, [pc, #488]	@ (8000878 <gpio_init+0x270>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a79      	ldr	r2, [pc, #484]	@ (8000878 <gpio_init+0x270>)
 8000692:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000696:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3 << (12 * 2));
 8000698:	4b77      	ldr	r3, [pc, #476]	@ (8000878 <gpio_init+0x270>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a76      	ldr	r2, [pc, #472]	@ (8000878 <gpio_init+0x270>)
 800069e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80006a2:	60d3      	str	r3, [r2, #12]

    // ===== LED1: PB0 (Output) =====
    GPIOB->MODER &= ~(3 << (0 * 2));
 80006a4:	4b74      	ldr	r3, [pc, #464]	@ (8000878 <gpio_init+0x270>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a73      	ldr	r2, [pc, #460]	@ (8000878 <gpio_init+0x270>)
 80006aa:	f023 0303 	bic.w	r3, r3, #3
 80006ae:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (0 * 2));
 80006b0:	4b71      	ldr	r3, [pc, #452]	@ (8000878 <gpio_init+0x270>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a70      	ldr	r2, [pc, #448]	@ (8000878 <gpio_init+0x270>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 0);
 80006bc:	4b6e      	ldr	r3, [pc, #440]	@ (8000878 <gpio_init+0x270>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	4a6d      	ldr	r2, [pc, #436]	@ (8000878 <gpio_init+0x270>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6053      	str	r3, [r2, #4]

    // ===== LED2: PB1 (Output) =====
    GPIOB->MODER &= ~(3 << (1 * 2));
 80006c8:	4b6b      	ldr	r3, [pc, #428]	@ (8000878 <gpio_init+0x270>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a6a      	ldr	r2, [pc, #424]	@ (8000878 <gpio_init+0x270>)
 80006ce:	f023 030c 	bic.w	r3, r3, #12
 80006d2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (1 * 2));
 80006d4:	4b68      	ldr	r3, [pc, #416]	@ (8000878 <gpio_init+0x270>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a67      	ldr	r2, [pc, #412]	@ (8000878 <gpio_init+0x270>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 1);
 80006e0:	4b65      	ldr	r3, [pc, #404]	@ (8000878 <gpio_init+0x270>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	4a64      	ldr	r2, [pc, #400]	@ (8000878 <gpio_init+0x270>)
 80006e6:	f023 0302 	bic.w	r3, r3, #2
 80006ea:	6053      	str	r3, [r2, #4]

    // ===== SW2: PB3 (Input, Pull-up) =====
    GPIOB->MODER &= ~(3 << (3 * 2));
 80006ec:	4b62      	ldr	r3, [pc, #392]	@ (8000878 <gpio_init+0x270>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a61      	ldr	r2, [pc, #388]	@ (8000878 <gpio_init+0x270>)
 80006f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80006f6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3 << (3 * 2));
 80006f8:	4b5f      	ldr	r3, [pc, #380]	@ (8000878 <gpio_init+0x270>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	4a5e      	ldr	r2, [pc, #376]	@ (8000878 <gpio_init+0x270>)
 80006fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000702:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (3 * 2));
 8000704:	4b5c      	ldr	r3, [pc, #368]	@ (8000878 <gpio_init+0x270>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	4a5b      	ldr	r2, [pc, #364]	@ (8000878 <gpio_init+0x270>)
 800070a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070e:	60d3      	str	r3, [r2, #12]

    // ===== LCD I2C=====
    GPIOB->MODER &= ~(3 << (8 * 2));
 8000710:	4b59      	ldr	r3, [pc, #356]	@ (8000878 <gpio_init+0x270>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a58      	ldr	r2, [pc, #352]	@ (8000878 <gpio_init+0x270>)
 8000716:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800071a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (8 * 2));
 800071c:	4b56      	ldr	r3, [pc, #344]	@ (8000878 <gpio_init+0x270>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a55      	ldr	r2, [pc, #340]	@ (8000878 <gpio_init+0x270>)
 8000722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000726:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((8 - 8) * 4));
 8000728:	4b53      	ldr	r3, [pc, #332]	@ (8000878 <gpio_init+0x270>)
 800072a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800072c:	4a52      	ldr	r2, [pc, #328]	@ (8000878 <gpio_init+0x270>)
 800072e:	f023 030f 	bic.w	r3, r3, #15
 8000732:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((8 - 8) * 4));
 8000734:	4b50      	ldr	r3, [pc, #320]	@ (8000878 <gpio_init+0x270>)
 8000736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000738:	4a4f      	ldr	r2, [pc, #316]	@ (8000878 <gpio_init+0x270>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 8);
 8000740:	4b4d      	ldr	r3, [pc, #308]	@ (8000878 <gpio_init+0x270>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4a4c      	ldr	r2, [pc, #304]	@ (8000878 <gpio_init+0x270>)
 8000746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800074a:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (8 * 2));
 800074c:	4b4a      	ldr	r3, [pc, #296]	@ (8000878 <gpio_init+0x270>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4a49      	ldr	r2, [pc, #292]	@ (8000878 <gpio_init+0x270>)
 8000752:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000756:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (8 * 2));
 8000758:	4b47      	ldr	r3, [pc, #284]	@ (8000878 <gpio_init+0x270>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	4a46      	ldr	r2, [pc, #280]	@ (8000878 <gpio_init+0x270>)
 800075e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000762:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER &= ~(3 << (9 * 2));
 8000764:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <gpio_init+0x270>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a43      	ldr	r2, [pc, #268]	@ (8000878 <gpio_init+0x270>)
 800076a:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800076e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (9 * 2));
 8000770:	4b41      	ldr	r3, [pc, #260]	@ (8000878 <gpio_init+0x270>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a40      	ldr	r2, [pc, #256]	@ (8000878 <gpio_init+0x270>)
 8000776:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800077a:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((9 - 8) * 4));
 800077c:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <gpio_init+0x270>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000780:	4a3d      	ldr	r2, [pc, #244]	@ (8000878 <gpio_init+0x270>)
 8000782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000786:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((9 - 8) * 4));
 8000788:	4b3b      	ldr	r3, [pc, #236]	@ (8000878 <gpio_init+0x270>)
 800078a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078c:	4a3a      	ldr	r2, [pc, #232]	@ (8000878 <gpio_init+0x270>)
 800078e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000792:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 9);
 8000794:	4b38      	ldr	r3, [pc, #224]	@ (8000878 <gpio_init+0x270>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	4a37      	ldr	r2, [pc, #220]	@ (8000878 <gpio_init+0x270>)
 800079a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800079e:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (9 * 2));
 80007a0:	4b35      	ldr	r3, [pc, #212]	@ (8000878 <gpio_init+0x270>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a34      	ldr	r2, [pc, #208]	@ (8000878 <gpio_init+0x270>)
 80007a6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80007aa:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (9 * 2));
 80007ac:	4b32      	ldr	r3, [pc, #200]	@ (8000878 <gpio_init+0x270>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a31      	ldr	r2, [pc, #196]	@ (8000878 <gpio_init+0x270>)
 80007b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007b6:	60d3      	str	r3, [r2, #12]

    // ===== Buzzer: PB10 (Output) =====
    GPIOB->MODER &= ~(3 << (10 * 2));
 80007b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <gpio_init+0x270>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a2e      	ldr	r2, [pc, #184]	@ (8000878 <gpio_init+0x270>)
 80007be:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80007c2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (10 * 2));
 80007c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <gpio_init+0x270>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <gpio_init+0x270>)
 80007ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80007ce:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 10);
 80007d0:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <gpio_init+0x270>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4a28      	ldr	r2, [pc, #160]	@ (8000878 <gpio_init+0x270>)
 80007d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80007da:	6053      	str	r3, [r2, #4]

    // ===== LED Xanh lá: PC0 (Output) =====
    GPIOC->MODER &= ~(3 << (0 * 2));
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <gpio_init+0x274>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <gpio_init+0x274>)
 80007e2:	f023 0303 	bic.w	r3, r3, #3
 80007e6:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (0 * 2));
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <gpio_init+0x274>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a23      	ldr	r2, [pc, #140]	@ (800087c <gpio_init+0x274>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	6013      	str	r3, [r2, #0]

    // ===== LED Xanh dương: PC1 (Output) =====
    GPIOC->MODER &= ~(3 << (1 * 2));
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <gpio_init+0x274>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a20      	ldr	r2, [pc, #128]	@ (800087c <gpio_init+0x274>)
 80007fa:	f023 030c 	bic.w	r3, r3, #12
 80007fe:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (1 * 2));
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <gpio_init+0x274>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1d      	ldr	r2, [pc, #116]	@ (800087c <gpio_init+0x274>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6013      	str	r3, [r2, #0]

    // ===== LED Vàng: PC2 (Output) =====
    GPIOC->MODER &= ~(3 << (2 * 2));
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <gpio_init+0x274>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1a      	ldr	r2, [pc, #104]	@ (800087c <gpio_init+0x274>)
 8000812:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000816:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (2 * 2));
 8000818:	4b18      	ldr	r3, [pc, #96]	@ (800087c <gpio_init+0x274>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	@ (800087c <gpio_init+0x274>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]

    // ===== LED Đỏ: PC3 (Output) =====
    GPIOC->MODER &= ~(3 << (3 * 2));
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <gpio_init+0x274>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <gpio_init+0x274>)
 800082a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800082e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (3 * 2));
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <gpio_init+0x274>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a11      	ldr	r2, [pc, #68]	@ (800087c <gpio_init+0x274>)
 8000836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083a:	6013      	str	r3, [r2, #0]

    // ===== SW1: PC13 (Input, Pull-up) =====
    GPIOC->MODER &= ~(3 << (13 * 2));
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <gpio_init+0x274>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <gpio_init+0x274>)
 8000842:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000846:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3 << (13 * 2));
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <gpio_init+0x274>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <gpio_init+0x274>)
 800084e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000852:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |=  (1 << (13 * 2));
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <gpio_init+0x274>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	4a08      	ldr	r2, [pc, #32]	@ (800087c <gpio_init+0x274>)
 800085a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800085e:	60d3      	str	r3, [r2, #12]


    // ===== UART PA9 (Output) =====
    GPIOA->MODER &= ~(3 << (9 * 2));
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <gpio_init+0x26c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a03      	ldr	r2, [pc, #12]	@ (8000874 <gpio_init+0x26c>)
 8000866:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e008      	b.n	8000880 <gpio_init+0x278>
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800
    GPIOA->MODER |=  (2 << (9 * 2));
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <gpio_init+0x2a8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <gpio_init+0x2a8>)
 8000886:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800088a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0xF << ((9 - 8) * 4));
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <gpio_init+0x2a8>)
 800088e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <gpio_init+0x2a8>)
 8000892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000896:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  (7 << ((9 - 8) * 4));
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <gpio_init+0x2a8>)
 800089a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <gpio_init+0x2a8>)
 800089e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80008a2:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40020000 	.word	0x40020000

080008b4 <i2c2_init>:
#include "stm32f4xx.h"
#include "i2c.h"

void i2c2_init(void) {
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
    I2C1->CR2 = 16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <i2c2_init+0x2c>)
 80008ba:	2210      	movs	r2, #16
 80008bc:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <i2c2_init+0x2c>)
 80008c0:	2250      	movs	r2, #80	@ 0x50
 80008c2:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <i2c2_init+0x2c>)
 80008c6:	2211      	movs	r2, #17
 80008c8:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <i2c2_init+0x2c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <i2c2_init+0x2c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40005400 	.word	0x40005400

080008e4 <lcd_i2c_start>:
#include "stm32f4xx.h"
#include "lcd.h"

void lcd_i2c_start(void) {
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <lcd_i2c_start+0x44>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000928 <lcd_i2c_start+0x44>)
 80008ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f2:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80008f4:	bf00      	nop
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <lcd_i2c_start+0x44>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <lcd_i2c_start+0x12>
    I2C1->DR = (LCD_ADDR << 1);
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <lcd_i2c_start+0x44>)
 8000904:	224e      	movs	r2, #78	@ 0x4e
 8000906:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000908:	bf00      	nop
 800090a:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <lcd_i2c_start+0x44>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f9      	beq.n	800090a <lcd_i2c_start+0x26>
    (void)I2C1->SR1; (void)I2C1->SR2;
 8000916:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <lcd_i2c_start+0x44>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <lcd_i2c_start+0x44>)
 800091c:	699b      	ldr	r3, [r3, #24]
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40005400 	.word	0x40005400

0800092c <lcd_i2c_stop>:

void lcd_i2c_stop(void) {
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <lcd_i2c_stop+0x1c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <lcd_i2c_stop+0x1c>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40005400 	.word	0x40005400

0800094c <lcd_i2c_write>:

void lcd_i2c_write(uint8_t data) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000956:	bf00      	nop
 8000958:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <lcd_i2c_write+0x3c>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <lcd_i2c_write+0xc>
    I2C1->DR = data;
 8000964:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <lcd_i2c_write+0x3c>)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800096a:	bf00      	nop
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <lcd_i2c_write+0x3c>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <lcd_i2c_write+0x20>
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40005400 	.word	0x40005400

0800098c <lcd_write_nibble>:

void lcd_write_nibble(uint8_t nibble, uint8_t control) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0) | control | LCD_BACKLIGHT;
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	f023 030f 	bic.w	r3, r3, #15
 80009a4:	b25a      	sxtb	r2, r3
 80009a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	73fb      	strb	r3, [r7, #15]
    lcd_i2c_start();
 80009b6:	f7ff ff95 	bl	80008e4 <lcd_i2c_start>
    lcd_i2c_write(data);
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffc5 	bl	800094c <lcd_i2c_write>
    lcd_i2c_write(data | LCD_ENABLE);
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffbe 	bl	800094c <lcd_i2c_write>
    for (volatile int i = 0; i < 1000; i++);
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	e002      	b.n	80009dc <lcd_write_nibble+0x50>
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	3301      	adds	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009e2:	dbf8      	blt.n	80009d6 <lcd_write_nibble+0x4a>
    lcd_i2c_write(data & ~LCD_ENABLE);
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	f023 0304 	bic.w	r3, r3, #4
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffad 	bl	800094c <lcd_i2c_write>
    lcd_i2c_stop();
 80009f2:	f7ff ff9b 	bl	800092c <lcd_i2c_stop>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <lcd_write_byte>:

void lcd_write_byte(uint8_t byte, uint8_t control) {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71bb      	strb	r3, [r7, #6]
    lcd_write_nibble(byte & 0xF0, control);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f023 030f 	bic.w	r3, r3, #15
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffb6 	bl	800098c <lcd_write_nibble>
    lcd_write_nibble((byte << 4) & 0xF0, control);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ffae 	bl	800098c <lcd_write_nibble>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <lcd_command>:

void lcd_command(uint8_t cmd) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(cmd, 0x00);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffd9 	bl	80009fe <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	e002      	b.n	8000a58 <lcd_command+0x20>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	ddf7      	ble.n	8000a52 <lcd_command+0x1a>
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <lcd_data>:

void lcd_data(uint8_t data) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(data, LCD_REGISTER_SELECT);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffbf 	bl	80009fe <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <lcd_data+0x20>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a92:	4293      	cmp	r3, r2
 8000a94:	ddf7      	ble.n	8000a86 <lcd_data+0x1a>
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <lcd_init>:

void lcd_init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 100000; i++);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	e002      	b.n	8000ab2 <lcd_init+0x12>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <lcd_init+0x60>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	ddf8      	ble.n	8000aac <lcd_init+0xc>
    lcd_command(0x33);
 8000aba:	2033      	movs	r0, #51	@ 0x33
 8000abc:	f7ff ffbc 	bl	8000a38 <lcd_command>
    lcd_command(0x32);
 8000ac0:	2032      	movs	r0, #50	@ 0x32
 8000ac2:	f7ff ffb9 	bl	8000a38 <lcd_command>
    lcd_command(0x28);
 8000ac6:	2028      	movs	r0, #40	@ 0x28
 8000ac8:	f7ff ffb6 	bl	8000a38 <lcd_command>
    lcd_command(0x0C);
 8000acc:	200c      	movs	r0, #12
 8000ace:	f7ff ffb3 	bl	8000a38 <lcd_command>
    lcd_command(0x06);
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f7ff ffb0 	bl	8000a38 <lcd_command>
    lcd_command(0x01);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff ffad 	bl	8000a38 <lcd_command>
    for (volatile int i = 0; i < 50000; i++);
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	e002      	b.n	8000aea <lcd_init+0x4a>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000af0:	4293      	cmp	r3, r2
 8000af2:	ddf7      	ble.n	8000ae4 <lcd_init+0x44>
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	0001869f 	.word	0x0001869f

08000b04 <lcd_print>:

void lcd_print(char *str) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000b0c:	e006      	b.n	8000b1c <lcd_print+0x18>
        lcd_data((uint8_t)(*str++));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffa8 	bl	8000a6c <lcd_data>
    while (*str) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f4      	bne.n	8000b0e <lcd_print+0xa>
    }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <led_on>:
    {LED_RED,  0, 0, 0, 0},
};

#define NUM_LEDS (sizeof(leds) / sizeof(leds[0]))

void led_on(uint8_t pin) {
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e022      	b.n	8000b86 <led_on+0x56>
        if (leds[i].pin == pin) {
 8000b40:	4a16      	ldr	r2, [pc, #88]	@ (8000b9c <led_on+0x6c>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	79fa      	ldrb	r2, [r7, #7]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d117      	bne.n	8000b80 <led_on+0x50>
            leds[i].active = 1;
 8000b50:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <led_on+0x6c>)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	4413      	add	r3, r2
 8000b58:	3301      	adds	r3, #1
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
            leds[i].blinking = 0;
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <led_on+0x6c>)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	4413      	add	r3, r2
 8000b66:	330c      	adds	r3, #12
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
            LED_PORT->ODR |= (1 << pin);
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <led_on+0x70>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ba0 <led_on+0x70>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d9d9      	bls.n	8000b40 <led_on+0x10>
        }
    }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <led_off>:

void led_off(uint8_t pin) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e023      	b.n	8000bfc <led_off+0x58>
        if (leds[i].pin == pin) {
 8000bb4:	4a16      	ldr	r2, [pc, #88]	@ (8000c10 <led_off+0x6c>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	79fa      	ldrb	r2, [r7, #7]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d118      	bne.n	8000bf6 <led_off+0x52>
            leds[i].active = 0;
 8000bc4:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <led_off+0x6c>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	4413      	add	r3, r2
 8000bcc:	3301      	adds	r3, #1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
            leds[i].blinking = 0;
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <led_off+0x6c>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	4413      	add	r3, r2
 8000bda:	330c      	adds	r3, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
            LED_PORT->ODR &= ~(1 << pin);
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <led_off+0x70>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	79fa      	ldrb	r2, [r7, #7]
 8000be6:	2101      	movs	r1, #1
 8000be8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bec:	43d2      	mvns	r2, r2
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <led_off+0x70>)
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d9d8      	bls.n	8000bb4 <led_off+0x10>
        }
    }
}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20000004 	.word	0x20000004
 8000c14:	40020800 	.word	0x40020800

08000c18 <led_off_all>:
        leds[i].blinking = 0;
        LED_PORT->ODR |= (1 << leds[i].pin);
    }
}

void led_off_all(void) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
    for (int i = 1; i < NUM_LEDS; i++) {
 8000c1e:	2301      	movs	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e01f      	b.n	8000c64 <led_off_all+0x4c>
        leds[i].active = 0;
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <led_off_all+0x60>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4413      	add	r3, r2
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
        leds[i].blinking = 0;
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <led_off_all+0x60>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4413      	add	r3, r2
 8000c3a:	330c      	adds	r3, #12
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
        LED_PORT->ODR &= ~(1 << leds[i].pin);
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <led_off_all+0x64>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <led_off_all+0x60>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	440a      	add	r2, r1
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	2201      	movs	r2, #1
 8000c52:	408a      	lsls	r2, r1
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	4611      	mov	r1, r2
 8000c58:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <led_off_all+0x64>)
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	6153      	str	r3, [r2, #20]
    for (int i = 1; i < NUM_LEDS; i++) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3301      	adds	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d9dc      	bls.n	8000c24 <led_off_all+0xc>
    }
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	40020800 	.word	0x40020800

08000c80 <led_check>:
            LED_PORT->ODR &= ~(1 << pin);
        }
    }
}

void led_check(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
    uint32_t now = millis();
 8000c86:	f000 fb3f 	bl	8001308 <millis>
 8000c8a:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	e02f      	b.n	8000cf2 <led_check+0x72>
        if (leds[i].blinking && (now - leds[i].last_toggle >= leds[i].interval)) {
 8000c92:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <led_check+0x84>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	4413      	add	r3, r2
 8000c9a:	330c      	adds	r3, #12
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d024      	beq.n	8000cec <led_check+0x6c>
 8000ca2:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <led_check+0x84>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	4413      	add	r3, r2
 8000caa:	3304      	adds	r3, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	1ad2      	subs	r2, r2, r3
 8000cb2:	4914      	ldr	r1, [pc, #80]	@ (8000d04 <led_check+0x84>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	440b      	add	r3, r1
 8000cba:	3308      	adds	r3, #8
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d314      	bcc.n	8000cec <led_check+0x6c>
            LED_PORT->ODR ^= (1 << leds[i].pin);
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <led_check+0x88>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	490f      	ldr	r1, [pc, #60]	@ (8000d04 <led_check+0x84>)
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	440a      	add	r2, r1
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	408a      	lsls	r2, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <led_check+0x88>)
 8000cda:	404b      	eors	r3, r1
 8000cdc:	6153      	str	r3, [r2, #20]
            leds[i].last_toggle = now;
 8000cde:	4a09      	ldr	r2, [pc, #36]	@ (8000d04 <led_check+0x84>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d9cc      	bls.n	8000c92 <led_check+0x12>
        }
    }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000004 	.word	0x20000004
 8000d08:	40020800 	.word	0x40020800

08000d0c <main>:
#include <stdio.h>
#include "uart.h"
#include "scheduler.h"
#include "relay.h"

int main(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	timer_init();
 8000d12:	f000 fae7 	bl	80012e4 <timer_init>
	gpio_init();
 8000d16:	f7ff fc77 	bl	8000608 <gpio_init>
	button_init();
 8000d1a:	f7ff fb1d 	bl	8000358 <button_init>

	i2c2_init();
 8000d1e:	f7ff fdc9 	bl	80008b4 <i2c2_init>
	lcd_init();
 8000d22:	f7ff febd 	bl	8000aa0 <lcd_init>

	uart1_init();
 8000d26:	f000 fafb 	bl	8001320 <uart1_init>

    gas_sensor_init();
 8000d2a:	f7ff fbed 	bl	8000508 <gas_sensor_init>
    gas_sensor_calibrate();
 8000d2e:	f7ff fbf1 	bl	8000514 <gas_sensor_calibrate>

//    led_on(LED_DANGER_PIN);
//
	while(1){

		uint16_t ppm = gas_sensor_read_ppm();
 8000d32:	f7ff fc1b 	bl	800056c <gas_sensor_read_ppm>
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
		state_machine_update(ppm);
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f8b9 	bl	8000eb4 <state_machine_update>
		if(get_system_state() == 1){
 8000d42:	f000 f887 	bl	8000e54 <get_system_state>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d1f2      	bne.n	8000d32 <main+0x26>
			scheduler_update(ppm, get_alert_level());
 8000d4c:	f000 f88e 	bl	8000e6c <get_alert_level>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 f829 	bl	8000db0 <scheduler_update>
	while(1){
 8000d5e:	e7e8      	b.n	8000d32 <main+0x26>

08000d60 <relay_on>:
#define RELAY_PORT GPIOB
#define RELAY_PIN  12

static uint8_t relay_state = 0;

void relay_on(void) {
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
    RELAY_PORT->ODR |= (1 << RELAY_PIN);
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <relay_on+0x20>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <relay_on+0x20>)
 8000d6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d6e:	6153      	str	r3, [r2, #20]
    relay_state = 1;
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <relay_on+0x24>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40020400 	.word	0x40020400
 8000d84:	200000b4 	.word	0x200000b4

08000d88 <relay_off>:

void relay_off(void) {
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
    RELAY_PORT->ODR &= ~(1 << RELAY_PIN);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <relay_off+0x20>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <relay_off+0x20>)
 8000d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d96:	6153      	str	r3, [r2, #20]
    relay_state = 0;
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <relay_off+0x24>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40020400 	.word	0x40020400
 8000dac:	200000b4 	.word	0x200000b4

08000db0 <scheduler_update>:

static uint32_t last_sent_time = 0;

#define DELAY	1000

void scheduler_update(uint16_t ppm, GasAlertLevel level) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	460a      	mov	r2, r1
 8000dba:	80fb      	strh	r3, [r7, #6]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	717b      	strb	r3, [r7, #5]
    uint32_t now = millis();
 8000dc0:	f000 faa2 	bl	8001308 <millis>
 8000dc4:	60f8      	str	r0, [r7, #12]

    if (now - last_sent_time >= DELAY) {
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <scheduler_update+0x40>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000dd2:	d308      	bcc.n	8000de6 <scheduler_update+0x36>
        send_data(ppm, level);
 8000dd4:	797a      	ldrb	r2, [r7, #5]
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f80a 	bl	8000df4 <send_data>
        last_sent_time = now;
 8000de0:	4a03      	ldr	r2, [pc, #12]	@ (8000df0 <scheduler_update+0x40>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6013      	str	r3, [r2, #0]
    }
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000b8 	.word	0x200000b8

08000df4 <send_data>:

void send_data(uint16_t ppm, GasAlertLevel level) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b092      	sub	sp, #72	@ 0x48
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	4613      	mov	r3, r2
 8000e02:	717b      	strb	r3, [r7, #5]
    char buffer[64];
    sprintf(buffer, "{\"ppm\":%u,\"state\":%u}\n", ppm, (uint8_t)level);
 8000e04:	88fa      	ldrh	r2, [r7, #6]
 8000e06:	797b      	ldrb	r3, [r7, #5]
 8000e08:	f107 0008 	add.w	r0, r7, #8
 8000e0c:	4905      	ldr	r1, [pc, #20]	@ (8000e24 <send_data+0x30>)
 8000e0e:	f000 fb0d 	bl	800142c <siprintf>
    uart1_send_string(buffer);
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fab4 	bl	8001384 <uart1_send_string>
}
 8000e1c:	bf00      	nop
 8000e1e:	3748      	adds	r7, #72	@ 0x48
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	08002800 	.word	0x08002800

08000e28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e2c:	f3bf 8f4f 	dsb	sy
}
 8000e30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <__NVIC_SystemReset+0x24>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e3a:	4904      	ldr	r1, [pc, #16]	@ (8000e4c <__NVIC_SystemReset+0x24>)
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <__NVIC_SystemReset+0x28>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e42:	f3bf 8f4f 	dsb	sy
}
 8000e46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <__NVIC_SystemReset+0x20>
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	05fa0004 	.word	0x05fa0004

08000e54 <get_system_state>:

static SystemState system_state = SYSTEM_STOPPED;
static GasAlertLevel gas_alert_level = GAS_SAFE;

SystemState get_system_state(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
    return system_state;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <get_system_state+0x14>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200000c9 	.word	0x200000c9

08000e6c <get_alert_level>:

GasAlertLevel get_alert_level(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
    return gas_alert_level;
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <get_alert_level+0x14>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200000ca 	.word	0x200000ca

08000e84 <state_machine_toggle>:

void state_machine_toggle(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
    if (system_state == SYSTEM_STOPPED)
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <state_machine_toggle+0x24>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <state_machine_toggle+0x14>
    {
        system_state = SYSTEM_RUNNING;
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <state_machine_toggle+0x24>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        system_state = SYSTEM_STOPPED;
    }
}
 8000e96:	e002      	b.n	8000e9e <state_machine_toggle+0x1a>
        system_state = SYSTEM_STOPPED;
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <state_machine_toggle+0x24>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	200000c9 	.word	0x200000c9

08000eac <state_machine_reset>:

void state_machine_reset(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
//    system_state = SYSTEM_STOPPED;
//    gas_alert_level = GAS_SAFE;
    NVIC_SystemReset();
 8000eb0:	f7ff ffba 	bl	8000e28 <__NVIC_SystemReset>

08000eb4 <state_machine_update>:
}

void state_machine_update(uint16_t ppm)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	buzzer_check();
 8000ebe:	f7ff fac3 	bl	8000448 <buzzer_check>
	led_check();
 8000ec2:	f7ff fedd 	bl	8000c80 <led_check>
	if (system_state == SYSTEM_STOPPED)
 8000ec6:	4b75      	ldr	r3, [pc, #468]	@ (800109c <state_machine_update+0x1e8>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d117      	bne.n	8000efe <state_machine_update+0x4a>
	{
	    led_off_all();
 8000ece:	f7ff fea3 	bl	8000c18 <led_off_all>
	    led_on(LED_BLUE);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fe2c 	bl	8000b30 <led_on>
	    buzzer_off();
 8000ed8:	f7ff fa9c 	bl	8000414 <buzzer_off>
	    relay_off();
 8000edc:	f7ff ff54 	bl	8000d88 <relay_off>
	    if (!lcd_paused_displayed)
 8000ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80010a0 <state_machine_update+0x1ec>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 80d5 	bne.w	8001094 <state_machine_update+0x1e0>
		{
	    	lcd_command(0x01);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f7ff fda4 	bl	8000a38 <lcd_command>
			lcd_print("DISABLED");
 8000ef0:	486c      	ldr	r0, [pc, #432]	@ (80010a4 <state_machine_update+0x1f0>)
 8000ef2:	f7ff fe07 	bl	8000b04 <lcd_print>
			lcd_paused_displayed = 1;
 8000ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80010a0 <state_machine_update+0x1ec>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
		}
	    return;
 8000efc:	e0ca      	b.n	8001094 <state_machine_update+0x1e0>
	}
	else
	{
	    led_off(LED_BLUE); // bật lại sau khi all_off
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff fe50 	bl	8000ba4 <led_off>
	}

	lcd_paused_displayed = 0;
 8000f04:	4b66      	ldr	r3, [pc, #408]	@ (80010a0 <state_machine_update+0x1ec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]

    if (ppm < 200)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f0e:	d803      	bhi.n	8000f18 <state_machine_update+0x64>
    {
        gas_alert_level = GAS_SAFE;
 8000f10:	4b65      	ldr	r3, [pc, #404]	@ (80010a8 <state_machine_update+0x1f4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e012      	b.n	8000f3e <state_machine_update+0x8a>
    }
    else if (ppm < 350)
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000f1e:	d203      	bcs.n	8000f28 <state_machine_update+0x74>
    {
        gas_alert_level = GAS_LOW;
 8000f20:	4b61      	ldr	r3, [pc, #388]	@ (80010a8 <state_machine_update+0x1f4>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e00a      	b.n	8000f3e <state_machine_update+0x8a>
    }
    else if (ppm < 500)
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f2e:	d203      	bcs.n	8000f38 <state_machine_update+0x84>
    {
        gas_alert_level = GAS_HIGH;
 8000f30:	4b5d      	ldr	r3, [pc, #372]	@ (80010a8 <state_machine_update+0x1f4>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e002      	b.n	8000f3e <state_machine_update+0x8a>
    }
    else
    {
        gas_alert_level = GAS_DANGEROUS;
 8000f38:	4b5b      	ldr	r3, [pc, #364]	@ (80010a8 <state_machine_update+0x1f4>)
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	701a      	strb	r2, [r3, #0]
    }
    uint32_t now = millis();
 8000f3e:	f000 f9e3 	bl	8001308 <millis>
 8000f42:	61f8      	str	r0, [r7, #28]
    switch (gas_alert_level)
 8000f44:	4b58      	ldr	r3, [pc, #352]	@ (80010a8 <state_machine_update+0x1f4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d868      	bhi.n	800101e <state_machine_update+0x16a>
 8000f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f54 <state_machine_update+0xa0>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000f75 	.word	0x08000f75
 8000f5c:	08000f8b 	.word	0x08000f8b
 8000f60:	08000fd3 	.word	0x08000fd3
    {
        case GAS_SAFE:
            led_off_all();
 8000f64:	f7ff fe58 	bl	8000c18 <led_off_all>
            led_on(LED_GREEN);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f7ff fde1 	bl	8000b30 <led_on>
            buzzer_off();
 8000f6e:	f7ff fa51 	bl	8000414 <buzzer_off>
            break;
 8000f72:	e054      	b.n	800101e <state_machine_update+0x16a>

        case GAS_LOW:
            led_off_all();
 8000f74:	f7ff fe50 	bl	8000c18 <led_off_all>
            led_on(LED_GREEN);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f7ff fdd9 	bl	8000b30 <led_on>
            led_on(LED_BLUE);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff fdd6 	bl	8000b30 <led_on>
            buzzer_off();
 8000f84:	f7ff fa46 	bl	8000414 <buzzer_off>
            break;
 8000f88:	e049      	b.n	800101e <state_machine_update+0x16a>

        case GAS_HIGH:
        	led_off(LED_BLUE);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f7ff fe0a 	bl	8000ba4 <led_off>
        	led_off(LED_GREEN);
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff fe07 	bl	8000ba4 <led_off>
			if (now - led_danger_last_toggle >= 1000) {
 8000f96:	4b45      	ldr	r3, [pc, #276]	@ (80010ac <state_machine_update+0x1f8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fa2:	d313      	bcc.n	8000fcc <state_machine_update+0x118>
				led_danger_last_toggle = now;
 8000fa4:	4a41      	ldr	r2, [pc, #260]	@ (80010ac <state_machine_update+0x1f8>)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	6013      	str	r3, [r2, #0]

				if (led_danger_on) {
 8000faa:	4b41      	ldr	r3, [pc, #260]	@ (80010b0 <state_machine_update+0x1fc>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <state_machine_update+0x10c>
					led_off(LED_RED);
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f7ff fdf6 	bl	8000ba4 <led_off>
					led_danger_on = 0;
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <state_machine_update+0x1fc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e005      	b.n	8000fcc <state_machine_update+0x118>
				} else {
					led_on(LED_RED);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f7ff fdb5 	bl	8000b30 <led_on>
					led_danger_on = 1;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <state_machine_update+0x1fc>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
				}
			}
            buzzer_off();
 8000fcc:	f7ff fa22 	bl	8000414 <buzzer_off>
            break;
 8000fd0:	e025      	b.n	800101e <state_machine_update+0x16a>

        case GAS_DANGEROUS:
        	led_off(LED_BLUE);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fde6 	bl	8000ba4 <led_off>
        	led_off(LED_GREEN);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f7ff fde3 	bl	8000ba4 <led_off>
            buzzer_on(0);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff f9f0 	bl	80003c4 <buzzer_on>
			relay_on();
 8000fe4:	f7ff febc 	bl	8000d60 <relay_on>
			if (now - led_danger_last_toggle >= 200) {
 8000fe8:	4b30      	ldr	r3, [pc, #192]	@ (80010ac <state_machine_update+0x1f8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2bc7      	cmp	r3, #199	@ 0xc7
 8000ff2:	d913      	bls.n	800101c <state_machine_update+0x168>
				led_danger_last_toggle = now;
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80010ac <state_machine_update+0x1f8>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	6013      	str	r3, [r2, #0]

				if (led_danger_on) {
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <state_machine_update+0x1fc>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <state_machine_update+0x15c>
					led_off(LED_RED);
 8001002:	2003      	movs	r0, #3
 8001004:	f7ff fdce 	bl	8000ba4 <led_off>
					led_danger_on = 0;
 8001008:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <state_machine_update+0x1fc>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
				} else {
					led_on(LED_RED);
					led_danger_on = 1;
				}
			}
            break;
 800100e:	e005      	b.n	800101c <state_machine_update+0x168>
					led_on(LED_RED);
 8001010:	2003      	movs	r0, #3
 8001012:	f7ff fd8d 	bl	8000b30 <led_on>
					led_danger_on = 1;
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <state_machine_update+0x1fc>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
            break;
 800101c:	bf00      	nop
    }

//    uint32_t now = millis();
    if (now - lcd_last_update >= 500) {
 800101e:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <state_machine_update+0x200>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800102a:	d334      	bcc.n	8001096 <state_machine_update+0x1e2>
        lcd_last_update = now;
 800102c:	4a21      	ldr	r2, [pc, #132]	@ (80010b4 <state_machine_update+0x200>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	6013      	str	r3, [r2, #0]

        char buf[20];
        lcd_command(0x01);
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff fd00 	bl	8000a38 <lcd_command>
        sprintf(buf, "Gas: %u ppm", ppm);
 8001038:	88fa      	ldrh	r2, [r7, #6]
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	491e      	ldr	r1, [pc, #120]	@ (80010b8 <state_machine_update+0x204>)
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f9f3 	bl	800142c <siprintf>
        lcd_print(buf);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fd5a 	bl	8000b04 <lcd_print>
        lcd_command(0xC0);
 8001050:	20c0      	movs	r0, #192	@ 0xc0
 8001052:	f7ff fcf1 	bl	8000a38 <lcd_command>

        switch (gas_alert_level)
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <state_machine_update+0x1f4>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d81b      	bhi.n	8001096 <state_machine_update+0x1e2>
 800105e:	a201      	add	r2, pc, #4	@ (adr r2, 8001064 <state_machine_update+0x1b0>)
 8001060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001064:	08001075 	.word	0x08001075
 8001068:	0800107d 	.word	0x0800107d
 800106c:	08001085 	.word	0x08001085
 8001070:	0800108d 	.word	0x0800108d
        {
            case GAS_SAFE: lcd_print("Safe"); break;
 8001074:	4811      	ldr	r0, [pc, #68]	@ (80010bc <state_machine_update+0x208>)
 8001076:	f7ff fd45 	bl	8000b04 <lcd_print>
 800107a:	e00c      	b.n	8001096 <state_machine_update+0x1e2>
            case GAS_LOW: lcd_print("Low"); break;
 800107c:	4810      	ldr	r0, [pc, #64]	@ (80010c0 <state_machine_update+0x20c>)
 800107e:	f7ff fd41 	bl	8000b04 <lcd_print>
 8001082:	e008      	b.n	8001096 <state_machine_update+0x1e2>
            case GAS_HIGH: lcd_print("High"); break;
 8001084:	480f      	ldr	r0, [pc, #60]	@ (80010c4 <state_machine_update+0x210>)
 8001086:	f7ff fd3d 	bl	8000b04 <lcd_print>
 800108a:	e004      	b.n	8001096 <state_machine_update+0x1e2>
            case GAS_DANGEROUS: lcd_print("DANGER"); break;
 800108c:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <state_machine_update+0x214>)
 800108e:	f7ff fd39 	bl	8000b04 <lcd_print>
 8001092:	e000      	b.n	8001096 <state_machine_update+0x1e2>
	    return;
 8001094:	bf00      	nop
        }
    }
}
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200000c9 	.word	0x200000c9
 80010a0:	200000c0 	.word	0x200000c0
 80010a4:	08002818 	.word	0x08002818
 80010a8:	200000ca 	.word	0x200000ca
 80010ac:	200000c4 	.word	0x200000c4
 80010b0:	200000c8 	.word	0x200000c8
 80010b4:	200000bc 	.word	0x200000bc
 80010b8:	08002824 	.word	0x08002824
 80010bc:	08002830 	.word	0x08002830
 80010c0:	08002838 	.word	0x08002838
 80010c4:	0800283c 	.word	0x0800283c
 80010c8:	08002844 	.word	0x08002844

080010cc <EXTI15_10_IRQHandler>:
#include "led.h"
#include "buzzer.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */
void EXTI15_10_IRQHandler(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 13)) {
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <EXTI15_10_IRQHandler+0x24>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <EXTI15_10_IRQHandler+0x20>
        EXTI->PR |= (1 << 13);
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <EXTI15_10_IRQHandler+0x24>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4a03      	ldr	r2, [pc, #12]	@ (80010f0 <EXTI15_10_IRQHandler+0x24>)
 80010e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010e6:	6153      	str	r3, [r2, #20]
        state_machine_toggle();
 80010e8:	f7ff fecc 	bl	8000e84 <state_machine_toggle>
    }
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 3)) {
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <EXTI3_IRQHandler+0x24>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <EXTI3_IRQHandler+0x20>
        EXTI->PR |= (1 << 3);
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <EXTI3_IRQHandler+0x24>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a03      	ldr	r2, [pc, #12]	@ (8001118 <EXTI3_IRQHandler+0x24>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	6153      	str	r3, [r2, #20]
        state_machine_reset();
 8001110:	f7ff fecc 	bl	8000eac <state_machine_reset>
    }
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40013c00 	.word	0x40013c00

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <UsageFault_Handler+0x4>

08001144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f000 f947 	bl	8001404 <HAL_IncTick>
  timer_systick_callback();
 8001176:	f000 f89b 	bl	80012b0 <timer_systick_callback>
  buzzer_check();
 800117a:	f7ff f965 	bl	8000448 <buzzer_check>
  led_check();
 800117e:	f7ff fd7f 	bl	8000c80 <led_check>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	@ (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f000 f95a 	bl	8001470 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20020000 	.word	0x20020000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	200000cc 	.word	0x200000cc
 80011f0:	20000228 	.word	0x20000228

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_SetPriority>:
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	@ (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	@ (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ffc2 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <timer_systick_callback>:
#include "timer.h"

static volatile uint32_t system_millis = 0;
static volatile uint32_t blocking_delay = 0;

void timer_systick_callback(void) {
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
    system_millis++;
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <timer_systick_callback+0x2c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <timer_systick_callback+0x2c>)
 80012bc:	6013      	str	r3, [r2, #0]
    if (blocking_delay > 0) blocking_delay--;
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <timer_systick_callback+0x30>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <timer_systick_callback+0x20>
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <timer_systick_callback+0x30>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <timer_systick_callback+0x30>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200000d0 	.word	0x200000d0
 80012e0:	200000d4 	.word	0x200000d4

080012e4 <timer_init>:

void timer_init(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    SysTick_Config(SystemCoreClock / 1000);
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <timer_init+0x1c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <timer_init+0x20>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	099b      	lsrs	r3, r3, #6
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ffb9 	bl	800126c <SysTick_Config>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000034 	.word	0x20000034
 8001304:	10624dd3 	.word	0x10624dd3

08001308 <millis>:

uint32_t millis(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
    return system_millis;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <millis+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200000d0 	.word	0x200000d0

08001320 <uart1_init>:
#include "stm32f4xx.h"
#include "uart.h"

void uart1_init(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <uart1_init+0x2c>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	4a08      	ldr	r2, [pc, #32]	@ (800134c <uart1_init+0x2c>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6313      	str	r3, [r2, #48]	@ 0x30
    USART1->BRR = 0x0683;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <uart1_init+0x30>)
 8001332:	f240 6283 	movw	r2, #1667	@ 0x683
 8001336:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_UE;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <uart1_init+0x30>)
 800133a:	f242 0208 	movw	r2, #8200	@ 0x2008
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40011000 	.word	0x40011000

08001354 <uart1_send_char>:

void uart1_send_char(char c) {
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 800135e:	bf00      	nop
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <uart1_send_char+0x2c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f9      	beq.n	8001360 <uart1_send_char+0xc>
    USART1->DR = c;
 800136c:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <uart1_send_char+0x2c>)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	6053      	str	r3, [r2, #4]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40011000 	.word	0x40011000

08001384 <uart1_send_string>:

void uart1_send_string(const char* str) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800138c:	e006      	b.n	800139c <uart1_send_string+0x18>
        uart1_send_char(*str++);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ffdc 	bl	8001354 <uart1_send_char>
    while (*str) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f4      	bne.n	800138e <uart1_send_string+0xa>
    }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b4:	f7ff ff1e 	bl	80011f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	@ (80013f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	@ (80013fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f000 f84d 	bl	800147c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fc93 	bl	8000d0c <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80013f4:	080028a8 	.word	0x080028a8
  ldr r2, =_sbss
 80013f8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80013fc:	20000224 	.word	0x20000224

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000038 	.word	0x20000038
 8001428:	200000d8 	.word	0x200000d8

0800142c <siprintf>:
 800142c:	b40e      	push	{r1, r2, r3}
 800142e:	b510      	push	{r4, lr}
 8001430:	b09d      	sub	sp, #116	@ 0x74
 8001432:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001434:	9002      	str	r0, [sp, #8]
 8001436:	9006      	str	r0, [sp, #24]
 8001438:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800143c:	480a      	ldr	r0, [pc, #40]	@ (8001468 <siprintf+0x3c>)
 800143e:	9107      	str	r1, [sp, #28]
 8001440:	9104      	str	r1, [sp, #16]
 8001442:	490a      	ldr	r1, [pc, #40]	@ (800146c <siprintf+0x40>)
 8001444:	f853 2b04 	ldr.w	r2, [r3], #4
 8001448:	9105      	str	r1, [sp, #20]
 800144a:	2400      	movs	r4, #0
 800144c:	a902      	add	r1, sp, #8
 800144e:	6800      	ldr	r0, [r0, #0]
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001454:	f000 f98c 	bl	8001770 <_svfiprintf_r>
 8001458:	9b02      	ldr	r3, [sp, #8]
 800145a:	701c      	strb	r4, [r3, #0]
 800145c:	b01d      	add	sp, #116	@ 0x74
 800145e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001462:	b003      	add	sp, #12
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000003c 	.word	0x2000003c
 800146c:	ffff0208 	.word	0xffff0208

08001470 <__errno>:
 8001470:	4b01      	ldr	r3, [pc, #4]	@ (8001478 <__errno+0x8>)
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000003c 	.word	0x2000003c

0800147c <__libc_init_array>:
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	4d0d      	ldr	r5, [pc, #52]	@ (80014b4 <__libc_init_array+0x38>)
 8001480:	4c0d      	ldr	r4, [pc, #52]	@ (80014b8 <__libc_init_array+0x3c>)
 8001482:	1b64      	subs	r4, r4, r5
 8001484:	10a4      	asrs	r4, r4, #2
 8001486:	2600      	movs	r6, #0
 8001488:	42a6      	cmp	r6, r4
 800148a:	d109      	bne.n	80014a0 <__libc_init_array+0x24>
 800148c:	4d0b      	ldr	r5, [pc, #44]	@ (80014bc <__libc_init_array+0x40>)
 800148e:	4c0c      	ldr	r4, [pc, #48]	@ (80014c0 <__libc_init_array+0x44>)
 8001490:	f001 f9aa 	bl	80027e8 <_init>
 8001494:	1b64      	subs	r4, r4, r5
 8001496:	10a4      	asrs	r4, r4, #2
 8001498:	2600      	movs	r6, #0
 800149a:	42a6      	cmp	r6, r4
 800149c:	d105      	bne.n	80014aa <__libc_init_array+0x2e>
 800149e:	bd70      	pop	{r4, r5, r6, pc}
 80014a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80014a4:	4798      	blx	r3
 80014a6:	3601      	adds	r6, #1
 80014a8:	e7ee      	b.n	8001488 <__libc_init_array+0xc>
 80014aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80014ae:	4798      	blx	r3
 80014b0:	3601      	adds	r6, #1
 80014b2:	e7f2      	b.n	800149a <__libc_init_array+0x1e>
 80014b4:	080028a0 	.word	0x080028a0
 80014b8:	080028a0 	.word	0x080028a0
 80014bc:	080028a0 	.word	0x080028a0
 80014c0:	080028a4 	.word	0x080028a4

080014c4 <__retarget_lock_acquire_recursive>:
 80014c4:	4770      	bx	lr

080014c6 <__retarget_lock_release_recursive>:
 80014c6:	4770      	bx	lr

080014c8 <_free_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	4605      	mov	r5, r0
 80014cc:	2900      	cmp	r1, #0
 80014ce:	d041      	beq.n	8001554 <_free_r+0x8c>
 80014d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014d4:	1f0c      	subs	r4, r1, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bfb8      	it	lt
 80014da:	18e4      	addlt	r4, r4, r3
 80014dc:	f000 f8e0 	bl	80016a0 <__malloc_lock>
 80014e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <_free_r+0x90>)
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	b933      	cbnz	r3, 80014f4 <_free_r+0x2c>
 80014e6:	6063      	str	r3, [r4, #4]
 80014e8:	6014      	str	r4, [r2, #0]
 80014ea:	4628      	mov	r0, r5
 80014ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014f0:	f000 b8dc 	b.w	80016ac <__malloc_unlock>
 80014f4:	42a3      	cmp	r3, r4
 80014f6:	d908      	bls.n	800150a <_free_r+0x42>
 80014f8:	6820      	ldr	r0, [r4, #0]
 80014fa:	1821      	adds	r1, r4, r0
 80014fc:	428b      	cmp	r3, r1
 80014fe:	bf01      	itttt	eq
 8001500:	6819      	ldreq	r1, [r3, #0]
 8001502:	685b      	ldreq	r3, [r3, #4]
 8001504:	1809      	addeq	r1, r1, r0
 8001506:	6021      	streq	r1, [r4, #0]
 8001508:	e7ed      	b.n	80014e6 <_free_r+0x1e>
 800150a:	461a      	mov	r2, r3
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	b10b      	cbz	r3, 8001514 <_free_r+0x4c>
 8001510:	42a3      	cmp	r3, r4
 8001512:	d9fa      	bls.n	800150a <_free_r+0x42>
 8001514:	6811      	ldr	r1, [r2, #0]
 8001516:	1850      	adds	r0, r2, r1
 8001518:	42a0      	cmp	r0, r4
 800151a:	d10b      	bne.n	8001534 <_free_r+0x6c>
 800151c:	6820      	ldr	r0, [r4, #0]
 800151e:	4401      	add	r1, r0
 8001520:	1850      	adds	r0, r2, r1
 8001522:	4283      	cmp	r3, r0
 8001524:	6011      	str	r1, [r2, #0]
 8001526:	d1e0      	bne.n	80014ea <_free_r+0x22>
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	6053      	str	r3, [r2, #4]
 800152e:	4408      	add	r0, r1
 8001530:	6010      	str	r0, [r2, #0]
 8001532:	e7da      	b.n	80014ea <_free_r+0x22>
 8001534:	d902      	bls.n	800153c <_free_r+0x74>
 8001536:	230c      	movs	r3, #12
 8001538:	602b      	str	r3, [r5, #0]
 800153a:	e7d6      	b.n	80014ea <_free_r+0x22>
 800153c:	6820      	ldr	r0, [r4, #0]
 800153e:	1821      	adds	r1, r4, r0
 8001540:	428b      	cmp	r3, r1
 8001542:	bf04      	itt	eq
 8001544:	6819      	ldreq	r1, [r3, #0]
 8001546:	685b      	ldreq	r3, [r3, #4]
 8001548:	6063      	str	r3, [r4, #4]
 800154a:	bf04      	itt	eq
 800154c:	1809      	addeq	r1, r1, r0
 800154e:	6021      	streq	r1, [r4, #0]
 8001550:	6054      	str	r4, [r2, #4]
 8001552:	e7ca      	b.n	80014ea <_free_r+0x22>
 8001554:	bd38      	pop	{r3, r4, r5, pc}
 8001556:	bf00      	nop
 8001558:	20000220 	.word	0x20000220

0800155c <sbrk_aligned>:
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	4e0f      	ldr	r6, [pc, #60]	@ (800159c <sbrk_aligned+0x40>)
 8001560:	460c      	mov	r4, r1
 8001562:	6831      	ldr	r1, [r6, #0]
 8001564:	4605      	mov	r5, r0
 8001566:	b911      	cbnz	r1, 800156e <sbrk_aligned+0x12>
 8001568:	f000 fba4 	bl	8001cb4 <_sbrk_r>
 800156c:	6030      	str	r0, [r6, #0]
 800156e:	4621      	mov	r1, r4
 8001570:	4628      	mov	r0, r5
 8001572:	f000 fb9f 	bl	8001cb4 <_sbrk_r>
 8001576:	1c43      	adds	r3, r0, #1
 8001578:	d103      	bne.n	8001582 <sbrk_aligned+0x26>
 800157a:	f04f 34ff 	mov.w	r4, #4294967295
 800157e:	4620      	mov	r0, r4
 8001580:	bd70      	pop	{r4, r5, r6, pc}
 8001582:	1cc4      	adds	r4, r0, #3
 8001584:	f024 0403 	bic.w	r4, r4, #3
 8001588:	42a0      	cmp	r0, r4
 800158a:	d0f8      	beq.n	800157e <sbrk_aligned+0x22>
 800158c:	1a21      	subs	r1, r4, r0
 800158e:	4628      	mov	r0, r5
 8001590:	f000 fb90 	bl	8001cb4 <_sbrk_r>
 8001594:	3001      	adds	r0, #1
 8001596:	d1f2      	bne.n	800157e <sbrk_aligned+0x22>
 8001598:	e7ef      	b.n	800157a <sbrk_aligned+0x1e>
 800159a:	bf00      	nop
 800159c:	2000021c 	.word	0x2000021c

080015a0 <_malloc_r>:
 80015a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a4:	1ccd      	adds	r5, r1, #3
 80015a6:	f025 0503 	bic.w	r5, r5, #3
 80015aa:	3508      	adds	r5, #8
 80015ac:	2d0c      	cmp	r5, #12
 80015ae:	bf38      	it	cc
 80015b0:	250c      	movcc	r5, #12
 80015b2:	2d00      	cmp	r5, #0
 80015b4:	4606      	mov	r6, r0
 80015b6:	db01      	blt.n	80015bc <_malloc_r+0x1c>
 80015b8:	42a9      	cmp	r1, r5
 80015ba:	d904      	bls.n	80015c6 <_malloc_r+0x26>
 80015bc:	230c      	movs	r3, #12
 80015be:	6033      	str	r3, [r6, #0]
 80015c0:	2000      	movs	r0, #0
 80015c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800169c <_malloc_r+0xfc>
 80015ca:	f000 f869 	bl	80016a0 <__malloc_lock>
 80015ce:	f8d8 3000 	ldr.w	r3, [r8]
 80015d2:	461c      	mov	r4, r3
 80015d4:	bb44      	cbnz	r4, 8001628 <_malloc_r+0x88>
 80015d6:	4629      	mov	r1, r5
 80015d8:	4630      	mov	r0, r6
 80015da:	f7ff ffbf 	bl	800155c <sbrk_aligned>
 80015de:	1c43      	adds	r3, r0, #1
 80015e0:	4604      	mov	r4, r0
 80015e2:	d158      	bne.n	8001696 <_malloc_r+0xf6>
 80015e4:	f8d8 4000 	ldr.w	r4, [r8]
 80015e8:	4627      	mov	r7, r4
 80015ea:	2f00      	cmp	r7, #0
 80015ec:	d143      	bne.n	8001676 <_malloc_r+0xd6>
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	d04b      	beq.n	800168a <_malloc_r+0xea>
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	4639      	mov	r1, r7
 80015f6:	4630      	mov	r0, r6
 80015f8:	eb04 0903 	add.w	r9, r4, r3
 80015fc:	f000 fb5a 	bl	8001cb4 <_sbrk_r>
 8001600:	4581      	cmp	r9, r0
 8001602:	d142      	bne.n	800168a <_malloc_r+0xea>
 8001604:	6821      	ldr	r1, [r4, #0]
 8001606:	1a6d      	subs	r5, r5, r1
 8001608:	4629      	mov	r1, r5
 800160a:	4630      	mov	r0, r6
 800160c:	f7ff ffa6 	bl	800155c <sbrk_aligned>
 8001610:	3001      	adds	r0, #1
 8001612:	d03a      	beq.n	800168a <_malloc_r+0xea>
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	442b      	add	r3, r5
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	f8d8 3000 	ldr.w	r3, [r8]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	bb62      	cbnz	r2, 800167c <_malloc_r+0xdc>
 8001622:	f8c8 7000 	str.w	r7, [r8]
 8001626:	e00f      	b.n	8001648 <_malloc_r+0xa8>
 8001628:	6822      	ldr	r2, [r4, #0]
 800162a:	1b52      	subs	r2, r2, r5
 800162c:	d420      	bmi.n	8001670 <_malloc_r+0xd0>
 800162e:	2a0b      	cmp	r2, #11
 8001630:	d917      	bls.n	8001662 <_malloc_r+0xc2>
 8001632:	1961      	adds	r1, r4, r5
 8001634:	42a3      	cmp	r3, r4
 8001636:	6025      	str	r5, [r4, #0]
 8001638:	bf18      	it	ne
 800163a:	6059      	strne	r1, [r3, #4]
 800163c:	6863      	ldr	r3, [r4, #4]
 800163e:	bf08      	it	eq
 8001640:	f8c8 1000 	streq.w	r1, [r8]
 8001644:	5162      	str	r2, [r4, r5]
 8001646:	604b      	str	r3, [r1, #4]
 8001648:	4630      	mov	r0, r6
 800164a:	f000 f82f 	bl	80016ac <__malloc_unlock>
 800164e:	f104 000b 	add.w	r0, r4, #11
 8001652:	1d23      	adds	r3, r4, #4
 8001654:	f020 0007 	bic.w	r0, r0, #7
 8001658:	1ac2      	subs	r2, r0, r3
 800165a:	bf1c      	itt	ne
 800165c:	1a1b      	subne	r3, r3, r0
 800165e:	50a3      	strne	r3, [r4, r2]
 8001660:	e7af      	b.n	80015c2 <_malloc_r+0x22>
 8001662:	6862      	ldr	r2, [r4, #4]
 8001664:	42a3      	cmp	r3, r4
 8001666:	bf0c      	ite	eq
 8001668:	f8c8 2000 	streq.w	r2, [r8]
 800166c:	605a      	strne	r2, [r3, #4]
 800166e:	e7eb      	b.n	8001648 <_malloc_r+0xa8>
 8001670:	4623      	mov	r3, r4
 8001672:	6864      	ldr	r4, [r4, #4]
 8001674:	e7ae      	b.n	80015d4 <_malloc_r+0x34>
 8001676:	463c      	mov	r4, r7
 8001678:	687f      	ldr	r7, [r7, #4]
 800167a:	e7b6      	b.n	80015ea <_malloc_r+0x4a>
 800167c:	461a      	mov	r2, r3
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	42a3      	cmp	r3, r4
 8001682:	d1fb      	bne.n	800167c <_malloc_r+0xdc>
 8001684:	2300      	movs	r3, #0
 8001686:	6053      	str	r3, [r2, #4]
 8001688:	e7de      	b.n	8001648 <_malloc_r+0xa8>
 800168a:	230c      	movs	r3, #12
 800168c:	6033      	str	r3, [r6, #0]
 800168e:	4630      	mov	r0, r6
 8001690:	f000 f80c 	bl	80016ac <__malloc_unlock>
 8001694:	e794      	b.n	80015c0 <_malloc_r+0x20>
 8001696:	6005      	str	r5, [r0, #0]
 8001698:	e7d6      	b.n	8001648 <_malloc_r+0xa8>
 800169a:	bf00      	nop
 800169c:	20000220 	.word	0x20000220

080016a0 <__malloc_lock>:
 80016a0:	4801      	ldr	r0, [pc, #4]	@ (80016a8 <__malloc_lock+0x8>)
 80016a2:	f7ff bf0f 	b.w	80014c4 <__retarget_lock_acquire_recursive>
 80016a6:	bf00      	nop
 80016a8:	20000218 	.word	0x20000218

080016ac <__malloc_unlock>:
 80016ac:	4801      	ldr	r0, [pc, #4]	@ (80016b4 <__malloc_unlock+0x8>)
 80016ae:	f7ff bf0a 	b.w	80014c6 <__retarget_lock_release_recursive>
 80016b2:	bf00      	nop
 80016b4:	20000218 	.word	0x20000218

080016b8 <__ssputs_r>:
 80016b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016bc:	688e      	ldr	r6, [r1, #8]
 80016be:	461f      	mov	r7, r3
 80016c0:	42be      	cmp	r6, r7
 80016c2:	680b      	ldr	r3, [r1, #0]
 80016c4:	4682      	mov	sl, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	4690      	mov	r8, r2
 80016ca:	d82d      	bhi.n	8001728 <__ssputs_r+0x70>
 80016cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80016d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80016d4:	d026      	beq.n	8001724 <__ssputs_r+0x6c>
 80016d6:	6965      	ldr	r5, [r4, #20]
 80016d8:	6909      	ldr	r1, [r1, #16]
 80016da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016de:	eba3 0901 	sub.w	r9, r3, r1
 80016e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80016e6:	1c7b      	adds	r3, r7, #1
 80016e8:	444b      	add	r3, r9
 80016ea:	106d      	asrs	r5, r5, #1
 80016ec:	429d      	cmp	r5, r3
 80016ee:	bf38      	it	cc
 80016f0:	461d      	movcc	r5, r3
 80016f2:	0553      	lsls	r3, r2, #21
 80016f4:	d527      	bpl.n	8001746 <__ssputs_r+0x8e>
 80016f6:	4629      	mov	r1, r5
 80016f8:	f7ff ff52 	bl	80015a0 <_malloc_r>
 80016fc:	4606      	mov	r6, r0
 80016fe:	b360      	cbz	r0, 800175a <__ssputs_r+0xa2>
 8001700:	6921      	ldr	r1, [r4, #16]
 8001702:	464a      	mov	r2, r9
 8001704:	f000 fae6 	bl	8001cd4 <memcpy>
 8001708:	89a3      	ldrh	r3, [r4, #12]
 800170a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800170e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001712:	81a3      	strh	r3, [r4, #12]
 8001714:	6126      	str	r6, [r4, #16]
 8001716:	6165      	str	r5, [r4, #20]
 8001718:	444e      	add	r6, r9
 800171a:	eba5 0509 	sub.w	r5, r5, r9
 800171e:	6026      	str	r6, [r4, #0]
 8001720:	60a5      	str	r5, [r4, #8]
 8001722:	463e      	mov	r6, r7
 8001724:	42be      	cmp	r6, r7
 8001726:	d900      	bls.n	800172a <__ssputs_r+0x72>
 8001728:	463e      	mov	r6, r7
 800172a:	6820      	ldr	r0, [r4, #0]
 800172c:	4632      	mov	r2, r6
 800172e:	4641      	mov	r1, r8
 8001730:	f000 faa6 	bl	8001c80 <memmove>
 8001734:	68a3      	ldr	r3, [r4, #8]
 8001736:	1b9b      	subs	r3, r3, r6
 8001738:	60a3      	str	r3, [r4, #8]
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	4433      	add	r3, r6
 800173e:	6023      	str	r3, [r4, #0]
 8001740:	2000      	movs	r0, #0
 8001742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001746:	462a      	mov	r2, r5
 8001748:	f000 fad2 	bl	8001cf0 <_realloc_r>
 800174c:	4606      	mov	r6, r0
 800174e:	2800      	cmp	r0, #0
 8001750:	d1e0      	bne.n	8001714 <__ssputs_r+0x5c>
 8001752:	6921      	ldr	r1, [r4, #16]
 8001754:	4650      	mov	r0, sl
 8001756:	f7ff feb7 	bl	80014c8 <_free_r>
 800175a:	230c      	movs	r3, #12
 800175c:	f8ca 3000 	str.w	r3, [sl]
 8001760:	89a3      	ldrh	r3, [r4, #12]
 8001762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001766:	81a3      	strh	r3, [r4, #12]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	e7e9      	b.n	8001742 <__ssputs_r+0x8a>
	...

08001770 <_svfiprintf_r>:
 8001770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001774:	4698      	mov	r8, r3
 8001776:	898b      	ldrh	r3, [r1, #12]
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	b09d      	sub	sp, #116	@ 0x74
 800177c:	4607      	mov	r7, r0
 800177e:	460d      	mov	r5, r1
 8001780:	4614      	mov	r4, r2
 8001782:	d510      	bpl.n	80017a6 <_svfiprintf_r+0x36>
 8001784:	690b      	ldr	r3, [r1, #16]
 8001786:	b973      	cbnz	r3, 80017a6 <_svfiprintf_r+0x36>
 8001788:	2140      	movs	r1, #64	@ 0x40
 800178a:	f7ff ff09 	bl	80015a0 <_malloc_r>
 800178e:	6028      	str	r0, [r5, #0]
 8001790:	6128      	str	r0, [r5, #16]
 8001792:	b930      	cbnz	r0, 80017a2 <_svfiprintf_r+0x32>
 8001794:	230c      	movs	r3, #12
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	b01d      	add	sp, #116	@ 0x74
 800179e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017a2:	2340      	movs	r3, #64	@ 0x40
 80017a4:	616b      	str	r3, [r5, #20]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80017aa:	2320      	movs	r3, #32
 80017ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80017b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80017b4:	2330      	movs	r3, #48	@ 0x30
 80017b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001954 <_svfiprintf_r+0x1e4>
 80017ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80017be:	f04f 0901 	mov.w	r9, #1
 80017c2:	4623      	mov	r3, r4
 80017c4:	469a      	mov	sl, r3
 80017c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017ca:	b10a      	cbz	r2, 80017d0 <_svfiprintf_r+0x60>
 80017cc:	2a25      	cmp	r2, #37	@ 0x25
 80017ce:	d1f9      	bne.n	80017c4 <_svfiprintf_r+0x54>
 80017d0:	ebba 0b04 	subs.w	fp, sl, r4
 80017d4:	d00b      	beq.n	80017ee <_svfiprintf_r+0x7e>
 80017d6:	465b      	mov	r3, fp
 80017d8:	4622      	mov	r2, r4
 80017da:	4629      	mov	r1, r5
 80017dc:	4638      	mov	r0, r7
 80017de:	f7ff ff6b 	bl	80016b8 <__ssputs_r>
 80017e2:	3001      	adds	r0, #1
 80017e4:	f000 80a7 	beq.w	8001936 <_svfiprintf_r+0x1c6>
 80017e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017ea:	445a      	add	r2, fp
 80017ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80017ee:	f89a 3000 	ldrb.w	r3, [sl]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 809f 	beq.w	8001936 <_svfiprintf_r+0x1c6>
 80017f8:	2300      	movs	r3, #0
 80017fa:	f04f 32ff 	mov.w	r2, #4294967295
 80017fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001802:	f10a 0a01 	add.w	sl, sl, #1
 8001806:	9304      	str	r3, [sp, #16]
 8001808:	9307      	str	r3, [sp, #28]
 800180a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800180e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001810:	4654      	mov	r4, sl
 8001812:	2205      	movs	r2, #5
 8001814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001818:	484e      	ldr	r0, [pc, #312]	@ (8001954 <_svfiprintf_r+0x1e4>)
 800181a:	f7fe fce1 	bl	80001e0 <memchr>
 800181e:	9a04      	ldr	r2, [sp, #16]
 8001820:	b9d8      	cbnz	r0, 800185a <_svfiprintf_r+0xea>
 8001822:	06d0      	lsls	r0, r2, #27
 8001824:	bf44      	itt	mi
 8001826:	2320      	movmi	r3, #32
 8001828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800182c:	0711      	lsls	r1, r2, #28
 800182e:	bf44      	itt	mi
 8001830:	232b      	movmi	r3, #43	@ 0x2b
 8001832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001836:	f89a 3000 	ldrb.w	r3, [sl]
 800183a:	2b2a      	cmp	r3, #42	@ 0x2a
 800183c:	d015      	beq.n	800186a <_svfiprintf_r+0xfa>
 800183e:	9a07      	ldr	r2, [sp, #28]
 8001840:	4654      	mov	r4, sl
 8001842:	2000      	movs	r0, #0
 8001844:	f04f 0c0a 	mov.w	ip, #10
 8001848:	4621      	mov	r1, r4
 800184a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800184e:	3b30      	subs	r3, #48	@ 0x30
 8001850:	2b09      	cmp	r3, #9
 8001852:	d94b      	bls.n	80018ec <_svfiprintf_r+0x17c>
 8001854:	b1b0      	cbz	r0, 8001884 <_svfiprintf_r+0x114>
 8001856:	9207      	str	r2, [sp, #28]
 8001858:	e014      	b.n	8001884 <_svfiprintf_r+0x114>
 800185a:	eba0 0308 	sub.w	r3, r0, r8
 800185e:	fa09 f303 	lsl.w	r3, r9, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	9304      	str	r3, [sp, #16]
 8001866:	46a2      	mov	sl, r4
 8001868:	e7d2      	b.n	8001810 <_svfiprintf_r+0xa0>
 800186a:	9b03      	ldr	r3, [sp, #12]
 800186c:	1d19      	adds	r1, r3, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	9103      	str	r1, [sp, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	bfbb      	ittet	lt
 8001876:	425b      	neglt	r3, r3
 8001878:	f042 0202 	orrlt.w	r2, r2, #2
 800187c:	9307      	strge	r3, [sp, #28]
 800187e:	9307      	strlt	r3, [sp, #28]
 8001880:	bfb8      	it	lt
 8001882:	9204      	strlt	r2, [sp, #16]
 8001884:	7823      	ldrb	r3, [r4, #0]
 8001886:	2b2e      	cmp	r3, #46	@ 0x2e
 8001888:	d10a      	bne.n	80018a0 <_svfiprintf_r+0x130>
 800188a:	7863      	ldrb	r3, [r4, #1]
 800188c:	2b2a      	cmp	r3, #42	@ 0x2a
 800188e:	d132      	bne.n	80018f6 <_svfiprintf_r+0x186>
 8001890:	9b03      	ldr	r3, [sp, #12]
 8001892:	1d1a      	adds	r2, r3, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	9203      	str	r2, [sp, #12]
 8001898:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800189c:	3402      	adds	r4, #2
 800189e:	9305      	str	r3, [sp, #20]
 80018a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001964 <_svfiprintf_r+0x1f4>
 80018a4:	7821      	ldrb	r1, [r4, #0]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4650      	mov	r0, sl
 80018aa:	f7fe fc99 	bl	80001e0 <memchr>
 80018ae:	b138      	cbz	r0, 80018c0 <_svfiprintf_r+0x150>
 80018b0:	9b04      	ldr	r3, [sp, #16]
 80018b2:	eba0 000a 	sub.w	r0, r0, sl
 80018b6:	2240      	movs	r2, #64	@ 0x40
 80018b8:	4082      	lsls	r2, r0
 80018ba:	4313      	orrs	r3, r2
 80018bc:	3401      	adds	r4, #1
 80018be:	9304      	str	r3, [sp, #16]
 80018c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018c4:	4824      	ldr	r0, [pc, #144]	@ (8001958 <_svfiprintf_r+0x1e8>)
 80018c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80018ca:	2206      	movs	r2, #6
 80018cc:	f7fe fc88 	bl	80001e0 <memchr>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d036      	beq.n	8001942 <_svfiprintf_r+0x1d2>
 80018d4:	4b21      	ldr	r3, [pc, #132]	@ (800195c <_svfiprintf_r+0x1ec>)
 80018d6:	bb1b      	cbnz	r3, 8001920 <_svfiprintf_r+0x1b0>
 80018d8:	9b03      	ldr	r3, [sp, #12]
 80018da:	3307      	adds	r3, #7
 80018dc:	f023 0307 	bic.w	r3, r3, #7
 80018e0:	3308      	adds	r3, #8
 80018e2:	9303      	str	r3, [sp, #12]
 80018e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80018e6:	4433      	add	r3, r6
 80018e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80018ea:	e76a      	b.n	80017c2 <_svfiprintf_r+0x52>
 80018ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80018f0:	460c      	mov	r4, r1
 80018f2:	2001      	movs	r0, #1
 80018f4:	e7a8      	b.n	8001848 <_svfiprintf_r+0xd8>
 80018f6:	2300      	movs	r3, #0
 80018f8:	3401      	adds	r4, #1
 80018fa:	9305      	str	r3, [sp, #20]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 0c0a 	mov.w	ip, #10
 8001902:	4620      	mov	r0, r4
 8001904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001908:	3a30      	subs	r2, #48	@ 0x30
 800190a:	2a09      	cmp	r2, #9
 800190c:	d903      	bls.n	8001916 <_svfiprintf_r+0x1a6>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0c6      	beq.n	80018a0 <_svfiprintf_r+0x130>
 8001912:	9105      	str	r1, [sp, #20]
 8001914:	e7c4      	b.n	80018a0 <_svfiprintf_r+0x130>
 8001916:	fb0c 2101 	mla	r1, ip, r1, r2
 800191a:	4604      	mov	r4, r0
 800191c:	2301      	movs	r3, #1
 800191e:	e7f0      	b.n	8001902 <_svfiprintf_r+0x192>
 8001920:	ab03      	add	r3, sp, #12
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	462a      	mov	r2, r5
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <_svfiprintf_r+0x1f0>)
 8001928:	a904      	add	r1, sp, #16
 800192a:	4638      	mov	r0, r7
 800192c:	f3af 8000 	nop.w
 8001930:	1c42      	adds	r2, r0, #1
 8001932:	4606      	mov	r6, r0
 8001934:	d1d6      	bne.n	80018e4 <_svfiprintf_r+0x174>
 8001936:	89ab      	ldrh	r3, [r5, #12]
 8001938:	065b      	lsls	r3, r3, #25
 800193a:	f53f af2d 	bmi.w	8001798 <_svfiprintf_r+0x28>
 800193e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001940:	e72c      	b.n	800179c <_svfiprintf_r+0x2c>
 8001942:	ab03      	add	r3, sp, #12
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	462a      	mov	r2, r5
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <_svfiprintf_r+0x1f0>)
 800194a:	a904      	add	r1, sp, #16
 800194c:	4638      	mov	r0, r7
 800194e:	f000 f879 	bl	8001a44 <_printf_i>
 8001952:	e7ed      	b.n	8001930 <_svfiprintf_r+0x1c0>
 8001954:	0800284b 	.word	0x0800284b
 8001958:	08002855 	.word	0x08002855
 800195c:	00000000 	.word	0x00000000
 8001960:	080016b9 	.word	0x080016b9
 8001964:	08002851 	.word	0x08002851

08001968 <_printf_common>:
 8001968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800196c:	4616      	mov	r6, r2
 800196e:	4698      	mov	r8, r3
 8001970:	688a      	ldr	r2, [r1, #8]
 8001972:	690b      	ldr	r3, [r1, #16]
 8001974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001978:	4293      	cmp	r3, r2
 800197a:	bfb8      	it	lt
 800197c:	4613      	movlt	r3, r2
 800197e:	6033      	str	r3, [r6, #0]
 8001980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001984:	4607      	mov	r7, r0
 8001986:	460c      	mov	r4, r1
 8001988:	b10a      	cbz	r2, 800198e <_printf_common+0x26>
 800198a:	3301      	adds	r3, #1
 800198c:	6033      	str	r3, [r6, #0]
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	0699      	lsls	r1, r3, #26
 8001992:	bf42      	ittt	mi
 8001994:	6833      	ldrmi	r3, [r6, #0]
 8001996:	3302      	addmi	r3, #2
 8001998:	6033      	strmi	r3, [r6, #0]
 800199a:	6825      	ldr	r5, [r4, #0]
 800199c:	f015 0506 	ands.w	r5, r5, #6
 80019a0:	d106      	bne.n	80019b0 <_printf_common+0x48>
 80019a2:	f104 0a19 	add.w	sl, r4, #25
 80019a6:	68e3      	ldr	r3, [r4, #12]
 80019a8:	6832      	ldr	r2, [r6, #0]
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	42ab      	cmp	r3, r5
 80019ae:	dc26      	bgt.n	80019fe <_printf_common+0x96>
 80019b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	3b00      	subs	r3, #0
 80019b8:	bf18      	it	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	0692      	lsls	r2, r2, #26
 80019be:	d42b      	bmi.n	8001a18 <_printf_common+0xb0>
 80019c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80019c4:	4641      	mov	r1, r8
 80019c6:	4638      	mov	r0, r7
 80019c8:	47c8      	blx	r9
 80019ca:	3001      	adds	r0, #1
 80019cc:	d01e      	beq.n	8001a0c <_printf_common+0xa4>
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	6922      	ldr	r2, [r4, #16]
 80019d2:	f003 0306 	and.w	r3, r3, #6
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf02      	ittt	eq
 80019da:	68e5      	ldreq	r5, [r4, #12]
 80019dc:	6833      	ldreq	r3, [r6, #0]
 80019de:	1aed      	subeq	r5, r5, r3
 80019e0:	68a3      	ldr	r3, [r4, #8]
 80019e2:	bf0c      	ite	eq
 80019e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019e8:	2500      	movne	r5, #0
 80019ea:	4293      	cmp	r3, r2
 80019ec:	bfc4      	itt	gt
 80019ee:	1a9b      	subgt	r3, r3, r2
 80019f0:	18ed      	addgt	r5, r5, r3
 80019f2:	2600      	movs	r6, #0
 80019f4:	341a      	adds	r4, #26
 80019f6:	42b5      	cmp	r5, r6
 80019f8:	d11a      	bne.n	8001a30 <_printf_common+0xc8>
 80019fa:	2000      	movs	r0, #0
 80019fc:	e008      	b.n	8001a10 <_printf_common+0xa8>
 80019fe:	2301      	movs	r3, #1
 8001a00:	4652      	mov	r2, sl
 8001a02:	4641      	mov	r1, r8
 8001a04:	4638      	mov	r0, r7
 8001a06:	47c8      	blx	r9
 8001a08:	3001      	adds	r0, #1
 8001a0a:	d103      	bne.n	8001a14 <_printf_common+0xac>
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a14:	3501      	adds	r5, #1
 8001a16:	e7c6      	b.n	80019a6 <_printf_common+0x3e>
 8001a18:	18e1      	adds	r1, r4, r3
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	2030      	movs	r0, #48	@ 0x30
 8001a1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a22:	4422      	add	r2, r4
 8001a24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	e7c7      	b.n	80019c0 <_printf_common+0x58>
 8001a30:	2301      	movs	r3, #1
 8001a32:	4622      	mov	r2, r4
 8001a34:	4641      	mov	r1, r8
 8001a36:	4638      	mov	r0, r7
 8001a38:	47c8      	blx	r9
 8001a3a:	3001      	adds	r0, #1
 8001a3c:	d0e6      	beq.n	8001a0c <_printf_common+0xa4>
 8001a3e:	3601      	adds	r6, #1
 8001a40:	e7d9      	b.n	80019f6 <_printf_common+0x8e>
	...

08001a44 <_printf_i>:
 8001a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a48:	7e0f      	ldrb	r7, [r1, #24]
 8001a4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a4c:	2f78      	cmp	r7, #120	@ 0x78
 8001a4e:	4691      	mov	r9, r2
 8001a50:	4680      	mov	r8, r0
 8001a52:	460c      	mov	r4, r1
 8001a54:	469a      	mov	sl, r3
 8001a56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a5a:	d807      	bhi.n	8001a6c <_printf_i+0x28>
 8001a5c:	2f62      	cmp	r7, #98	@ 0x62
 8001a5e:	d80a      	bhi.n	8001a76 <_printf_i+0x32>
 8001a60:	2f00      	cmp	r7, #0
 8001a62:	f000 80d1 	beq.w	8001c08 <_printf_i+0x1c4>
 8001a66:	2f58      	cmp	r7, #88	@ 0x58
 8001a68:	f000 80b8 	beq.w	8001bdc <_printf_i+0x198>
 8001a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a74:	e03a      	b.n	8001aec <_printf_i+0xa8>
 8001a76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a7a:	2b15      	cmp	r3, #21
 8001a7c:	d8f6      	bhi.n	8001a6c <_printf_i+0x28>
 8001a7e:	a101      	add	r1, pc, #4	@ (adr r1, 8001a84 <_printf_i+0x40>)
 8001a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a84:	08001add 	.word	0x08001add
 8001a88:	08001af1 	.word	0x08001af1
 8001a8c:	08001a6d 	.word	0x08001a6d
 8001a90:	08001a6d 	.word	0x08001a6d
 8001a94:	08001a6d 	.word	0x08001a6d
 8001a98:	08001a6d 	.word	0x08001a6d
 8001a9c:	08001af1 	.word	0x08001af1
 8001aa0:	08001a6d 	.word	0x08001a6d
 8001aa4:	08001a6d 	.word	0x08001a6d
 8001aa8:	08001a6d 	.word	0x08001a6d
 8001aac:	08001a6d 	.word	0x08001a6d
 8001ab0:	08001bef 	.word	0x08001bef
 8001ab4:	08001b1b 	.word	0x08001b1b
 8001ab8:	08001ba9 	.word	0x08001ba9
 8001abc:	08001a6d 	.word	0x08001a6d
 8001ac0:	08001a6d 	.word	0x08001a6d
 8001ac4:	08001c11 	.word	0x08001c11
 8001ac8:	08001a6d 	.word	0x08001a6d
 8001acc:	08001b1b 	.word	0x08001b1b
 8001ad0:	08001a6d 	.word	0x08001a6d
 8001ad4:	08001a6d 	.word	0x08001a6d
 8001ad8:	08001bb1 	.word	0x08001bb1
 8001adc:	6833      	ldr	r3, [r6, #0]
 8001ade:	1d1a      	adds	r2, r3, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6032      	str	r2, [r6, #0]
 8001ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001aec:	2301      	movs	r3, #1
 8001aee:	e09c      	b.n	8001c2a <_printf_i+0x1e6>
 8001af0:	6833      	ldr	r3, [r6, #0]
 8001af2:	6820      	ldr	r0, [r4, #0]
 8001af4:	1d19      	adds	r1, r3, #4
 8001af6:	6031      	str	r1, [r6, #0]
 8001af8:	0606      	lsls	r6, r0, #24
 8001afa:	d501      	bpl.n	8001b00 <_printf_i+0xbc>
 8001afc:	681d      	ldr	r5, [r3, #0]
 8001afe:	e003      	b.n	8001b08 <_printf_i+0xc4>
 8001b00:	0645      	lsls	r5, r0, #25
 8001b02:	d5fb      	bpl.n	8001afc <_printf_i+0xb8>
 8001b04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b08:	2d00      	cmp	r5, #0
 8001b0a:	da03      	bge.n	8001b14 <_printf_i+0xd0>
 8001b0c:	232d      	movs	r3, #45	@ 0x2d
 8001b0e:	426d      	negs	r5, r5
 8001b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b14:	4858      	ldr	r0, [pc, #352]	@ (8001c78 <_printf_i+0x234>)
 8001b16:	230a      	movs	r3, #10
 8001b18:	e011      	b.n	8001b3e <_printf_i+0xfa>
 8001b1a:	6821      	ldr	r1, [r4, #0]
 8001b1c:	6833      	ldr	r3, [r6, #0]
 8001b1e:	0608      	lsls	r0, r1, #24
 8001b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b24:	d402      	bmi.n	8001b2c <_printf_i+0xe8>
 8001b26:	0649      	lsls	r1, r1, #25
 8001b28:	bf48      	it	mi
 8001b2a:	b2ad      	uxthmi	r5, r5
 8001b2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b2e:	4852      	ldr	r0, [pc, #328]	@ (8001c78 <_printf_i+0x234>)
 8001b30:	6033      	str	r3, [r6, #0]
 8001b32:	bf14      	ite	ne
 8001b34:	230a      	movne	r3, #10
 8001b36:	2308      	moveq	r3, #8
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b3e:	6866      	ldr	r6, [r4, #4]
 8001b40:	60a6      	str	r6, [r4, #8]
 8001b42:	2e00      	cmp	r6, #0
 8001b44:	db05      	blt.n	8001b52 <_printf_i+0x10e>
 8001b46:	6821      	ldr	r1, [r4, #0]
 8001b48:	432e      	orrs	r6, r5
 8001b4a:	f021 0104 	bic.w	r1, r1, #4
 8001b4e:	6021      	str	r1, [r4, #0]
 8001b50:	d04b      	beq.n	8001bea <_printf_i+0x1a6>
 8001b52:	4616      	mov	r6, r2
 8001b54:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b58:	fb03 5711 	mls	r7, r3, r1, r5
 8001b5c:	5dc7      	ldrb	r7, [r0, r7]
 8001b5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b62:	462f      	mov	r7, r5
 8001b64:	42bb      	cmp	r3, r7
 8001b66:	460d      	mov	r5, r1
 8001b68:	d9f4      	bls.n	8001b54 <_printf_i+0x110>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d10b      	bne.n	8001b86 <_printf_i+0x142>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	07df      	lsls	r7, r3, #31
 8001b72:	d508      	bpl.n	8001b86 <_printf_i+0x142>
 8001b74:	6923      	ldr	r3, [r4, #16]
 8001b76:	6861      	ldr	r1, [r4, #4]
 8001b78:	4299      	cmp	r1, r3
 8001b7a:	bfde      	ittt	le
 8001b7c:	2330      	movle	r3, #48	@ 0x30
 8001b7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b86:	1b92      	subs	r2, r2, r6
 8001b88:	6122      	str	r2, [r4, #16]
 8001b8a:	f8cd a000 	str.w	sl, [sp]
 8001b8e:	464b      	mov	r3, r9
 8001b90:	aa03      	add	r2, sp, #12
 8001b92:	4621      	mov	r1, r4
 8001b94:	4640      	mov	r0, r8
 8001b96:	f7ff fee7 	bl	8001968 <_printf_common>
 8001b9a:	3001      	adds	r0, #1
 8001b9c:	d14a      	bne.n	8001c34 <_printf_i+0x1f0>
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba2:	b004      	add	sp, #16
 8001ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	f043 0320 	orr.w	r3, r3, #32
 8001bae:	6023      	str	r3, [r4, #0]
 8001bb0:	4832      	ldr	r0, [pc, #200]	@ (8001c7c <_printf_i+0x238>)
 8001bb2:	2778      	movs	r7, #120	@ 0x78
 8001bb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	6831      	ldr	r1, [r6, #0]
 8001bbc:	061f      	lsls	r7, r3, #24
 8001bbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8001bc2:	d402      	bmi.n	8001bca <_printf_i+0x186>
 8001bc4:	065f      	lsls	r7, r3, #25
 8001bc6:	bf48      	it	mi
 8001bc8:	b2ad      	uxthmi	r5, r5
 8001bca:	6031      	str	r1, [r6, #0]
 8001bcc:	07d9      	lsls	r1, r3, #31
 8001bce:	bf44      	itt	mi
 8001bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8001bd4:	6023      	strmi	r3, [r4, #0]
 8001bd6:	b11d      	cbz	r5, 8001be0 <_printf_i+0x19c>
 8001bd8:	2310      	movs	r3, #16
 8001bda:	e7ad      	b.n	8001b38 <_printf_i+0xf4>
 8001bdc:	4826      	ldr	r0, [pc, #152]	@ (8001c78 <_printf_i+0x234>)
 8001bde:	e7e9      	b.n	8001bb4 <_printf_i+0x170>
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	f023 0320 	bic.w	r3, r3, #32
 8001be6:	6023      	str	r3, [r4, #0]
 8001be8:	e7f6      	b.n	8001bd8 <_printf_i+0x194>
 8001bea:	4616      	mov	r6, r2
 8001bec:	e7bd      	b.n	8001b6a <_printf_i+0x126>
 8001bee:	6833      	ldr	r3, [r6, #0]
 8001bf0:	6825      	ldr	r5, [r4, #0]
 8001bf2:	6961      	ldr	r1, [r4, #20]
 8001bf4:	1d18      	adds	r0, r3, #4
 8001bf6:	6030      	str	r0, [r6, #0]
 8001bf8:	062e      	lsls	r6, r5, #24
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	d501      	bpl.n	8001c02 <_printf_i+0x1be>
 8001bfe:	6019      	str	r1, [r3, #0]
 8001c00:	e002      	b.n	8001c08 <_printf_i+0x1c4>
 8001c02:	0668      	lsls	r0, r5, #25
 8001c04:	d5fb      	bpl.n	8001bfe <_printf_i+0x1ba>
 8001c06:	8019      	strh	r1, [r3, #0]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6123      	str	r3, [r4, #16]
 8001c0c:	4616      	mov	r6, r2
 8001c0e:	e7bc      	b.n	8001b8a <_printf_i+0x146>
 8001c10:	6833      	ldr	r3, [r6, #0]
 8001c12:	1d1a      	adds	r2, r3, #4
 8001c14:	6032      	str	r2, [r6, #0]
 8001c16:	681e      	ldr	r6, [r3, #0]
 8001c18:	6862      	ldr	r2, [r4, #4]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	f7fe fadf 	bl	80001e0 <memchr>
 8001c22:	b108      	cbz	r0, 8001c28 <_printf_i+0x1e4>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	6060      	str	r0, [r4, #4]
 8001c28:	6863      	ldr	r3, [r4, #4]
 8001c2a:	6123      	str	r3, [r4, #16]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c32:	e7aa      	b.n	8001b8a <_printf_i+0x146>
 8001c34:	6923      	ldr	r3, [r4, #16]
 8001c36:	4632      	mov	r2, r6
 8001c38:	4649      	mov	r1, r9
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	47d0      	blx	sl
 8001c3e:	3001      	adds	r0, #1
 8001c40:	d0ad      	beq.n	8001b9e <_printf_i+0x15a>
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	079b      	lsls	r3, r3, #30
 8001c46:	d413      	bmi.n	8001c70 <_printf_i+0x22c>
 8001c48:	68e0      	ldr	r0, [r4, #12]
 8001c4a:	9b03      	ldr	r3, [sp, #12]
 8001c4c:	4298      	cmp	r0, r3
 8001c4e:	bfb8      	it	lt
 8001c50:	4618      	movlt	r0, r3
 8001c52:	e7a6      	b.n	8001ba2 <_printf_i+0x15e>
 8001c54:	2301      	movs	r3, #1
 8001c56:	4632      	mov	r2, r6
 8001c58:	4649      	mov	r1, r9
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	47d0      	blx	sl
 8001c5e:	3001      	adds	r0, #1
 8001c60:	d09d      	beq.n	8001b9e <_printf_i+0x15a>
 8001c62:	3501      	adds	r5, #1
 8001c64:	68e3      	ldr	r3, [r4, #12]
 8001c66:	9903      	ldr	r1, [sp, #12]
 8001c68:	1a5b      	subs	r3, r3, r1
 8001c6a:	42ab      	cmp	r3, r5
 8001c6c:	dcf2      	bgt.n	8001c54 <_printf_i+0x210>
 8001c6e:	e7eb      	b.n	8001c48 <_printf_i+0x204>
 8001c70:	2500      	movs	r5, #0
 8001c72:	f104 0619 	add.w	r6, r4, #25
 8001c76:	e7f5      	b.n	8001c64 <_printf_i+0x220>
 8001c78:	0800285c 	.word	0x0800285c
 8001c7c:	0800286d 	.word	0x0800286d

08001c80 <memmove>:
 8001c80:	4288      	cmp	r0, r1
 8001c82:	b510      	push	{r4, lr}
 8001c84:	eb01 0402 	add.w	r4, r1, r2
 8001c88:	d902      	bls.n	8001c90 <memmove+0x10>
 8001c8a:	4284      	cmp	r4, r0
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	d807      	bhi.n	8001ca0 <memmove+0x20>
 8001c90:	1e43      	subs	r3, r0, #1
 8001c92:	42a1      	cmp	r1, r4
 8001c94:	d008      	beq.n	8001ca8 <memmove+0x28>
 8001c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c9e:	e7f8      	b.n	8001c92 <memmove+0x12>
 8001ca0:	4402      	add	r2, r0
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	428a      	cmp	r2, r1
 8001ca6:	d100      	bne.n	8001caa <memmove+0x2a>
 8001ca8:	bd10      	pop	{r4, pc}
 8001caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001cb2:	e7f7      	b.n	8001ca4 <memmove+0x24>

08001cb4 <_sbrk_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	4d06      	ldr	r5, [pc, #24]	@ (8001cd0 <_sbrk_r+0x1c>)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	602b      	str	r3, [r5, #0]
 8001cc0:	f7ff fa62 	bl	8001188 <_sbrk>
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	d102      	bne.n	8001cce <_sbrk_r+0x1a>
 8001cc8:	682b      	ldr	r3, [r5, #0]
 8001cca:	b103      	cbz	r3, 8001cce <_sbrk_r+0x1a>
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	20000214 	.word	0x20000214

08001cd4 <memcpy>:
 8001cd4:	440a      	add	r2, r1
 8001cd6:	4291      	cmp	r1, r2
 8001cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8001cdc:	d100      	bne.n	8001ce0 <memcpy+0xc>
 8001cde:	4770      	bx	lr
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cea:	4291      	cmp	r1, r2
 8001cec:	d1f9      	bne.n	8001ce2 <memcpy+0xe>
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <_realloc_r>:
 8001cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf4:	4607      	mov	r7, r0
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	460d      	mov	r5, r1
 8001cfa:	b921      	cbnz	r1, 8001d06 <_realloc_r+0x16>
 8001cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d00:	4611      	mov	r1, r2
 8001d02:	f7ff bc4d 	b.w	80015a0 <_malloc_r>
 8001d06:	b92a      	cbnz	r2, 8001d14 <_realloc_r+0x24>
 8001d08:	f7ff fbde 	bl	80014c8 <_free_r>
 8001d0c:	4625      	mov	r5, r4
 8001d0e:	4628      	mov	r0, r5
 8001d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d14:	f000 f81a 	bl	8001d4c <_malloc_usable_size_r>
 8001d18:	4284      	cmp	r4, r0
 8001d1a:	4606      	mov	r6, r0
 8001d1c:	d802      	bhi.n	8001d24 <_realloc_r+0x34>
 8001d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001d22:	d8f4      	bhi.n	8001d0e <_realloc_r+0x1e>
 8001d24:	4621      	mov	r1, r4
 8001d26:	4638      	mov	r0, r7
 8001d28:	f7ff fc3a 	bl	80015a0 <_malloc_r>
 8001d2c:	4680      	mov	r8, r0
 8001d2e:	b908      	cbnz	r0, 8001d34 <_realloc_r+0x44>
 8001d30:	4645      	mov	r5, r8
 8001d32:	e7ec      	b.n	8001d0e <_realloc_r+0x1e>
 8001d34:	42b4      	cmp	r4, r6
 8001d36:	4622      	mov	r2, r4
 8001d38:	4629      	mov	r1, r5
 8001d3a:	bf28      	it	cs
 8001d3c:	4632      	movcs	r2, r6
 8001d3e:	f7ff ffc9 	bl	8001cd4 <memcpy>
 8001d42:	4629      	mov	r1, r5
 8001d44:	4638      	mov	r0, r7
 8001d46:	f7ff fbbf 	bl	80014c8 <_free_r>
 8001d4a:	e7f1      	b.n	8001d30 <_realloc_r+0x40>

08001d4c <_malloc_usable_size_r>:
 8001d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d50:	1f18      	subs	r0, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bfbc      	itt	lt
 8001d56:	580b      	ldrlt	r3, [r1, r0]
 8001d58:	18c0      	addlt	r0, r0, r3
 8001d5a:	4770      	bx	lr

08001d5c <log10f>:
 8001d5c:	b508      	push	{r3, lr}
 8001d5e:	ed2d 8b02 	vpush	{d8}
 8001d62:	eeb0 8a40 	vmov.f32	s16, s0
 8001d66:	f000 f88f 	bl	8001e88 <__ieee754_log10f>
 8001d6a:	eeb4 8a48 	vcmp.f32	s16, s16
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	d60f      	bvs.n	8001d94 <log10f+0x38>
 8001d74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	d80a      	bhi.n	8001d94 <log10f+0x38>
 8001d7e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d108      	bne.n	8001d9a <log10f+0x3e>
 8001d88:	f7ff fb72 	bl	8001470 <__errno>
 8001d8c:	2322      	movs	r3, #34	@ 0x22
 8001d8e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001db0 <log10f+0x54>
 8001d92:	6003      	str	r3, [r0, #0]
 8001d94:	ecbd 8b02 	vpop	{d8}
 8001d98:	bd08      	pop	{r3, pc}
 8001d9a:	f7ff fb69 	bl	8001470 <__errno>
 8001d9e:	ecbd 8b02 	vpop	{d8}
 8001da2:	2321      	movs	r3, #33	@ 0x21
 8001da4:	6003      	str	r3, [r0, #0]
 8001da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001daa:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <log10f+0x58>)
 8001dac:	f000 b866 	b.w	8001e7c <nanf>
 8001db0:	ff800000 	.word	0xff800000
 8001db4:	08002850 	.word	0x08002850

08001db8 <powf>:
 8001db8:	b508      	push	{r3, lr}
 8001dba:	ed2d 8b04 	vpush	{d8-d9}
 8001dbe:	eeb0 8a60 	vmov.f32	s16, s1
 8001dc2:	eeb0 9a40 	vmov.f32	s18, s0
 8001dc6:	f000 f8b7 	bl	8001f38 <__ieee754_powf>
 8001dca:	eeb4 8a48 	vcmp.f32	s16, s16
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	eef0 8a40 	vmov.f32	s17, s0
 8001dd6:	d63e      	bvs.n	8001e56 <powf+0x9e>
 8001dd8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	d112      	bne.n	8001e08 <powf+0x50>
 8001de2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	d039      	beq.n	8001e60 <powf+0xa8>
 8001dec:	eeb0 0a48 	vmov.f32	s0, s16
 8001df0:	f000 f839 	bl	8001e66 <finitef>
 8001df4:	b378      	cbz	r0, 8001e56 <powf+0x9e>
 8001df6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	d52a      	bpl.n	8001e56 <powf+0x9e>
 8001e00:	f7ff fb36 	bl	8001470 <__errno>
 8001e04:	2322      	movs	r3, #34	@ 0x22
 8001e06:	e014      	b.n	8001e32 <powf+0x7a>
 8001e08:	f000 f82d 	bl	8001e66 <finitef>
 8001e0c:	b998      	cbnz	r0, 8001e36 <powf+0x7e>
 8001e0e:	eeb0 0a49 	vmov.f32	s0, s18
 8001e12:	f000 f828 	bl	8001e66 <finitef>
 8001e16:	b170      	cbz	r0, 8001e36 <powf+0x7e>
 8001e18:	eeb0 0a48 	vmov.f32	s0, s16
 8001e1c:	f000 f823 	bl	8001e66 <finitef>
 8001e20:	b148      	cbz	r0, 8001e36 <powf+0x7e>
 8001e22:	eef4 8a68 	vcmp.f32	s17, s17
 8001e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2a:	d7e9      	bvc.n	8001e00 <powf+0x48>
 8001e2c:	f7ff fb20 	bl	8001470 <__errno>
 8001e30:	2321      	movs	r3, #33	@ 0x21
 8001e32:	6003      	str	r3, [r0, #0]
 8001e34:	e00f      	b.n	8001e56 <powf+0x9e>
 8001e36:	eef5 8a40 	vcmp.f32	s17, #0.0
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	d10a      	bne.n	8001e56 <powf+0x9e>
 8001e40:	eeb0 0a49 	vmov.f32	s0, s18
 8001e44:	f000 f80f 	bl	8001e66 <finitef>
 8001e48:	b128      	cbz	r0, 8001e56 <powf+0x9e>
 8001e4a:	eeb0 0a48 	vmov.f32	s0, s16
 8001e4e:	f000 f80a 	bl	8001e66 <finitef>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d1d4      	bne.n	8001e00 <powf+0x48>
 8001e56:	eeb0 0a68 	vmov.f32	s0, s17
 8001e5a:	ecbd 8b04 	vpop	{d8-d9}
 8001e5e:	bd08      	pop	{r3, pc}
 8001e60:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8001e64:	e7f7      	b.n	8001e56 <powf+0x9e>

08001e66 <finitef>:
 8001e66:	ee10 3a10 	vmov	r3, s0
 8001e6a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8001e6e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8001e72:	bfac      	ite	ge
 8001e74:	2000      	movge	r0, #0
 8001e76:	2001      	movlt	r0, #1
 8001e78:	4770      	bx	lr
	...

08001e7c <nanf>:
 8001e7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8001e84 <nanf+0x8>
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	7fc00000 	.word	0x7fc00000

08001e88 <__ieee754_log10f>:
 8001e88:	b508      	push	{r3, lr}
 8001e8a:	ee10 3a10 	vmov	r3, s0
 8001e8e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8001e92:	ed2d 8b02 	vpush	{d8}
 8001e96:	d108      	bne.n	8001eaa <__ieee754_log10f+0x22>
 8001e98:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001f20 <__ieee754_log10f+0x98>
 8001e9c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8001f24 <__ieee754_log10f+0x9c>
 8001ea0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8001ea4:	ecbd 8b02 	vpop	{d8}
 8001ea8:	bd08      	pop	{r3, pc}
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	461a      	mov	r2, r3
 8001eae:	da02      	bge.n	8001eb6 <__ieee754_log10f+0x2e>
 8001eb0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8001eb4:	e7f2      	b.n	8001e9c <__ieee754_log10f+0x14>
 8001eb6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8001eba:	db02      	blt.n	8001ec2 <__ieee754_log10f+0x3a>
 8001ebc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001ec0:	e7f0      	b.n	8001ea4 <__ieee754_log10f+0x1c>
 8001ec2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ec6:	bfbf      	itttt	lt
 8001ec8:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8001f28 <__ieee754_log10f+0xa0>
 8001ecc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8001ed0:	f06f 0118 	mvnlt.w	r1, #24
 8001ed4:	ee17 2a90 	vmovlt	r2, s15
 8001ed8:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8001edc:	bfa8      	it	ge
 8001ede:	2100      	movge	r1, #0
 8001ee0:	3b7f      	subs	r3, #127	@ 0x7f
 8001ee2:	440b      	add	r3, r1
 8001ee4:	0fd9      	lsrs	r1, r3, #31
 8001ee6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8001ef2:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8001ef6:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8001efa:	ee00 3a10 	vmov	s0, r3
 8001efe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001f02:	f000 fb7f 	bl	8002604 <__ieee754_logf>
 8001f06:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8001f2c <__ieee754_log10f+0xa4>
 8001f0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001f0e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8001f30 <__ieee754_log10f+0xa8>
 8001f12:	eea8 0a27 	vfma.f32	s0, s16, s15
 8001f16:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8001f34 <__ieee754_log10f+0xac>
 8001f1a:	eea8 0a27 	vfma.f32	s0, s16, s15
 8001f1e:	e7c1      	b.n	8001ea4 <__ieee754_log10f+0x1c>
 8001f20:	cc000000 	.word	0xcc000000
 8001f24:	00000000 	.word	0x00000000
 8001f28:	4c000000 	.word	0x4c000000
 8001f2c:	3ede5bd9 	.word	0x3ede5bd9
 8001f30:	355427db 	.word	0x355427db
 8001f34:	3e9a2080 	.word	0x3e9a2080

08001f38 <__ieee754_powf>:
 8001f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f3c:	ee10 4a90 	vmov	r4, s1
 8001f40:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8001f44:	ed2d 8b02 	vpush	{d8}
 8001f48:	ee10 6a10 	vmov	r6, s0
 8001f4c:	eeb0 8a40 	vmov.f32	s16, s0
 8001f50:	eef0 8a60 	vmov.f32	s17, s1
 8001f54:	d10c      	bne.n	8001f70 <__ieee754_powf+0x38>
 8001f56:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8001f5a:	0076      	lsls	r6, r6, #1
 8001f5c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8001f60:	f240 8274 	bls.w	800244c <__ieee754_powf+0x514>
 8001f64:	ee38 0a28 	vadd.f32	s0, s16, s17
 8001f68:	ecbd 8b02 	vpop	{d8}
 8001f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f70:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8001f74:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8001f78:	d802      	bhi.n	8001f80 <__ieee754_powf+0x48>
 8001f7a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001f7e:	d908      	bls.n	8001f92 <__ieee754_powf+0x5a>
 8001f80:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8001f84:	d1ee      	bne.n	8001f64 <__ieee754_powf+0x2c>
 8001f86:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8001f8a:	0064      	lsls	r4, r4, #1
 8001f8c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8001f90:	e7e6      	b.n	8001f60 <__ieee754_powf+0x28>
 8001f92:	2e00      	cmp	r6, #0
 8001f94:	da1f      	bge.n	8001fd6 <__ieee754_powf+0x9e>
 8001f96:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8001f9a:	f080 8260 	bcs.w	800245e <__ieee754_powf+0x526>
 8001f9e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001fa2:	d32f      	bcc.n	8002004 <__ieee754_powf+0xcc>
 8001fa4:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8001fa8:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8001fac:	fa49 f503 	asr.w	r5, r9, r3
 8001fb0:	fa05 f303 	lsl.w	r3, r5, r3
 8001fb4:	454b      	cmp	r3, r9
 8001fb6:	d123      	bne.n	8002000 <__ieee754_powf+0xc8>
 8001fb8:	f005 0501 	and.w	r5, r5, #1
 8001fbc:	f1c5 0502 	rsb	r5, r5, #2
 8001fc0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001fc4:	d11f      	bne.n	8002006 <__ieee754_powf+0xce>
 8001fc6:	2c00      	cmp	r4, #0
 8001fc8:	f280 8246 	bge.w	8002458 <__ieee754_powf+0x520>
 8001fcc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001fd0:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8001fd4:	e7c8      	b.n	8001f68 <__ieee754_powf+0x30>
 8001fd6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001fda:	d111      	bne.n	8002000 <__ieee754_powf+0xc8>
 8001fdc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8001fe0:	f000 8234 	beq.w	800244c <__ieee754_powf+0x514>
 8001fe4:	d906      	bls.n	8001ff4 <__ieee754_powf+0xbc>
 8001fe6:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80022fc <__ieee754_powf+0x3c4>
 8001fea:	2c00      	cmp	r4, #0
 8001fec:	bfa8      	it	ge
 8001fee:	eeb0 0a68 	vmovge.f32	s0, s17
 8001ff2:	e7b9      	b.n	8001f68 <__ieee754_powf+0x30>
 8001ff4:	2c00      	cmp	r4, #0
 8001ff6:	f280 822c 	bge.w	8002452 <__ieee754_powf+0x51a>
 8001ffa:	eeb1 0a68 	vneg.f32	s0, s17
 8001ffe:	e7b3      	b.n	8001f68 <__ieee754_powf+0x30>
 8002000:	2500      	movs	r5, #0
 8002002:	e7dd      	b.n	8001fc0 <__ieee754_powf+0x88>
 8002004:	2500      	movs	r5, #0
 8002006:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800200a:	d102      	bne.n	8002012 <__ieee754_powf+0xda>
 800200c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8002010:	e7aa      	b.n	8001f68 <__ieee754_powf+0x30>
 8002012:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8002016:	f040 8227 	bne.w	8002468 <__ieee754_powf+0x530>
 800201a:	2e00      	cmp	r6, #0
 800201c:	f2c0 8224 	blt.w	8002468 <__ieee754_powf+0x530>
 8002020:	eeb0 0a48 	vmov.f32	s0, s16
 8002024:	ecbd 8b02 	vpop	{d8}
 8002028:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800202c:	f000 bae6 	b.w	80025fc <__ieee754_sqrtf>
 8002030:	2d01      	cmp	r5, #1
 8002032:	d199      	bne.n	8001f68 <__ieee754_powf+0x30>
 8002034:	eeb1 0a40 	vneg.f32	s0, s0
 8002038:	e796      	b.n	8001f68 <__ieee754_powf+0x30>
 800203a:	0ff0      	lsrs	r0, r6, #31
 800203c:	3801      	subs	r0, #1
 800203e:	ea55 0300 	orrs.w	r3, r5, r0
 8002042:	d104      	bne.n	800204e <__ieee754_powf+0x116>
 8002044:	ee38 8a48 	vsub.f32	s16, s16, s16
 8002048:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800204c:	e78c      	b.n	8001f68 <__ieee754_powf+0x30>
 800204e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8002052:	d96d      	bls.n	8002130 <__ieee754_powf+0x1f8>
 8002054:	4baa      	ldr	r3, [pc, #680]	@ (8002300 <__ieee754_powf+0x3c8>)
 8002056:	4598      	cmp	r8, r3
 8002058:	d808      	bhi.n	800206c <__ieee754_powf+0x134>
 800205a:	2c00      	cmp	r4, #0
 800205c:	da0b      	bge.n	8002076 <__ieee754_powf+0x13e>
 800205e:	2000      	movs	r0, #0
 8002060:	ecbd 8b02 	vpop	{d8}
 8002064:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002068:	f000 bac2 	b.w	80025f0 <__math_oflowf>
 800206c:	4ba5      	ldr	r3, [pc, #660]	@ (8002304 <__ieee754_powf+0x3cc>)
 800206e:	4598      	cmp	r8, r3
 8002070:	d908      	bls.n	8002084 <__ieee754_powf+0x14c>
 8002072:	2c00      	cmp	r4, #0
 8002074:	dcf3      	bgt.n	800205e <__ieee754_powf+0x126>
 8002076:	2000      	movs	r0, #0
 8002078:	ecbd 8b02 	vpop	{d8}
 800207c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002080:	f000 bab0 	b.w	80025e4 <__math_uflowf>
 8002084:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002088:	ee30 0a67 	vsub.f32	s0, s0, s15
 800208c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8002308 <__ieee754_powf+0x3d0>
 8002090:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8002094:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002098:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800209c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80020a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80020a4:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800230c <__ieee754_powf+0x3d4>
 80020a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ac:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8002310 <__ieee754_powf+0x3d8>
 80020b0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80020b4:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8002314 <__ieee754_powf+0x3dc>
 80020b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80020bc:	eeb0 7a67 	vmov.f32	s14, s15
 80020c0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80020c4:	ee17 3a10 	vmov	r3, s14
 80020c8:	f36f 030b 	bfc	r3, #0, #12
 80020cc:	ee07 3a10 	vmov	s14, r3
 80020d0:	eeb0 6a47 	vmov.f32	s12, s14
 80020d4:	eea0 6a66 	vfms.f32	s12, s0, s13
 80020d8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80020dc:	3d01      	subs	r5, #1
 80020de:	4305      	orrs	r5, r0
 80020e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020e4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80020e8:	f36f 040b 	bfc	r4, #0, #12
 80020ec:	bf18      	it	ne
 80020ee:	eeb0 8a66 	vmovne.f32	s16, s13
 80020f2:	ee06 4a90 	vmov	s13, r4
 80020f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80020fa:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80020fe:	ee67 7a26 	vmul.f32	s15, s14, s13
 8002102:	eee6 0a07 	vfma.f32	s1, s12, s14
 8002106:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800210a:	ee17 1a10 	vmov	r1, s14
 800210e:	2900      	cmp	r1, #0
 8002110:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002114:	f340 80dd 	ble.w	80022d2 <__ieee754_powf+0x39a>
 8002118:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800211c:	f240 80ca 	bls.w	80022b4 <__ieee754_powf+0x37c>
 8002120:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	bf4c      	ite	mi
 800212a:	2001      	movmi	r0, #1
 800212c:	2000      	movpl	r0, #0
 800212e:	e797      	b.n	8002060 <__ieee754_powf+0x128>
 8002130:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8002134:	bf01      	itttt	eq
 8002136:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8002318 <__ieee754_powf+0x3e0>
 800213a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800213e:	f06f 0317 	mvneq.w	r3, #23
 8002142:	ee17 7a90 	vmoveq	r7, s15
 8002146:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800214a:	bf18      	it	ne
 800214c:	2300      	movne	r3, #0
 800214e:	3a7f      	subs	r2, #127	@ 0x7f
 8002150:	441a      	add	r2, r3
 8002152:	4b72      	ldr	r3, [pc, #456]	@ (800231c <__ieee754_powf+0x3e4>)
 8002154:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8002158:	429f      	cmp	r7, r3
 800215a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800215e:	dd06      	ble.n	800216e <__ieee754_powf+0x236>
 8002160:	4b6f      	ldr	r3, [pc, #444]	@ (8002320 <__ieee754_powf+0x3e8>)
 8002162:	429f      	cmp	r7, r3
 8002164:	f340 80a4 	ble.w	80022b0 <__ieee754_powf+0x378>
 8002168:	3201      	adds	r2, #1
 800216a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800216e:	2600      	movs	r6, #0
 8002170:	4b6c      	ldr	r3, [pc, #432]	@ (8002324 <__ieee754_powf+0x3ec>)
 8002172:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002176:	ee07 1a10 	vmov	s14, r1
 800217a:	edd3 5a00 	vldr	s11, [r3]
 800217e:	4b6a      	ldr	r3, [pc, #424]	@ (8002328 <__ieee754_powf+0x3f0>)
 8002180:	ee75 7a87 	vadd.f32	s15, s11, s14
 8002184:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002188:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800218c:	1049      	asrs	r1, r1, #1
 800218e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8002192:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8002196:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800219a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800219e:	ee07 1a90 	vmov	s15, r1
 80021a2:	ee26 5a24 	vmul.f32	s10, s12, s9
 80021a6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80021aa:	ee15 7a10 	vmov	r7, s10
 80021ae:	401f      	ands	r7, r3
 80021b0:	ee06 7a90 	vmov	s13, r7
 80021b4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80021b8:	ee37 7a65 	vsub.f32	s14, s14, s11
 80021bc:	ee65 7a05 	vmul.f32	s15, s10, s10
 80021c0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80021c4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800232c <__ieee754_powf+0x3f4>
 80021c8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002330 <__ieee754_powf+0x3f8>
 80021cc:	eee7 5a87 	vfma.f32	s11, s15, s14
 80021d0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002334 <__ieee754_powf+0x3fc>
 80021d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80021d8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8002308 <__ieee754_powf+0x3d0>
 80021dc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80021e0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002338 <__ieee754_powf+0x400>
 80021e4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80021e8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800233c <__ieee754_powf+0x404>
 80021ec:	ee26 6a24 	vmul.f32	s12, s12, s9
 80021f0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80021f4:	ee35 7a26 	vadd.f32	s14, s10, s13
 80021f8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80021fc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002200:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8002204:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8002208:	eef0 5a67 	vmov.f32	s11, s15
 800220c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8002210:	ee75 5a87 	vadd.f32	s11, s11, s14
 8002214:	ee15 1a90 	vmov	r1, s11
 8002218:	4019      	ands	r1, r3
 800221a:	ee05 1a90 	vmov	s11, r1
 800221e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002222:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800222e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002232:	eeb0 6a67 	vmov.f32	s12, s15
 8002236:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800223a:	ee16 1a10 	vmov	r1, s12
 800223e:	4019      	ands	r1, r3
 8002240:	ee06 1a10 	vmov	s12, r1
 8002244:	eeb0 7a46 	vmov.f32	s14, s12
 8002248:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800224c:	493c      	ldr	r1, [pc, #240]	@ (8002340 <__ieee754_powf+0x408>)
 800224e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8002252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002256:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002344 <__ieee754_powf+0x40c>
 800225a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8002348 <__ieee754_powf+0x410>
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800234c <__ieee754_powf+0x414>
 8002266:	eee6 7a07 	vfma.f32	s15, s12, s14
 800226a:	ed91 7a00 	vldr	s14, [r1]
 800226e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002272:	ee07 2a10 	vmov	s14, r2
 8002276:	4a36      	ldr	r2, [pc, #216]	@ (8002350 <__ieee754_powf+0x418>)
 8002278:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800227c:	eeb0 7a67 	vmov.f32	s14, s15
 8002280:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002284:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8002288:	ed92 5a00 	vldr	s10, [r2]
 800228c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002290:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002294:	ee17 2a10 	vmov	r2, s14
 8002298:	401a      	ands	r2, r3
 800229a:	ee07 2a10 	vmov	s14, r2
 800229e:	ee77 6a66 	vsub.f32	s13, s14, s13
 80022a2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80022a6:	eee6 6a65 	vfms.f32	s13, s12, s11
 80022aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80022ae:	e715      	b.n	80020dc <__ieee754_powf+0x1a4>
 80022b0:	2601      	movs	r6, #1
 80022b2:	e75d      	b.n	8002170 <__ieee754_powf+0x238>
 80022b4:	d152      	bne.n	800235c <__ieee754_powf+0x424>
 80022b6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002354 <__ieee754_powf+0x41c>
 80022ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022be:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80022c2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	f73f af29 	bgt.w	8002120 <__ieee754_powf+0x1e8>
 80022ce:	2386      	movs	r3, #134	@ 0x86
 80022d0:	e048      	b.n	8002364 <__ieee754_powf+0x42c>
 80022d2:	4a21      	ldr	r2, [pc, #132]	@ (8002358 <__ieee754_powf+0x420>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d907      	bls.n	80022e8 <__ieee754_powf+0x3b0>
 80022d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	bf4c      	ite	mi
 80022e2:	2001      	movmi	r0, #1
 80022e4:	2000      	movpl	r0, #0
 80022e6:	e6c7      	b.n	8002078 <__ieee754_powf+0x140>
 80022e8:	d138      	bne.n	800235c <__ieee754_powf+0x424>
 80022ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ee:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	dbea      	blt.n	80022ce <__ieee754_powf+0x396>
 80022f8:	e7ee      	b.n	80022d8 <__ieee754_powf+0x3a0>
 80022fa:	bf00      	nop
 80022fc:	00000000 	.word	0x00000000
 8002300:	3f7ffff3 	.word	0x3f7ffff3
 8002304:	3f800007 	.word	0x3f800007
 8002308:	3eaaaaab 	.word	0x3eaaaaab
 800230c:	3fb8aa00 	.word	0x3fb8aa00
 8002310:	3fb8aa3b 	.word	0x3fb8aa3b
 8002314:	36eca570 	.word	0x36eca570
 8002318:	4b800000 	.word	0x4b800000
 800231c:	001cc471 	.word	0x001cc471
 8002320:	005db3d6 	.word	0x005db3d6
 8002324:	08002890 	.word	0x08002890
 8002328:	fffff000 	.word	0xfffff000
 800232c:	3e6c3255 	.word	0x3e6c3255
 8002330:	3e53f142 	.word	0x3e53f142
 8002334:	3e8ba305 	.word	0x3e8ba305
 8002338:	3edb6db7 	.word	0x3edb6db7
 800233c:	3f19999a 	.word	0x3f19999a
 8002340:	08002880 	.word	0x08002880
 8002344:	3f76384f 	.word	0x3f76384f
 8002348:	3f763800 	.word	0x3f763800
 800234c:	369dc3a0 	.word	0x369dc3a0
 8002350:	08002888 	.word	0x08002888
 8002354:	3338aa3c 	.word	0x3338aa3c
 8002358:	43160000 	.word	0x43160000
 800235c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8002360:	d96f      	bls.n	8002442 <__ieee754_powf+0x50a>
 8002362:	15db      	asrs	r3, r3, #23
 8002364:	3b7e      	subs	r3, #126	@ 0x7e
 8002366:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800236a:	4118      	asrs	r0, r3
 800236c:	4408      	add	r0, r1
 800236e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002372:	4a4e      	ldr	r2, [pc, #312]	@ (80024ac <__ieee754_powf+0x574>)
 8002374:	3b7f      	subs	r3, #127	@ 0x7f
 8002376:	411a      	asrs	r2, r3
 8002378:	4002      	ands	r2, r0
 800237a:	ee07 2a10 	vmov	s14, r2
 800237e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8002382:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002386:	f1c3 0317 	rsb	r3, r3, #23
 800238a:	4118      	asrs	r0, r3
 800238c:	2900      	cmp	r1, #0
 800238e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002392:	bfb8      	it	lt
 8002394:	4240      	neglt	r0, r0
 8002396:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800239a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80024b0 <__ieee754_powf+0x578>
 800239e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80024b4 <__ieee754_powf+0x57c>
 80023a2:	ee16 3a90 	vmov	r3, s13
 80023a6:	f36f 030b 	bfc	r3, #0, #12
 80023aa:	ee06 3a90 	vmov	s13, r3
 80023ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80023b6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80023ba:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80024b8 <__ieee754_powf+0x580>
 80023be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c2:	eee0 7a87 	vfma.f32	s15, s1, s14
 80023c6:	eeb0 7a67 	vmov.f32	s14, s15
 80023ca:	eea6 7a86 	vfma.f32	s14, s13, s12
 80023ce:	eef0 5a47 	vmov.f32	s11, s14
 80023d2:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80023d6:	ee67 6a07 	vmul.f32	s13, s14, s14
 80023da:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80023de:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80024bc <__ieee754_powf+0x584>
 80023e2:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80024c0 <__ieee754_powf+0x588>
 80023e6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80023ea:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80024c4 <__ieee754_powf+0x58c>
 80023ee:	eee6 5a26 	vfma.f32	s11, s12, s13
 80023f2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80024c8 <__ieee754_powf+0x590>
 80023f6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80023fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80024cc <__ieee754_powf+0x594>
 80023fe:	eee6 5a26 	vfma.f32	s11, s12, s13
 8002402:	eeb0 6a47 	vmov.f32	s12, s14
 8002406:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800240a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800240e:	ee67 5a06 	vmul.f32	s11, s14, s12
 8002412:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002416:	eee7 7a27 	vfma.f32	s15, s14, s15
 800241a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800241e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002422:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002426:	ee30 0a67 	vsub.f32	s0, s0, s15
 800242a:	ee10 3a10 	vmov	r3, s0
 800242e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8002432:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002436:	da06      	bge.n	8002446 <__ieee754_powf+0x50e>
 8002438:	f000 f854 	bl	80024e4 <scalbnf>
 800243c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002440:	e592      	b.n	8001f68 <__ieee754_powf+0x30>
 8002442:	2000      	movs	r0, #0
 8002444:	e7a7      	b.n	8002396 <__ieee754_powf+0x45e>
 8002446:	ee00 3a10 	vmov	s0, r3
 800244a:	e7f7      	b.n	800243c <__ieee754_powf+0x504>
 800244c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002450:	e58a      	b.n	8001f68 <__ieee754_powf+0x30>
 8002452:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80024d0 <__ieee754_powf+0x598>
 8002456:	e587      	b.n	8001f68 <__ieee754_powf+0x30>
 8002458:	eeb0 0a48 	vmov.f32	s0, s16
 800245c:	e584      	b.n	8001f68 <__ieee754_powf+0x30>
 800245e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8002462:	f43f adbb 	beq.w	8001fdc <__ieee754_powf+0xa4>
 8002466:	2502      	movs	r5, #2
 8002468:	eeb0 0a48 	vmov.f32	s0, s16
 800246c:	f000 f832 	bl	80024d4 <fabsf>
 8002470:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8002474:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8002478:	4647      	mov	r7, r8
 800247a:	d003      	beq.n	8002484 <__ieee754_powf+0x54c>
 800247c:	f1b8 0f00 	cmp.w	r8, #0
 8002480:	f47f addb 	bne.w	800203a <__ieee754_powf+0x102>
 8002484:	2c00      	cmp	r4, #0
 8002486:	bfbc      	itt	lt
 8002488:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800248c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002490:	2e00      	cmp	r6, #0
 8002492:	f6bf ad69 	bge.w	8001f68 <__ieee754_powf+0x30>
 8002496:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800249a:	ea58 0805 	orrs.w	r8, r8, r5
 800249e:	f47f adc7 	bne.w	8002030 <__ieee754_powf+0xf8>
 80024a2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80024a6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80024aa:	e55d      	b.n	8001f68 <__ieee754_powf+0x30>
 80024ac:	ff800000 	.word	0xff800000
 80024b0:	3f317218 	.word	0x3f317218
 80024b4:	3f317200 	.word	0x3f317200
 80024b8:	35bfbe8c 	.word	0x35bfbe8c
 80024bc:	b5ddea0e 	.word	0xb5ddea0e
 80024c0:	3331bb4c 	.word	0x3331bb4c
 80024c4:	388ab355 	.word	0x388ab355
 80024c8:	bb360b61 	.word	0xbb360b61
 80024cc:	3e2aaaab 	.word	0x3e2aaaab
 80024d0:	00000000 	.word	0x00000000

080024d4 <fabsf>:
 80024d4:	ee10 3a10 	vmov	r3, s0
 80024d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024dc:	ee00 3a10 	vmov	s0, r3
 80024e0:	4770      	bx	lr
	...

080024e4 <scalbnf>:
 80024e4:	ee10 3a10 	vmov	r3, s0
 80024e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80024ec:	d02b      	beq.n	8002546 <scalbnf+0x62>
 80024ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80024f2:	d302      	bcc.n	80024fa <scalbnf+0x16>
 80024f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80024f8:	4770      	bx	lr
 80024fa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80024fe:	d123      	bne.n	8002548 <scalbnf+0x64>
 8002500:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <scalbnf+0xb0>)
 8002502:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002598 <scalbnf+0xb4>
 8002506:	4298      	cmp	r0, r3
 8002508:	ee20 0a27 	vmul.f32	s0, s0, s15
 800250c:	db17      	blt.n	800253e <scalbnf+0x5a>
 800250e:	ee10 3a10 	vmov	r3, s0
 8002512:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002516:	3a19      	subs	r2, #25
 8002518:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800251c:	4288      	cmp	r0, r1
 800251e:	dd15      	ble.n	800254c <scalbnf+0x68>
 8002520:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800259c <scalbnf+0xb8>
 8002524:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80025a0 <scalbnf+0xbc>
 8002528:	ee10 3a10 	vmov	r3, s0
 800252c:	eeb0 7a67 	vmov.f32	s14, s15
 8002530:	2b00      	cmp	r3, #0
 8002532:	bfb8      	it	lt
 8002534:	eef0 7a66 	vmovlt.f32	s15, s13
 8002538:	ee27 0a87 	vmul.f32	s0, s15, s14
 800253c:	4770      	bx	lr
 800253e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80025a4 <scalbnf+0xc0>
 8002542:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002546:	4770      	bx	lr
 8002548:	0dd2      	lsrs	r2, r2, #23
 800254a:	e7e5      	b.n	8002518 <scalbnf+0x34>
 800254c:	4410      	add	r0, r2
 800254e:	28fe      	cmp	r0, #254	@ 0xfe
 8002550:	dce6      	bgt.n	8002520 <scalbnf+0x3c>
 8002552:	2800      	cmp	r0, #0
 8002554:	dd06      	ble.n	8002564 <scalbnf+0x80>
 8002556:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800255a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800255e:	ee00 3a10 	vmov	s0, r3
 8002562:	4770      	bx	lr
 8002564:	f110 0f16 	cmn.w	r0, #22
 8002568:	da09      	bge.n	800257e <scalbnf+0x9a>
 800256a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80025a4 <scalbnf+0xc0>
 800256e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80025a8 <scalbnf+0xc4>
 8002572:	ee10 3a10 	vmov	r3, s0
 8002576:	eeb0 7a67 	vmov.f32	s14, s15
 800257a:	2b00      	cmp	r3, #0
 800257c:	e7d9      	b.n	8002532 <scalbnf+0x4e>
 800257e:	3019      	adds	r0, #25
 8002580:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002584:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002588:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80025ac <scalbnf+0xc8>
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	e7d7      	b.n	8002542 <scalbnf+0x5e>
 8002592:	bf00      	nop
 8002594:	ffff3cb0 	.word	0xffff3cb0
 8002598:	4c000000 	.word	0x4c000000
 800259c:	7149f2ca 	.word	0x7149f2ca
 80025a0:	f149f2ca 	.word	0xf149f2ca
 80025a4:	0da24260 	.word	0x0da24260
 80025a8:	8da24260 	.word	0x8da24260
 80025ac:	33000000 	.word	0x33000000

080025b0 <with_errnof>:
 80025b0:	b510      	push	{r4, lr}
 80025b2:	ed2d 8b02 	vpush	{d8}
 80025b6:	eeb0 8a40 	vmov.f32	s16, s0
 80025ba:	4604      	mov	r4, r0
 80025bc:	f7fe ff58 	bl	8001470 <__errno>
 80025c0:	eeb0 0a48 	vmov.f32	s0, s16
 80025c4:	ecbd 8b02 	vpop	{d8}
 80025c8:	6004      	str	r4, [r0, #0]
 80025ca:	bd10      	pop	{r4, pc}

080025cc <xflowf>:
 80025cc:	b130      	cbz	r0, 80025dc <xflowf+0x10>
 80025ce:	eef1 7a40 	vneg.f32	s15, s0
 80025d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80025d6:	2022      	movs	r0, #34	@ 0x22
 80025d8:	f7ff bfea 	b.w	80025b0 <with_errnof>
 80025dc:	eef0 7a40 	vmov.f32	s15, s0
 80025e0:	e7f7      	b.n	80025d2 <xflowf+0x6>
	...

080025e4 <__math_uflowf>:
 80025e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80025ec <__math_uflowf+0x8>
 80025e8:	f7ff bff0 	b.w	80025cc <xflowf>
 80025ec:	10000000 	.word	0x10000000

080025f0 <__math_oflowf>:
 80025f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80025f8 <__math_oflowf+0x8>
 80025f4:	f7ff bfea 	b.w	80025cc <xflowf>
 80025f8:	70000000 	.word	0x70000000

080025fc <__ieee754_sqrtf>:
 80025fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002600:	4770      	bx	lr
	...

08002604 <__ieee754_logf>:
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800260c:	d106      	bne.n	800261c <__ieee754_logf+0x18>
 800260e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80027a8 <__ieee754_logf+0x1a4>
 8002612:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80027ac <__ieee754_logf+0x1a8>
 8002616:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800261a:	4770      	bx	lr
 800261c:	2b00      	cmp	r3, #0
 800261e:	461a      	mov	r2, r3
 8002620:	da02      	bge.n	8002628 <__ieee754_logf+0x24>
 8002622:	ee30 7a40 	vsub.f32	s14, s0, s0
 8002626:	e7f4      	b.n	8002612 <__ieee754_logf+0xe>
 8002628:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800262c:	db02      	blt.n	8002634 <__ieee754_logf+0x30>
 800262e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002632:	4770      	bx	lr
 8002634:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002638:	bfb8      	it	lt
 800263a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80027b0 <__ieee754_logf+0x1ac>
 800263e:	485d      	ldr	r0, [pc, #372]	@ (80027b4 <__ieee754_logf+0x1b0>)
 8002640:	bfbe      	ittt	lt
 8002642:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8002646:	f06f 0118 	mvnlt.w	r1, #24
 800264a:	ee17 2a90 	vmovlt	r2, s15
 800264e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8002652:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8002656:	4410      	add	r0, r2
 8002658:	bfa8      	it	ge
 800265a:	2100      	movge	r1, #0
 800265c:	3b7f      	subs	r3, #127	@ 0x7f
 800265e:	440b      	add	r3, r1
 8002660:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8002664:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8002668:	4311      	orrs	r1, r2
 800266a:	ee00 1a10 	vmov	s0, r1
 800266e:	4952      	ldr	r1, [pc, #328]	@ (80027b8 <__ieee754_logf+0x1b4>)
 8002670:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8002674:	f102 000f 	add.w	r0, r2, #15
 8002678:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800267c:	4001      	ands	r1, r0
 800267e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002682:	bb89      	cbnz	r1, 80026e8 <__ieee754_logf+0xe4>
 8002684:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268c:	d10f      	bne.n	80026ae <__ieee754_logf+0xaa>
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8087 	beq.w	80027a2 <__ieee754_logf+0x19e>
 8002694:	ee07 3a90 	vmov	s15, r3
 8002698:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80027bc <__ieee754_logf+0x1b8>
 800269c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80027c0 <__ieee754_logf+0x1bc>
 80026a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80026a8:	eea7 0a87 	vfma.f32	s0, s15, s14
 80026ac:	4770      	bx	lr
 80026ae:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80027c4 <__ieee754_logf+0x1c0>
 80026b2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80026b6:	eee0 7a66 	vfms.f32	s15, s0, s13
 80026ba:	ee20 7a00 	vmul.f32	s14, s0, s0
 80026be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c2:	b913      	cbnz	r3, 80026ca <__ieee754_logf+0xc6>
 80026c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80026c8:	4770      	bx	lr
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80027bc <__ieee754_logf+0x1b8>
 80026d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80026da:	ee37 0a40 	vsub.f32	s0, s14, s0
 80026de:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80027c0 <__ieee754_logf+0x1bc>
 80026e2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80026e6:	4770      	bx	lr
 80026e8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80026ec:	ee70 7a27 	vadd.f32	s15, s0, s15
 80026f0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80027c8 <__ieee754_logf+0x1c4>
 80026f4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80027cc <__ieee754_logf+0x1c8>
 80026f8:	4935      	ldr	r1, [pc, #212]	@ (80027d0 <__ieee754_logf+0x1cc>)
 80026fa:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80026fe:	4411      	add	r1, r2
 8002700:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8002704:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8002708:	430a      	orrs	r2, r1
 800270a:	2a00      	cmp	r2, #0
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	ee26 5a06 	vmul.f32	s10, s12, s12
 8002714:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002718:	ee25 7a05 	vmul.f32	s14, s10, s10
 800271c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80027d4 <__ieee754_logf+0x1d0>
 8002720:	eee7 7a25 	vfma.f32	s15, s14, s11
 8002724:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80027d8 <__ieee754_logf+0x1d4>
 8002728:	eee7 5a87 	vfma.f32	s11, s15, s14
 800272c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80027dc <__ieee754_logf+0x1d8>
 8002730:	eee7 7a24 	vfma.f32	s15, s14, s9
 8002734:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80027e0 <__ieee754_logf+0x1dc>
 8002738:	eee7 4a87 	vfma.f32	s9, s15, s14
 800273c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80027e4 <__ieee754_logf+0x1e0>
 8002740:	eee4 7a87 	vfma.f32	s15, s9, s14
 8002744:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002748:	eee5 7a87 	vfma.f32	s15, s11, s14
 800274c:	dd1a      	ble.n	8002784 <__ieee754_logf+0x180>
 800274e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002752:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002756:	ee27 7a00 	vmul.f32	s14, s14, s0
 800275a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800275e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002762:	b913      	cbnz	r3, 800276a <__ieee754_logf+0x166>
 8002764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002768:	e7ac      	b.n	80026c4 <__ieee754_logf+0xc0>
 800276a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80027bc <__ieee754_logf+0x1b8>
 800276e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8002772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002776:	ee37 0a40 	vsub.f32	s0, s14, s0
 800277a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80027c0 <__ieee754_logf+0x1bc>
 800277e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8002782:	4770      	bx	lr
 8002784:	ee70 7a67 	vsub.f32	s15, s0, s15
 8002788:	ee67 7a86 	vmul.f32	s15, s15, s12
 800278c:	b913      	cbnz	r3, 8002794 <__ieee754_logf+0x190>
 800278e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002792:	4770      	bx	lr
 8002794:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80027bc <__ieee754_logf+0x1b8>
 8002798:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800279c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80027a0:	e7eb      	b.n	800277a <__ieee754_logf+0x176>
 80027a2:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80027ac <__ieee754_logf+0x1a8>
 80027a6:	4770      	bx	lr
 80027a8:	cc000000 	.word	0xcc000000
 80027ac:	00000000 	.word	0x00000000
 80027b0:	4c000000 	.word	0x4c000000
 80027b4:	004afb20 	.word	0x004afb20
 80027b8:	007ffff0 	.word	0x007ffff0
 80027bc:	3717f7d1 	.word	0x3717f7d1
 80027c0:	3f317180 	.word	0x3f317180
 80027c4:	3eaaaaab 	.word	0x3eaaaaab
 80027c8:	3e1cd04f 	.word	0x3e1cd04f
 80027cc:	3e178897 	.word	0x3e178897
 80027d0:	ffcf5c30 	.word	0xffcf5c30
 80027d4:	3e638e29 	.word	0x3e638e29
 80027d8:	3ecccccd 	.word	0x3ecccccd
 80027dc:	3e3a3325 	.word	0x3e3a3325
 80027e0:	3e924925 	.word	0x3e924925
 80027e4:	3f2aaaab 	.word	0x3f2aaaab

080027e8 <_init>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	bf00      	nop
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr

080027f4 <_fini>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	bf00      	nop
 80027f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fa:	bc08      	pop	{r3}
 80027fc:	469e      	mov	lr, r3
 80027fe:	4770      	bx	lr
