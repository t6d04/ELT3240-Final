
ELT3240-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000262c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080027cc  080027cc  000037cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002864  08002864  0000409c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002864  08002864  00003864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800286c  0800286c  0000409c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800286c  0800286c  0000386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002870  08002870  00003870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08002874  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000009c  08002910  0000409c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08002910  00004234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003bdb  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001636  00000000  00000000  00007ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  000092e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000033e  00000000  00000000  000097a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a3e  00000000  00000000  00009ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dcb  00000000  00000000  00020524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000857b6  00000000  00000000  000292ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aeaa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001554  00000000  00000000  000aeae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080027b4 	.word	0x080027b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	080027b4 	.word	0x080027b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <adc_init>:
#include "stm32f4xx.h"
#include "adc.h"

void adc_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <adc_init+0x58>)
 8000286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <adc_init+0x58>)
 800028a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800028e:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <adc_init+0x58>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <adc_init+0x58>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (3 << (0 * 2));
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <adc_init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <adc_init+0x5c>)
 80002a2:	f043 0303 	orr.w	r3, r3, #3
 80002a6:	6013      	str	r3, [r2, #0]
    ADC->CCR = 0;
 80002a8:	4b0d      	ldr	r3, [pc, #52]	@ (80002e0 <adc_init+0x60>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
    ADC1->CR1 = 0;
 80002ae:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <adc_init+0x64>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = ADC_CR2_ADON;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <adc_init+0x64>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	609a      	str	r2, [r3, #8]
    ADC1->SMPR2 |= (7 << 0);
 80002ba:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <adc_init+0x64>)
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	4a09      	ldr	r2, [pc, #36]	@ (80002e4 <adc_init+0x64>)
 80002c0:	f043 0307 	orr.w	r3, r3, #7
 80002c4:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 0;
 80002c6:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <adc_init+0x64>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40012300 	.word	0x40012300
 80002e4:	40012000 	.word	0x40012000

080002e8 <adc_read>:

uint16_t adc_read(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <adc_read+0x30>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a09      	ldr	r2, [pc, #36]	@ (8000318 <adc_read+0x30>)
 80002f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002f6:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 80002f8:	bf00      	nop
 80002fa:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <adc_read+0x30>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f9      	beq.n	80002fa <adc_read+0x12>
    return ADC1->DR;
 8000306:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <adc_read+0x30>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030a:	b29b      	uxth	r3, r3
}
 800030c:	4618      	mov	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40012000 	.word	0x40012000

0800031c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	2b00      	cmp	r3, #0
 800032c:	db0b      	blt.n	8000346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 021f 	and.w	r2, r3, #31
 8000334:	4907      	ldr	r1, [pc, #28]	@ (8000354 <__NVIC_EnableIRQ+0x38>)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	095b      	lsrs	r3, r3, #5
 800033c:	2001      	movs	r0, #1
 800033e:	fa00 f202 	lsl.w	r2, r0, r2
 8000342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000e100 	.word	0xe000e100

08000358 <button_init>:
#include "stm32f4xx.h"
#include "state_machine.h"

void button_init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
//
//    GPIOB->MODER &= ~(3 << (3 * 2));
//    GPIOB->PUPDR &= ~(3 << (3 * 2));
//    GPIOB->PUPDR |=  (1 << (3 * 2));

    SYSCFG->EXTICR[3] &= ~(0xF << 4 * (13 - 12));
 800035c:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <button_init+0x64>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a16      	ldr	r2, [pc, #88]	@ (80003bc <button_init+0x64>)
 8000362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000366:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |=  (0x2 << 4 * (13 - 12));
 8000368:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <button_init+0x64>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a13      	ldr	r2, [pc, #76]	@ (80003bc <button_init+0x64>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6153      	str	r3, [r2, #20]

    SYSCFG->EXTICR[0] &= ~(0xF << 4 * 3);
 8000374:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <button_init+0x64>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	4a10      	ldr	r2, [pc, #64]	@ (80003bc <button_init+0x64>)
 800037a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800037e:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  (0x1 << 4 * 3);
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <button_init+0x64>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a0d      	ldr	r2, [pc, #52]	@ (80003bc <button_init+0x64>)
 8000386:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800038a:	6093      	str	r3, [r2, #8]

    EXTI->IMR  |= (1 << 13) | (1 << 3);
 800038c:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <button_init+0x68>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0b      	ldr	r2, [pc, #44]	@ (80003c0 <button_init+0x68>)
 8000392:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 13) | (1 << 3);
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <button_init+0x68>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <button_init+0x68>)
 80003a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ac:	2028      	movs	r0, #40	@ 0x28
 80003ae:	f7ff ffb5 	bl	800031c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI3_IRQn);
 80003b2:	2009      	movs	r0, #9
 80003b4:	f7ff ffb2 	bl	800031c <__NVIC_EnableIRQ>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40013800 	.word	0x40013800
 80003c0:	40013c00 	.word	0x40013c00

080003c4 <buzzer_on>:

static uint32_t buzzer_start = 0;
static uint32_t buzzer_active = 0;
static uint32_t buzzer_duration = 0;

void buzzer_on(int duration) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	GPIOB->ODR |= (1 << BUZZER_PIN);
 80003cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <buzzer_on+0x40>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <buzzer_on+0x40>)
 80003d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003d6:	6153      	str	r3, [r2, #20]
	buzzer_active = 1;
 80003d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <buzzer_on+0x44>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
	if (duration > 0) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dd08      	ble.n	80003f6 <buzzer_on+0x32>
		buzzer_duration = duration;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a09      	ldr	r2, [pc, #36]	@ (800040c <buzzer_on+0x48>)
 80003e8:	6013      	str	r3, [r2, #0]
		buzzer_start = millis();
 80003ea:	f000 ff73 	bl	80012d4 <millis>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a07      	ldr	r2, [pc, #28]	@ (8000410 <buzzer_on+0x4c>)
 80003f2:	6013      	str	r3, [r2, #0]
	} else {
		buzzer_duration = 0;
	}
}
 80003f4:	e002      	b.n	80003fc <buzzer_on+0x38>
		buzzer_duration = 0;
 80003f6:	4b05      	ldr	r3, [pc, #20]	@ (800040c <buzzer_on+0x48>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40020400 	.word	0x40020400
 8000408:	200000bc 	.word	0x200000bc
 800040c:	200000c0 	.word	0x200000c0
 8000410:	200000b8 	.word	0x200000b8

08000414 <buzzer_off>:

void buzzer_off(void) {
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(1 << BUZZER_PIN);
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <buzzer_off+0x28>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a07      	ldr	r2, [pc, #28]	@ (800043c <buzzer_off+0x28>)
 800041e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000422:	6153      	str	r3, [r2, #20]
	buzzer_active = 0;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <buzzer_off+0x2c>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
	buzzer_duration = 0;
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <buzzer_off+0x30>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40020400 	.word	0x40020400
 8000440:	200000bc 	.word	0x200000bc
 8000444:	200000c0 	.word	0x200000c0

08000448 <buzzer_check>:

void buzzer_check(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	if (buzzer_active && buzzer_duration > 0) {
 800044c:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <buzzer_check+0x30>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d00f      	beq.n	8000474 <buzzer_check+0x2c>
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <buzzer_check+0x34>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00b      	beq.n	8000474 <buzzer_check+0x2c>
		if ((millis() - buzzer_start) >= buzzer_duration) {
 800045c:	f000 ff3a 	bl	80012d4 <millis>
 8000460:	4602      	mov	r2, r0
 8000462:	4b07      	ldr	r3, [pc, #28]	@ (8000480 <buzzer_check+0x38>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	1ad2      	subs	r2, r2, r3
 8000468:	4b04      	ldr	r3, [pc, #16]	@ (800047c <buzzer_check+0x34>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	d301      	bcc.n	8000474 <buzzer_check+0x2c>
			buzzer_off();
 8000470:	f7ff ffd0 	bl	8000414 <buzzer_off>
		}
	}
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200000bc 	.word	0x200000bc
 800047c:	200000c0 	.word	0x200000c0
 8000480:	200000b8 	.word	0x200000b8

08000484 <rs_from_adc>:
#define RL 20000.0f
#define VCC 5.0f
static float R0 = 10000.0f;

static float rs_from_adc(uint16_t adc)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
    float vout = ((float)adc / 4095.0f) * VCC;
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	ee07 3a90 	vmov	s15, r3
 8000494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000498:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80004f8 <rs_from_adc+0x74>
 800049c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004a0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80004a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004a8:	edc7 7a03 	vstr	s15, [r7, #12]
    if (vout < 0.01f) vout = 0.01f;
 80004ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80004b0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80004fc <rs_from_adc+0x78>
 80004b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004bc:	d501      	bpl.n	80004c2 <rs_from_adc+0x3e>
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <rs_from_adc+0x7c>)
 80004c0:	60fb      	str	r3, [r7, #12]
    float rs = (VCC - vout) * RL / vout;
 80004c2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80004c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80004ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80004ce:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000504 <rs_from_adc+0x80>
 80004d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80004d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80004da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80004de:	edc7 7a02 	vstr	s15, [r7, #8]
    return rs;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	ee07 3a90 	vmov	s15, r3
}
 80004e8:	eeb0 0a67 	vmov.f32	s0, s15
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	457ff000 	.word	0x457ff000
 80004fc:	3c23d70a 	.word	0x3c23d70a
 8000500:	3c23d70a 	.word	0x3c23d70a
 8000504:	469c4000 	.word	0x469c4000

08000508 <gas_sensor_init>:

void gas_sensor_init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    adc_init();
 800050c:	f7ff feb8 	bl	8000280 <adc_init>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <gas_sensor_calibrate>:

void gas_sensor_calibrate(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 100; i++) {
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	e009      	b.n	8000538 <gas_sensor_calibrate+0x24>
        sum += adc_read();
 8000524:	f7ff fee0 	bl	80002e8 <adc_read>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4413      	add	r3, r2
 8000530:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 100; i++) {
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	3301      	adds	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2b63      	cmp	r3, #99	@ 0x63
 800053c:	ddf2      	ble.n	8000524 <gas_sensor_calibrate+0x10>
    }
    uint16_t avg_adc = sum / 100;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <gas_sensor_calibrate+0x50>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	095b      	lsrs	r3, r3, #5
 8000548:	80fb      	strh	r3, [r7, #6]
    float rs = rs_from_adc(avg_adc);
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ff99 	bl	8000484 <rs_from_adc>
 8000552:	ed87 0a00 	vstr	s0, [r7]
    R0 = rs / 1.0f;
 8000556:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <gas_sensor_calibrate+0x54>)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	51eb851f 	.word	0x51eb851f
 8000568:	20000000 	.word	0x20000000

0800056c <gas_sensor_read_ppm>:

uint16_t gas_sensor_read_ppm(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
    uint16_t adc = adc_read();
 8000572:	f7ff feb9 	bl	80002e8 <adc_read>
 8000576:	4603      	mov	r3, r0
 8000578:	827b      	strh	r3, [r7, #18]
    float rs = rs_from_adc(adc);
 800057a:	8a7b      	ldrh	r3, [r7, #18]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff81 	bl	8000484 <rs_from_adc>
 8000582:	ed87 0a03 	vstr	s0, [r7, #12]
    float ratio = rs / R0;
 8000586:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <gas_sensor_read_ppm+0x88>)
 8000588:	ed93 7a00 	vldr	s14, [r3]
 800058c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000594:	edc7 7a02 	vstr	s15, [r7, #8]

    float log_ppm = (log10f(ratio) - 0.32f) / -0.47f;
 8000598:	ed97 0a02 	vldr	s0, [r7, #8]
 800059c:	f001 fbc4 	bl	8001d28 <log10f>
 80005a0:	eef0 7a40 	vmov.f32	s15, s0
 80005a4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80005f8 <gas_sensor_read_ppm+0x8c>
 80005a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80005ac:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80005fc <gas_sensor_read_ppm+0x90>
 80005b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005b4:	edc7 7a01 	vstr	s15, [r7, #4]
    float ppm = powf(10.0f, log_ppm);
 80005b8:	edd7 0a01 	vldr	s1, [r7, #4]
 80005bc:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80005c0:	f001 fbe0 	bl	8001d84 <powf>
 80005c4:	ed87 0a05 	vstr	s0, [r7, #20]
    if (ppm > 10000.0f) ppm = 10000.0f;
 80005c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80005cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000600 <gas_sensor_read_ppm+0x94>
 80005d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d8:	dd01      	ble.n	80005de <gas_sensor_read_ppm+0x72>
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <gas_sensor_read_ppm+0x98>)
 80005dc:	617b      	str	r3, [r7, #20]

    return (uint16_t)ppm;
 80005de:	edd7 7a05 	vldr	s15, [r7, #20]
 80005e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e6:	ee17 3a90 	vmov	r3, s15
 80005ea:	b29b      	uxth	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	3ea3d70a 	.word	0x3ea3d70a
 80005fc:	bef0a3d7 	.word	0xbef0a3d7
 8000600:	461c4000 	.word	0x461c4000
 8000604:	461c4000 	.word	0x461c4000

08000608 <gpio_init>:
#include "stm32f4xx.h"

void gpio_init(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
    // Enable GPIO Clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800060c:	4b98      	ldr	r3, [pc, #608]	@ (8000870 <gpio_init+0x268>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000610:	4a97      	ldr	r2, [pc, #604]	@ (8000870 <gpio_init+0x268>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000618:	4b95      	ldr	r3, [pc, #596]	@ (8000870 <gpio_init+0x268>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	4a94      	ldr	r2, [pc, #592]	@ (8000870 <gpio_init+0x268>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000624:	4b92      	ldr	r3, [pc, #584]	@ (8000870 <gpio_init+0x268>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	4a91      	ldr	r2, [pc, #580]	@ (8000870 <gpio_init+0x268>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000630:	4b8f      	ldr	r3, [pc, #572]	@ (8000870 <gpio_init+0x268>)
 8000632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000634:	4a8e      	ldr	r2, [pc, #568]	@ (8000870 <gpio_init+0x268>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800063c:	4b8c      	ldr	r3, [pc, #560]	@ (8000870 <gpio_init+0x268>)
 800063e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000640:	4a8b      	ldr	r2, [pc, #556]	@ (8000870 <gpio_init+0x268>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000648:	4b89      	ldr	r3, [pc, #548]	@ (8000870 <gpio_init+0x268>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a88      	ldr	r2, [pc, #544]	@ (8000870 <gpio_init+0x268>)
 800064e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40

    // ===== MQ-5 Sensor: PA0 (Analog input) =====
    GPIOA->MODER &= ~(3 << (0 * 2));
 8000654:	4b87      	ldr	r3, [pc, #540]	@ (8000874 <gpio_init+0x26c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a86      	ldr	r2, [pc, #536]	@ (8000874 <gpio_init+0x26c>)
 800065a:	f023 0303 	bic.w	r3, r3, #3
 800065e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0 << (0 * 2));
 8000660:	4b84      	ldr	r3, [pc, #528]	@ (8000874 <gpio_init+0x26c>)
 8000662:	4a84      	ldr	r2, [pc, #528]	@ (8000874 <gpio_init+0x26c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6013      	str	r3, [r2, #0]

    // ===== Relay: PB12 (Output) =====
    GPIOB->MODER &= ~(3 << (12 * 2));
 8000668:	4b83      	ldr	r3, [pc, #524]	@ (8000878 <gpio_init+0x270>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a82      	ldr	r2, [pc, #520]	@ (8000878 <gpio_init+0x270>)
 800066e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000672:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (12 * 2));
 8000674:	4b80      	ldr	r3, [pc, #512]	@ (8000878 <gpio_init+0x270>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a7f      	ldr	r2, [pc, #508]	@ (8000878 <gpio_init+0x270>)
 800067a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800067e:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER &= ~(1 << 12);
 8000680:	4b7d      	ldr	r3, [pc, #500]	@ (8000878 <gpio_init+0x270>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a7c      	ldr	r2, [pc, #496]	@ (8000878 <gpio_init+0x270>)
 8000686:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800068a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (12 * 2));
 800068c:	4b7a      	ldr	r3, [pc, #488]	@ (8000878 <gpio_init+0x270>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a79      	ldr	r2, [pc, #484]	@ (8000878 <gpio_init+0x270>)
 8000692:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000696:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(3 << (12 * 2));
 8000698:	4b77      	ldr	r3, [pc, #476]	@ (8000878 <gpio_init+0x270>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a76      	ldr	r2, [pc, #472]	@ (8000878 <gpio_init+0x270>)
 800069e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80006a2:	60d3      	str	r3, [r2, #12]

    // ===== LED1: PB0 (Output) =====
    GPIOB->MODER &= ~(3 << (0 * 2));
 80006a4:	4b74      	ldr	r3, [pc, #464]	@ (8000878 <gpio_init+0x270>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a73      	ldr	r2, [pc, #460]	@ (8000878 <gpio_init+0x270>)
 80006aa:	f023 0303 	bic.w	r3, r3, #3
 80006ae:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (0 * 2));
 80006b0:	4b71      	ldr	r3, [pc, #452]	@ (8000878 <gpio_init+0x270>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a70      	ldr	r2, [pc, #448]	@ (8000878 <gpio_init+0x270>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 0);
 80006bc:	4b6e      	ldr	r3, [pc, #440]	@ (8000878 <gpio_init+0x270>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	4a6d      	ldr	r2, [pc, #436]	@ (8000878 <gpio_init+0x270>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6053      	str	r3, [r2, #4]

    // ===== LED2: PB1 (Output) =====
    GPIOB->MODER &= ~(3 << (1 * 2));
 80006c8:	4b6b      	ldr	r3, [pc, #428]	@ (8000878 <gpio_init+0x270>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a6a      	ldr	r2, [pc, #424]	@ (8000878 <gpio_init+0x270>)
 80006ce:	f023 030c 	bic.w	r3, r3, #12
 80006d2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (1 * 2));
 80006d4:	4b68      	ldr	r3, [pc, #416]	@ (8000878 <gpio_init+0x270>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a67      	ldr	r2, [pc, #412]	@ (8000878 <gpio_init+0x270>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 1);
 80006e0:	4b65      	ldr	r3, [pc, #404]	@ (8000878 <gpio_init+0x270>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	4a64      	ldr	r2, [pc, #400]	@ (8000878 <gpio_init+0x270>)
 80006e6:	f023 0302 	bic.w	r3, r3, #2
 80006ea:	6053      	str	r3, [r2, #4]

    // ===== SW2: PB3 (Input, Pull-up) =====
    GPIOB->MODER &= ~(3 << (3 * 2));
 80006ec:	4b62      	ldr	r3, [pc, #392]	@ (8000878 <gpio_init+0x270>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a61      	ldr	r2, [pc, #388]	@ (8000878 <gpio_init+0x270>)
 80006f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80006f6:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3 << (3 * 2));
 80006f8:	4b5f      	ldr	r3, [pc, #380]	@ (8000878 <gpio_init+0x270>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	4a5e      	ldr	r2, [pc, #376]	@ (8000878 <gpio_init+0x270>)
 80006fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000702:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (3 * 2));
 8000704:	4b5c      	ldr	r3, [pc, #368]	@ (8000878 <gpio_init+0x270>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	4a5b      	ldr	r2, [pc, #364]	@ (8000878 <gpio_init+0x270>)
 800070a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070e:	60d3      	str	r3, [r2, #12]

    // ===== LCD I2C=====
    GPIOB->MODER &= ~(3 << (8 * 2));
 8000710:	4b59      	ldr	r3, [pc, #356]	@ (8000878 <gpio_init+0x270>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a58      	ldr	r2, [pc, #352]	@ (8000878 <gpio_init+0x270>)
 8000716:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800071a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (8 * 2));
 800071c:	4b56      	ldr	r3, [pc, #344]	@ (8000878 <gpio_init+0x270>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a55      	ldr	r2, [pc, #340]	@ (8000878 <gpio_init+0x270>)
 8000722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000726:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((8 - 8) * 4));
 8000728:	4b53      	ldr	r3, [pc, #332]	@ (8000878 <gpio_init+0x270>)
 800072a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800072c:	4a52      	ldr	r2, [pc, #328]	@ (8000878 <gpio_init+0x270>)
 800072e:	f023 030f 	bic.w	r3, r3, #15
 8000732:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((8 - 8) * 4));
 8000734:	4b50      	ldr	r3, [pc, #320]	@ (8000878 <gpio_init+0x270>)
 8000736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000738:	4a4f      	ldr	r2, [pc, #316]	@ (8000878 <gpio_init+0x270>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 8);
 8000740:	4b4d      	ldr	r3, [pc, #308]	@ (8000878 <gpio_init+0x270>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4a4c      	ldr	r2, [pc, #304]	@ (8000878 <gpio_init+0x270>)
 8000746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800074a:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (8 * 2));
 800074c:	4b4a      	ldr	r3, [pc, #296]	@ (8000878 <gpio_init+0x270>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4a49      	ldr	r2, [pc, #292]	@ (8000878 <gpio_init+0x270>)
 8000752:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000756:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (8 * 2));
 8000758:	4b47      	ldr	r3, [pc, #284]	@ (8000878 <gpio_init+0x270>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	4a46      	ldr	r2, [pc, #280]	@ (8000878 <gpio_init+0x270>)
 800075e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000762:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER &= ~(3 << (9 * 2));
 8000764:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <gpio_init+0x270>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a43      	ldr	r2, [pc, #268]	@ (8000878 <gpio_init+0x270>)
 800076a:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800076e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (9 * 2));
 8000770:	4b41      	ldr	r3, [pc, #260]	@ (8000878 <gpio_init+0x270>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a40      	ldr	r2, [pc, #256]	@ (8000878 <gpio_init+0x270>)
 8000776:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800077a:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((9 - 8) * 4));
 800077c:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <gpio_init+0x270>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000780:	4a3d      	ldr	r2, [pc, #244]	@ (8000878 <gpio_init+0x270>)
 8000782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000786:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((9 - 8) * 4));
 8000788:	4b3b      	ldr	r3, [pc, #236]	@ (8000878 <gpio_init+0x270>)
 800078a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078c:	4a3a      	ldr	r2, [pc, #232]	@ (8000878 <gpio_init+0x270>)
 800078e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000792:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 9);
 8000794:	4b38      	ldr	r3, [pc, #224]	@ (8000878 <gpio_init+0x270>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	4a37      	ldr	r2, [pc, #220]	@ (8000878 <gpio_init+0x270>)
 800079a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800079e:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (9 * 2));
 80007a0:	4b35      	ldr	r3, [pc, #212]	@ (8000878 <gpio_init+0x270>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a34      	ldr	r2, [pc, #208]	@ (8000878 <gpio_init+0x270>)
 80007a6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80007aa:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (9 * 2));
 80007ac:	4b32      	ldr	r3, [pc, #200]	@ (8000878 <gpio_init+0x270>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a31      	ldr	r2, [pc, #196]	@ (8000878 <gpio_init+0x270>)
 80007b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007b6:	60d3      	str	r3, [r2, #12]

    // ===== Buzzer: PB10 (Output) =====
    GPIOB->MODER &= ~(3 << (10 * 2));
 80007b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <gpio_init+0x270>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a2e      	ldr	r2, [pc, #184]	@ (8000878 <gpio_init+0x270>)
 80007be:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80007c2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (10 * 2));
 80007c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <gpio_init+0x270>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <gpio_init+0x270>)
 80007ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80007ce:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 10);
 80007d0:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <gpio_init+0x270>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4a28      	ldr	r2, [pc, #160]	@ (8000878 <gpio_init+0x270>)
 80007d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80007da:	6053      	str	r3, [r2, #4]

    // ===== LED Xanh lá: PC0 (Output) =====
    GPIOC->MODER &= ~(3 << (0 * 2));
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <gpio_init+0x274>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a26      	ldr	r2, [pc, #152]	@ (800087c <gpio_init+0x274>)
 80007e2:	f023 0303 	bic.w	r3, r3, #3
 80007e6:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (0 * 2));
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <gpio_init+0x274>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a23      	ldr	r2, [pc, #140]	@ (800087c <gpio_init+0x274>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	6013      	str	r3, [r2, #0]

    // ===== LED Xanh dương: PC1 (Output) =====
    GPIOC->MODER &= ~(3 << (1 * 2));
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <gpio_init+0x274>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a20      	ldr	r2, [pc, #128]	@ (800087c <gpio_init+0x274>)
 80007fa:	f023 030c 	bic.w	r3, r3, #12
 80007fe:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (1 * 2));
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <gpio_init+0x274>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1d      	ldr	r2, [pc, #116]	@ (800087c <gpio_init+0x274>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6013      	str	r3, [r2, #0]

    // ===== LED Vàng: PC2 (Output) =====
    GPIOC->MODER &= ~(3 << (2 * 2));
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <gpio_init+0x274>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1a      	ldr	r2, [pc, #104]	@ (800087c <gpio_init+0x274>)
 8000812:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000816:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (2 * 2));
 8000818:	4b18      	ldr	r3, [pc, #96]	@ (800087c <gpio_init+0x274>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	@ (800087c <gpio_init+0x274>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]

    // ===== LED Đỏ: PC3 (Output) =====
    GPIOC->MODER &= ~(3 << (3 * 2));
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <gpio_init+0x274>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <gpio_init+0x274>)
 800082a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800082e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (3 * 2));
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <gpio_init+0x274>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a11      	ldr	r2, [pc, #68]	@ (800087c <gpio_init+0x274>)
 8000836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083a:	6013      	str	r3, [r2, #0]

    // ===== SW1: PC13 (Input, Pull-up) =====
    GPIOC->MODER &= ~(3 << (13 * 2));
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <gpio_init+0x274>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <gpio_init+0x274>)
 8000842:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000846:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3 << (13 * 2));
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <gpio_init+0x274>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <gpio_init+0x274>)
 800084e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000852:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |=  (1 << (13 * 2));
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <gpio_init+0x274>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	4a08      	ldr	r2, [pc, #32]	@ (800087c <gpio_init+0x274>)
 800085a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800085e:	60d3      	str	r3, [r2, #12]


    // ===== UART PA9 (Output) =====
    GPIOA->MODER &= ~(3 << (9 * 2));
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <gpio_init+0x26c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a03      	ldr	r2, [pc, #12]	@ (8000874 <gpio_init+0x26c>)
 8000866:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e008      	b.n	8000880 <gpio_init+0x278>
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800
    GPIOA->MODER |=  (2 << (9 * 2));
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <gpio_init+0x2a8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <gpio_init+0x2a8>)
 8000886:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800088a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0xF << ((9 - 8) * 4));
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <gpio_init+0x2a8>)
 800088e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <gpio_init+0x2a8>)
 8000892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000896:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  (7 << ((9 - 8) * 4));
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <gpio_init+0x2a8>)
 800089a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <gpio_init+0x2a8>)
 800089e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80008a2:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40020000 	.word	0x40020000

080008b4 <i2c2_init>:
#include "stm32f4xx.h"
#include "i2c.h"

void i2c2_init(void) {
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
    I2C1->CR2 = 16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <i2c2_init+0x2c>)
 80008ba:	2210      	movs	r2, #16
 80008bc:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <i2c2_init+0x2c>)
 80008c0:	2250      	movs	r2, #80	@ 0x50
 80008c2:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <i2c2_init+0x2c>)
 80008c6:	2211      	movs	r2, #17
 80008c8:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <i2c2_init+0x2c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <i2c2_init+0x2c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40005400 	.word	0x40005400

080008e4 <lcd_i2c_start>:
#include "stm32f4xx.h"
#include "lcd.h"

void lcd_i2c_start(void) {
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <lcd_i2c_start+0x44>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000928 <lcd_i2c_start+0x44>)
 80008ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f2:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80008f4:	bf00      	nop
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <lcd_i2c_start+0x44>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <lcd_i2c_start+0x12>
    I2C1->DR = (LCD_ADDR << 1);
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <lcd_i2c_start+0x44>)
 8000904:	224e      	movs	r2, #78	@ 0x4e
 8000906:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000908:	bf00      	nop
 800090a:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <lcd_i2c_start+0x44>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f9      	beq.n	800090a <lcd_i2c_start+0x26>
    (void)I2C1->SR1; (void)I2C1->SR2;
 8000916:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <lcd_i2c_start+0x44>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <lcd_i2c_start+0x44>)
 800091c:	699b      	ldr	r3, [r3, #24]
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40005400 	.word	0x40005400

0800092c <lcd_i2c_stop>:

void lcd_i2c_stop(void) {
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <lcd_i2c_stop+0x1c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <lcd_i2c_stop+0x1c>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40005400 	.word	0x40005400

0800094c <lcd_i2c_write>:

void lcd_i2c_write(uint8_t data) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000956:	bf00      	nop
 8000958:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <lcd_i2c_write+0x3c>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <lcd_i2c_write+0xc>
    I2C1->DR = data;
 8000964:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <lcd_i2c_write+0x3c>)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800096a:	bf00      	nop
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <lcd_i2c_write+0x3c>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <lcd_i2c_write+0x20>
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40005400 	.word	0x40005400

0800098c <lcd_write_nibble>:

void lcd_write_nibble(uint8_t nibble, uint8_t control) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0) | control | LCD_BACKLIGHT;
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	f023 030f 	bic.w	r3, r3, #15
 80009a4:	b25a      	sxtb	r2, r3
 80009a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	73fb      	strb	r3, [r7, #15]
    lcd_i2c_start();
 80009b6:	f7ff ff95 	bl	80008e4 <lcd_i2c_start>
    lcd_i2c_write(data);
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffc5 	bl	800094c <lcd_i2c_write>
    lcd_i2c_write(data | LCD_ENABLE);
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffbe 	bl	800094c <lcd_i2c_write>
    for (volatile int i = 0; i < 1000; i++);
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	e002      	b.n	80009dc <lcd_write_nibble+0x50>
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	3301      	adds	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009e2:	dbf8      	blt.n	80009d6 <lcd_write_nibble+0x4a>
    lcd_i2c_write(data & ~LCD_ENABLE);
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	f023 0304 	bic.w	r3, r3, #4
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffad 	bl	800094c <lcd_i2c_write>
    lcd_i2c_stop();
 80009f2:	f7ff ff9b 	bl	800092c <lcd_i2c_stop>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <lcd_write_byte>:

void lcd_write_byte(uint8_t byte, uint8_t control) {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71bb      	strb	r3, [r7, #6]
    lcd_write_nibble(byte & 0xF0, control);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f023 030f 	bic.w	r3, r3, #15
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffb6 	bl	800098c <lcd_write_nibble>
    lcd_write_nibble((byte << 4) & 0xF0, control);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ffae 	bl	800098c <lcd_write_nibble>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <lcd_command>:

void lcd_command(uint8_t cmd) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(cmd, 0x00);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffd9 	bl	80009fe <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	e002      	b.n	8000a58 <lcd_command+0x20>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	ddf7      	ble.n	8000a52 <lcd_command+0x1a>
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <lcd_data>:

void lcd_data(uint8_t data) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(data, LCD_REGISTER_SELECT);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffbf 	bl	80009fe <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <lcd_data+0x20>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a92:	4293      	cmp	r3, r2
 8000a94:	ddf7      	ble.n	8000a86 <lcd_data+0x1a>
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <lcd_init>:

void lcd_init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 100000; i++);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	e002      	b.n	8000ab2 <lcd_init+0x12>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <lcd_init+0x60>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	ddf8      	ble.n	8000aac <lcd_init+0xc>
    lcd_command(0x33);
 8000aba:	2033      	movs	r0, #51	@ 0x33
 8000abc:	f7ff ffbc 	bl	8000a38 <lcd_command>
    lcd_command(0x32);
 8000ac0:	2032      	movs	r0, #50	@ 0x32
 8000ac2:	f7ff ffb9 	bl	8000a38 <lcd_command>
    lcd_command(0x28);
 8000ac6:	2028      	movs	r0, #40	@ 0x28
 8000ac8:	f7ff ffb6 	bl	8000a38 <lcd_command>
    lcd_command(0x0C);
 8000acc:	200c      	movs	r0, #12
 8000ace:	f7ff ffb3 	bl	8000a38 <lcd_command>
    lcd_command(0x06);
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f7ff ffb0 	bl	8000a38 <lcd_command>
    lcd_command(0x01);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff ffad 	bl	8000a38 <lcd_command>
    for (volatile int i = 0; i < 50000; i++);
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	e002      	b.n	8000aea <lcd_init+0x4a>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000af0:	4293      	cmp	r3, r2
 8000af2:	ddf7      	ble.n	8000ae4 <lcd_init+0x44>
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	0001869f 	.word	0x0001869f

08000b04 <lcd_print>:

void lcd_print(char *str) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000b0c:	e006      	b.n	8000b1c <lcd_print+0x18>
        lcd_data((uint8_t)(*str++));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffa8 	bl	8000a6c <lcd_data>
    while (*str) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f4      	bne.n	8000b0e <lcd_print+0xa>
    }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <led_on>:
    {LED_DANGER_PIN,  0, 0, 0, 0},
};

#define NUM_LEDS (sizeof(leds) / sizeof(leds[0]))

void led_on(uint8_t pin) {
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e022      	b.n	8000b86 <led_on+0x56>
        if (leds[i].pin == pin) {
 8000b40:	4a16      	ldr	r2, [pc, #88]	@ (8000b9c <led_on+0x6c>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	011b      	lsls	r3, r3, #4
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	79fa      	ldrb	r2, [r7, #7]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d117      	bne.n	8000b80 <led_on+0x50>
            leds[i].active = 1;
 8000b50:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <led_on+0x6c>)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	4413      	add	r3, r2
 8000b58:	3301      	adds	r3, #1
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
            leds[i].blinking = 0;
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <led_on+0x6c>)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	4413      	add	r3, r2
 8000b66:	330c      	adds	r3, #12
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
            LED_PORT->ODR |= (1 << pin);
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <led_on+0x70>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ba0 <led_on+0x70>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d9d9      	bls.n	8000b40 <led_on+0x10>
        }
    }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	40020800 	.word	0x40020800

08000ba4 <led_off>:

void led_off(uint8_t pin) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e023      	b.n	8000bfc <led_off+0x58>
        if (leds[i].pin == pin) {
 8000bb4:	4a16      	ldr	r2, [pc, #88]	@ (8000c10 <led_off+0x6c>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	79fa      	ldrb	r2, [r7, #7]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d118      	bne.n	8000bf6 <led_off+0x52>
            leds[i].active = 0;
 8000bc4:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <led_off+0x6c>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	4413      	add	r3, r2
 8000bcc:	3301      	adds	r3, #1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
            leds[i].blinking = 0;
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <led_off+0x6c>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	4413      	add	r3, r2
 8000bda:	330c      	adds	r3, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
            LED_PORT->ODR &= ~(1 << pin);
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <led_off+0x70>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	79fa      	ldrb	r2, [r7, #7]
 8000be6:	2101      	movs	r1, #1
 8000be8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bec:	43d2      	mvns	r2, r2
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <led_off+0x70>)
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d9d8      	bls.n	8000bb4 <led_off+0x10>
        }
    }
}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20000004 	.word	0x20000004
 8000c14:	40020800 	.word	0x40020800

08000c18 <led_off_all>:
        leds[i].blinking = 0;
        LED_PORT->ODR |= (1 << leds[i].pin);
    }
}

void led_off_all(void) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
    for (int i = 1; i < NUM_LEDS; i++) {
 8000c1e:	2301      	movs	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e01f      	b.n	8000c64 <led_off_all+0x4c>
        leds[i].active = 0;
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <led_off_all+0x60>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4413      	add	r3, r2
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
        leds[i].blinking = 0;
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <led_off_all+0x60>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4413      	add	r3, r2
 8000c3a:	330c      	adds	r3, #12
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
        LED_PORT->ODR &= ~(1 << leds[i].pin);
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <led_off_all+0x64>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <led_off_all+0x60>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	440a      	add	r2, r1
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	2201      	movs	r2, #1
 8000c52:	408a      	lsls	r2, r1
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	4611      	mov	r1, r2
 8000c58:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <led_off_all+0x64>)
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	6153      	str	r3, [r2, #20]
    for (int i = 1; i < NUM_LEDS; i++) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3301      	adds	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d9dc      	bls.n	8000c24 <led_off_all+0xc>
    }
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	40020800 	.word	0x40020800

08000c80 <led_check>:
            LED_PORT->ODR &= ~(1 << pin);
        }
    }
}

void led_check(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
    uint32_t now = millis();
 8000c86:	f000 fb25 	bl	80012d4 <millis>
 8000c8a:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	e02f      	b.n	8000cf2 <led_check+0x72>
        if (leds[i].blinking && (now - leds[i].last_toggle >= leds[i].interval)) {
 8000c92:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <led_check+0x84>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	4413      	add	r3, r2
 8000c9a:	330c      	adds	r3, #12
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d024      	beq.n	8000cec <led_check+0x6c>
 8000ca2:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <led_check+0x84>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	4413      	add	r3, r2
 8000caa:	3304      	adds	r3, #4
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	1ad2      	subs	r2, r2, r3
 8000cb2:	4914      	ldr	r1, [pc, #80]	@ (8000d04 <led_check+0x84>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	440b      	add	r3, r1
 8000cba:	3308      	adds	r3, #8
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d314      	bcc.n	8000cec <led_check+0x6c>
            LED_PORT->ODR ^= (1 << leds[i].pin);
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <led_check+0x88>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	490f      	ldr	r1, [pc, #60]	@ (8000d04 <led_check+0x84>)
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	440a      	add	r2, r1
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	408a      	lsls	r2, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <led_check+0x88>)
 8000cda:	404b      	eors	r3, r1
 8000cdc:	6153      	str	r3, [r2, #20]
            leds[i].last_toggle = now;
 8000cde:	4a09      	ldr	r2, [pc, #36]	@ (8000d04 <led_check+0x84>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d9cc      	bls.n	8000c92 <led_check+0x12>
        }
    }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000004 	.word	0x20000004
 8000d08:	40020800 	.word	0x40020800

08000d0c <main>:
#include <stdio.h>
#include "uart.h"
#include "scheduler.h"
#include "relay.h"

int main(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	timer_init();
 8000d12:	f000 facd 	bl	80012b0 <timer_init>
	gpio_init();
 8000d16:	f7ff fc77 	bl	8000608 <gpio_init>
	button_init();
 8000d1a:	f7ff fb1d 	bl	8000358 <button_init>

	i2c2_init();
 8000d1e:	f7ff fdc9 	bl	80008b4 <i2c2_init>
	lcd_init();
 8000d22:	f7ff febd 	bl	8000aa0 <lcd_init>

	uart1_init();
 8000d26:	f000 fae1 	bl	80012ec <uart1_init>


    gas_sensor_init();
 8000d2a:	f7ff fbed 	bl	8000508 <gas_sensor_init>
    gas_sensor_calibrate();
 8000d2e:	f7ff fbf1 	bl	8000514 <gas_sensor_calibrate>


	while(1){

		uint16_t ppm = gas_sensor_read_ppm();
 8000d32:	f7ff fc1b 	bl	800056c <gas_sensor_read_ppm>
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
		state_machine_update(ppm);
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f8a9 	bl	8000e94 <state_machine_update>
		scheduler_update(ppm, get_alert_level());
 8000d42:	f000 f883 	bl	8000e4c <get_alert_level>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f82a 	bl	8000da8 <scheduler_update>
	while(1){
 8000d54:	bf00      	nop
 8000d56:	e7ec      	b.n	8000d32 <main+0x26>

08000d58 <relay_on>:
#define RELAY_PORT GPIOB
#define RELAY_PIN  12

static uint8_t relay_state = 0;

void relay_on(void) {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
    RELAY_PORT->ODR |= (1 << RELAY_PIN);
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <relay_on+0x20>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <relay_on+0x20>)
 8000d62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d66:	6153      	str	r3, [r2, #20]
    relay_state = 1;
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <relay_on+0x24>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	200000c4 	.word	0x200000c4

08000d80 <relay_off>:

void relay_off(void) {
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
    RELAY_PORT->ODR &= ~(1 << RELAY_PIN);
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <relay_off+0x20>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <relay_off+0x20>)
 8000d8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d8e:	6153      	str	r3, [r2, #20]
    relay_state = 0;
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <relay_off+0x24>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40020400 	.word	0x40020400
 8000da4:	200000c4 	.word	0x200000c4

08000da8 <scheduler_update>:

static uint32_t last_sent_time = 0;

#define DELAY	1000

void scheduler_update(uint16_t ppm, GasAlertLevel level) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	460a      	mov	r2, r1
 8000db2:	80fb      	strh	r3, [r7, #6]
 8000db4:	4613      	mov	r3, r2
 8000db6:	717b      	strb	r3, [r7, #5]
    uint32_t now = millis();
 8000db8:	f000 fa8c 	bl	80012d4 <millis>
 8000dbc:	60f8      	str	r0, [r7, #12]

    if (now - last_sent_time >= DELAY) {
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <scheduler_update+0x40>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000dca:	d308      	bcc.n	8000dde <scheduler_update+0x36>
        send_data(ppm, level);
 8000dcc:	797a      	ldrb	r2, [r7, #5]
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f80a 	bl	8000dec <send_data>
        last_sent_time = now;
 8000dd8:	4a03      	ldr	r2, [pc, #12]	@ (8000de8 <scheduler_update+0x40>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6013      	str	r3, [r2, #0]
    }
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000c8 	.word	0x200000c8

08000dec <send_data>:

void send_data(uint16_t ppm, GasAlertLevel level) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b092      	sub	sp, #72	@ 0x48
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	717b      	strb	r3, [r7, #5]
    char buffer[64];
    sprintf(buffer, "{\"ppm\":%u,\"state\":%u}\n", ppm, (uint8_t)level);
 8000dfc:	88fa      	ldrh	r2, [r7, #6]
 8000dfe:	797b      	ldrb	r3, [r7, #5]
 8000e00:	f107 0008 	add.w	r0, r7, #8
 8000e04:	4905      	ldr	r1, [pc, #20]	@ (8000e1c <send_data+0x30>)
 8000e06:	f000 faf7 	bl	80013f8 <siprintf>
    uart1_send_string(buffer);
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fa9e 	bl	8001350 <uart1_send_string>
}
 8000e14:	bf00      	nop
 8000e16:	3748      	adds	r7, #72	@ 0x48
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	080027cc 	.word	0x080027cc

08000e20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e24:	f3bf 8f4f 	dsb	sy
}
 8000e28:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <__NVIC_SystemReset+0x24>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e32:	4904      	ldr	r1, [pc, #16]	@ (8000e44 <__NVIC_SystemReset+0x24>)
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_SystemReset+0x28>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e3a:	f3bf 8f4f 	dsb	sy
}
 8000e3e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <__NVIC_SystemReset+0x20>
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	05fa0004 	.word	0x05fa0004

08000e4c <get_alert_level>:
{
    return system_state;
}

GasAlertLevel get_alert_level(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
    return gas_alert_level;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <get_alert_level+0x14>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200000da 	.word	0x200000da

08000e64 <state_machine_toggle>:

void state_machine_toggle(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
    if (system_state == SYSTEM_STOPPED)
 8000e68:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <state_machine_toggle+0x24>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d103      	bne.n	8000e78 <state_machine_toggle+0x14>
    {
        system_state = SYSTEM_RUNNING;
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <state_machine_toggle+0x24>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        system_state = SYSTEM_STOPPED;
    }
}
 8000e76:	e002      	b.n	8000e7e <state_machine_toggle+0x1a>
        system_state = SYSTEM_STOPPED;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <state_machine_toggle+0x24>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	200000d9 	.word	0x200000d9

08000e8c <state_machine_reset>:

void state_machine_reset(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
//    system_state = SYSTEM_STOPPED;
//    gas_alert_level = GAS_SAFE;
    NVIC_SystemReset();
 8000e90:	f7ff ffc6 	bl	8000e20 <__NVIC_SystemReset>

08000e94 <state_machine_update>:
}

void state_machine_update(uint16_t ppm)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
	buzzer_check();
 8000e9e:	f7ff fad3 	bl	8000448 <buzzer_check>
	led_check();
 8000ea2:	f7ff feed 	bl	8000c80 <led_check>
	if (system_state == SYSTEM_STOPPED)
 8000ea6:	4b70      	ldr	r3, [pc, #448]	@ (8001068 <state_machine_update+0x1d4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d117      	bne.n	8000ede <state_machine_update+0x4a>
	{
	    led_off_all();
 8000eae:	f7ff feb3 	bl	8000c18 <led_off_all>
	    led_off(LED_POWER_PIN);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fe76 	bl	8000ba4 <led_off>
	    buzzer_off();
 8000eb8:	f7ff faac 	bl	8000414 <buzzer_off>
	    relay_off();
 8000ebc:	f7ff ff60 	bl	8000d80 <relay_off>
	    if (!lcd_paused_displayed)
 8000ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800106c <state_machine_update+0x1d8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 80cb 	bne.w	8001060 <state_machine_update+0x1cc>
		{
	    	lcd_command(0x01);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fdb4 	bl	8000a38 <lcd_command>
			lcd_print("DISABLED");
 8000ed0:	4867      	ldr	r0, [pc, #412]	@ (8001070 <state_machine_update+0x1dc>)
 8000ed2:	f7ff fe17 	bl	8000b04 <lcd_print>
			lcd_paused_displayed = 1;
 8000ed6:	4b65      	ldr	r3, [pc, #404]	@ (800106c <state_machine_update+0x1d8>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
		}
	    return;
 8000edc:	e0c0      	b.n	8001060 <state_machine_update+0x1cc>
	}
	else
	{
	    led_on(LED_POWER_PIN); // bật lại sau khi all_off
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fe26 	bl	8000b30 <led_on>
	}

	lcd_paused_displayed = 0;
 8000ee4:	4b61      	ldr	r3, [pc, #388]	@ (800106c <state_machine_update+0x1d8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]

    if (ppm < 200)
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	2bc7      	cmp	r3, #199	@ 0xc7
 8000eee:	d803      	bhi.n	8000ef8 <state_machine_update+0x64>
    {
        gas_alert_level = GAS_SAFE;
 8000ef0:	4b60      	ldr	r3, [pc, #384]	@ (8001074 <state_machine_update+0x1e0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e012      	b.n	8000f1e <state_machine_update+0x8a>
    }
    else if (ppm < 350)
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000efe:	d203      	bcs.n	8000f08 <state_machine_update+0x74>
    {
        gas_alert_level = GAS_LOW;
 8000f00:	4b5c      	ldr	r3, [pc, #368]	@ (8001074 <state_machine_update+0x1e0>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e00a      	b.n	8000f1e <state_machine_update+0x8a>
    }
    else if (ppm < 500)
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f0e:	d203      	bcs.n	8000f18 <state_machine_update+0x84>
    {
        gas_alert_level = GAS_HIGH;
 8000f10:	4b58      	ldr	r3, [pc, #352]	@ (8001074 <state_machine_update+0x1e0>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e002      	b.n	8000f1e <state_machine_update+0x8a>
    }
    else
    {
        gas_alert_level = GAS_DANGEROUS;
 8000f18:	4b56      	ldr	r3, [pc, #344]	@ (8001074 <state_machine_update+0x1e0>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	701a      	strb	r2, [r3, #0]
    }
    uint32_t now = millis();
 8000f1e:	f000 f9d9 	bl	80012d4 <millis>
 8000f22:	61f8      	str	r0, [r7, #28]
    switch (gas_alert_level)
 8000f24:	4b53      	ldr	r3, [pc, #332]	@ (8001074 <state_machine_update+0x1e0>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d85d      	bhi.n	8000fe8 <state_machine_update+0x154>
 8000f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f34 <state_machine_update+0xa0>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f55 	.word	0x08000f55
 8000f3c:	08000f65 	.word	0x08000f65
 8000f40:	08000fa5 	.word	0x08000fa5
    {
        case GAS_SAFE:
            led_off_all();
 8000f44:	f7ff fe68 	bl	8000c18 <led_off_all>
            led_on(LED_SAFE_PIN);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fdf1 	bl	8000b30 <led_on>
            buzzer_off();
 8000f4e:	f7ff fa61 	bl	8000414 <buzzer_off>
            break;
 8000f52:	e049      	b.n	8000fe8 <state_machine_update+0x154>

        case GAS_LOW:
            led_off_all();
 8000f54:	f7ff fe60 	bl	8000c18 <led_off_all>
            led_on(LED_WARNING_PIN);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff fde9 	bl	8000b30 <led_on>
            buzzer_off();
 8000f5e:	f7ff fa59 	bl	8000414 <buzzer_off>
            break;
 8000f62:	e041      	b.n	8000fe8 <state_machine_update+0x154>

        case GAS_HIGH:
            led_off_all();
 8000f64:	f7ff fe58 	bl	8000c18 <led_off_all>
			if (now - led_danger_last_toggle >= 1000) {
 8000f68:	4b43      	ldr	r3, [pc, #268]	@ (8001078 <state_machine_update+0x1e4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f74:	d313      	bcc.n	8000f9e <state_machine_update+0x10a>
				led_danger_last_toggle = now;
 8000f76:	4a40      	ldr	r2, [pc, #256]	@ (8001078 <state_machine_update+0x1e4>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	6013      	str	r3, [r2, #0]

				if (led_danger_on) {
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800107c <state_machine_update+0x1e8>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <state_machine_update+0xfe>
					led_off(LED_DANGER_PIN);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f7ff fe0d 	bl	8000ba4 <led_off>
					led_danger_on = 0;
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800107c <state_machine_update+0x1e8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e005      	b.n	8000f9e <state_machine_update+0x10a>
				} else {
					led_on(LED_DANGER_PIN);
 8000f92:	2003      	movs	r0, #3
 8000f94:	f7ff fdcc 	bl	8000b30 <led_on>
					led_danger_on = 1;
 8000f98:	4b38      	ldr	r3, [pc, #224]	@ (800107c <state_machine_update+0x1e8>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
				}
			}
            buzzer_off();
 8000f9e:	f7ff fa39 	bl	8000414 <buzzer_off>
            break;
 8000fa2:	e021      	b.n	8000fe8 <state_machine_update+0x154>

        case GAS_DANGEROUS:
            led_off_all();
 8000fa4:	f7ff fe38 	bl	8000c18 <led_off_all>
            buzzer_on(0);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fa0b 	bl	80003c4 <buzzer_on>
			relay_on();
 8000fae:	f7ff fed3 	bl	8000d58 <relay_on>
			if (now - led_danger_last_toggle >= 200) {
 8000fb2:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <state_machine_update+0x1e4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2bc7      	cmp	r3, #199	@ 0xc7
 8000fbc:	d913      	bls.n	8000fe6 <state_machine_update+0x152>
				led_danger_last_toggle = now;
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <state_machine_update+0x1e4>)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	6013      	str	r3, [r2, #0]

				if (led_danger_on) {
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <state_machine_update+0x1e8>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <state_machine_update+0x146>
					led_off(LED_DANGER_PIN);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f7ff fde9 	bl	8000ba4 <led_off>
					led_danger_on = 0;
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <state_machine_update+0x1e8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
				} else {
					led_on(LED_DANGER_PIN);
					led_danger_on = 1;
				}
			}
            break;
 8000fd8:	e005      	b.n	8000fe6 <state_machine_update+0x152>
					led_on(LED_DANGER_PIN);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f7ff fda8 	bl	8000b30 <led_on>
					led_danger_on = 1;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	@ (800107c <state_machine_update+0x1e8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
            break;
 8000fe6:	bf00      	nop
    }

//    uint32_t now = millis();
    if (now - lcd_last_update >= 500) {
 8000fe8:	4b25      	ldr	r3, [pc, #148]	@ (8001080 <state_machine_update+0x1ec>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ff4:	d335      	bcc.n	8001062 <state_machine_update+0x1ce>
        lcd_last_update = now;
 8000ff6:	4a22      	ldr	r2, [pc, #136]	@ (8001080 <state_machine_update+0x1ec>)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	6013      	str	r3, [r2, #0]

        char buf[20];
        lcd_command(0x01);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff fd1b 	bl	8000a38 <lcd_command>
        sprintf(buf, "Gas: %u ppm", ppm);
 8001002:	88fa      	ldrh	r2, [r7, #6]
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	491e      	ldr	r1, [pc, #120]	@ (8001084 <state_machine_update+0x1f0>)
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f9f4 	bl	80013f8 <siprintf>
        lcd_print(buf);
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd75 	bl	8000b04 <lcd_print>
        lcd_command(0xC0);
 800101a:	20c0      	movs	r0, #192	@ 0xc0
 800101c:	f7ff fd0c 	bl	8000a38 <lcd_command>

        switch (gas_alert_level)
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <state_machine_update+0x1e0>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b03      	cmp	r3, #3
 8001026:	d81c      	bhi.n	8001062 <state_machine_update+0x1ce>
 8001028:	a201      	add	r2, pc, #4	@ (adr r2, 8001030 <state_machine_update+0x19c>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	08001049 	.word	0x08001049
 8001038:	08001051 	.word	0x08001051
 800103c:	08001059 	.word	0x08001059
        {
            case GAS_SAFE: lcd_print("Safe"); break;
 8001040:	4811      	ldr	r0, [pc, #68]	@ (8001088 <state_machine_update+0x1f4>)
 8001042:	f7ff fd5f 	bl	8000b04 <lcd_print>
 8001046:	e00c      	b.n	8001062 <state_machine_update+0x1ce>
            case GAS_LOW: lcd_print("Low"); break;
 8001048:	4810      	ldr	r0, [pc, #64]	@ (800108c <state_machine_update+0x1f8>)
 800104a:	f7ff fd5b 	bl	8000b04 <lcd_print>
 800104e:	e008      	b.n	8001062 <state_machine_update+0x1ce>
            case GAS_HIGH: lcd_print("High"); break;
 8001050:	480f      	ldr	r0, [pc, #60]	@ (8001090 <state_machine_update+0x1fc>)
 8001052:	f7ff fd57 	bl	8000b04 <lcd_print>
 8001056:	e004      	b.n	8001062 <state_machine_update+0x1ce>
            case GAS_DANGEROUS: lcd_print("DANGER"); break;
 8001058:	480e      	ldr	r0, [pc, #56]	@ (8001094 <state_machine_update+0x200>)
 800105a:	f7ff fd53 	bl	8000b04 <lcd_print>
 800105e:	e000      	b.n	8001062 <state_machine_update+0x1ce>
	    return;
 8001060:	bf00      	nop
        }
    }
}
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000d9 	.word	0x200000d9
 800106c:	200000d0 	.word	0x200000d0
 8001070:	080027e4 	.word	0x080027e4
 8001074:	200000da 	.word	0x200000da
 8001078:	200000d4 	.word	0x200000d4
 800107c:	200000d8 	.word	0x200000d8
 8001080:	200000cc 	.word	0x200000cc
 8001084:	080027f0 	.word	0x080027f0
 8001088:	080027fc 	.word	0x080027fc
 800108c:	08002804 	.word	0x08002804
 8001090:	08002808 	.word	0x08002808
 8001094:	08002810 	.word	0x08002810

08001098 <EXTI15_10_IRQHandler>:
#include "led.h"
#include "buzzer.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */
void EXTI15_10_IRQHandler(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 13)) {
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <EXTI15_10_IRQHandler+0x24>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d007      	beq.n	80010b8 <EXTI15_10_IRQHandler+0x20>
        EXTI->PR |= (1 << 13);
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <EXTI15_10_IRQHandler+0x24>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4a03      	ldr	r2, [pc, #12]	@ (80010bc <EXTI15_10_IRQHandler+0x24>)
 80010ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b2:	6153      	str	r3, [r2, #20]
        state_machine_toggle();
 80010b4:	f7ff fed6 	bl	8000e64 <state_machine_toggle>
    }
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 3)) {
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <EXTI3_IRQHandler+0x24>)
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <EXTI3_IRQHandler+0x20>
        EXTI->PR |= (1 << 3);
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <EXTI3_IRQHandler+0x24>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	4a03      	ldr	r2, [pc, #12]	@ (80010e4 <EXTI3_IRQHandler+0x24>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6153      	str	r3, [r2, #20]
        state_machine_reset();
 80010dc:	f7ff fed6 	bl	8000e8c <state_machine_reset>
    }
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 f947 	bl	80013d0 <HAL_IncTick>
  timer_systick_callback();
 8001142:	f000 f89b 	bl	800127c <timer_systick_callback>
  buzzer_check();
 8001146:	f7ff f97f 	bl	8000448 <buzzer_check>
  led_check();
 800114a:	f7ff fd99 	bl	8000c80 <led_check>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f000 f95a 	bl	800143c <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20020000 	.word	0x20020000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	200000dc 	.word	0x200000dc
 80011bc:	20000238 	.word	0x20000238

080011c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <SystemInit+0x20>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <SystemInit+0x20>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ffc2 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <timer_systick_callback>:
#include "timer.h"

static volatile uint32_t system_millis = 0;
static volatile uint32_t blocking_delay = 0;

void timer_systick_callback(void) {
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
    system_millis++;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <timer_systick_callback+0x2c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <timer_systick_callback+0x2c>)
 8001288:	6013      	str	r3, [r2, #0]
    if (blocking_delay > 0) blocking_delay--;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <timer_systick_callback+0x30>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <timer_systick_callback+0x20>
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <timer_systick_callback+0x30>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <timer_systick_callback+0x30>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200000e0 	.word	0x200000e0
 80012ac:	200000e4 	.word	0x200000e4

080012b0 <timer_init>:

void timer_init(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    SysTick_Config(SystemCoreClock / 1000);
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <timer_init+0x1c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <timer_init+0x20>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	099b      	lsrs	r3, r3, #6
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ffb9 	bl	8001238 <SysTick_Config>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000044 	.word	0x20000044
 80012d0:	10624dd3 	.word	0x10624dd3

080012d4 <millis>:

uint32_t millis(void) {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
    return system_millis;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <millis+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200000e0 	.word	0x200000e0

080012ec <uart1_init>:
#include "stm32f4xx.h"
#include "uart.h"

void uart1_init(void) {
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <uart1_init+0x2c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <uart1_init+0x2c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6313      	str	r3, [r2, #48]	@ 0x30
    USART1->BRR = 0x0683;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <uart1_init+0x30>)
 80012fe:	f240 6283 	movw	r2, #1667	@ 0x683
 8001302:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_UE;
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <uart1_init+0x30>)
 8001306:	f242 0208 	movw	r2, #8200	@ 0x2008
 800130a:	60da      	str	r2, [r3, #12]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40011000 	.word	0x40011000

08001320 <uart1_send_char>:

void uart1_send_char(char c) {
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 800132a:	bf00      	nop
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <uart1_send_char+0x2c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f9      	beq.n	800132c <uart1_send_char+0xc>
    USART1->DR = c;
 8001338:	4a04      	ldr	r2, [pc, #16]	@ (800134c <uart1_send_char+0x2c>)
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	6053      	str	r3, [r2, #4]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40011000 	.word	0x40011000

08001350 <uart1_send_string>:

void uart1_send_string(const char* str) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001358:	e006      	b.n	8001368 <uart1_send_string+0x18>
        uart1_send_char(*str++);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ffdc 	bl	8001320 <uart1_send_char>
    while (*str) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f4      	bne.n	800135a <uart1_send_string+0xa>
    }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001380:	f7ff ff1e 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001386:	490d      	ldr	r1, [pc, #52]	@ (80013bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800139c:	4c0a      	ldr	r4, [pc, #40]	@ (80013c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f000 f84d 	bl	8001448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff fcad 	bl	8000d0c <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80013c0:	08002874 	.word	0x08002874
  ldr r2, =_sbss
 80013c4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80013c8:	20000234 	.word	0x20000234

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000048 	.word	0x20000048
 80013f4:	200000e8 	.word	0x200000e8

080013f8 <siprintf>:
 80013f8:	b40e      	push	{r1, r2, r3}
 80013fa:	b510      	push	{r4, lr}
 80013fc:	b09d      	sub	sp, #116	@ 0x74
 80013fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001400:	9002      	str	r0, [sp, #8]
 8001402:	9006      	str	r0, [sp, #24]
 8001404:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001408:	480a      	ldr	r0, [pc, #40]	@ (8001434 <siprintf+0x3c>)
 800140a:	9107      	str	r1, [sp, #28]
 800140c:	9104      	str	r1, [sp, #16]
 800140e:	490a      	ldr	r1, [pc, #40]	@ (8001438 <siprintf+0x40>)
 8001410:	f853 2b04 	ldr.w	r2, [r3], #4
 8001414:	9105      	str	r1, [sp, #20]
 8001416:	2400      	movs	r4, #0
 8001418:	a902      	add	r1, sp, #8
 800141a:	6800      	ldr	r0, [r0, #0]
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001420:	f000 f98c 	bl	800173c <_svfiprintf_r>
 8001424:	9b02      	ldr	r3, [sp, #8]
 8001426:	701c      	strb	r4, [r3, #0]
 8001428:	b01d      	add	sp, #116	@ 0x74
 800142a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800142e:	b003      	add	sp, #12
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	2000004c 	.word	0x2000004c
 8001438:	ffff0208 	.word	0xffff0208

0800143c <__errno>:
 800143c:	4b01      	ldr	r3, [pc, #4]	@ (8001444 <__errno+0x8>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000004c 	.word	0x2000004c

08001448 <__libc_init_array>:
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	4d0d      	ldr	r5, [pc, #52]	@ (8001480 <__libc_init_array+0x38>)
 800144c:	4c0d      	ldr	r4, [pc, #52]	@ (8001484 <__libc_init_array+0x3c>)
 800144e:	1b64      	subs	r4, r4, r5
 8001450:	10a4      	asrs	r4, r4, #2
 8001452:	2600      	movs	r6, #0
 8001454:	42a6      	cmp	r6, r4
 8001456:	d109      	bne.n	800146c <__libc_init_array+0x24>
 8001458:	4d0b      	ldr	r5, [pc, #44]	@ (8001488 <__libc_init_array+0x40>)
 800145a:	4c0c      	ldr	r4, [pc, #48]	@ (800148c <__libc_init_array+0x44>)
 800145c:	f001 f9aa 	bl	80027b4 <_init>
 8001460:	1b64      	subs	r4, r4, r5
 8001462:	10a4      	asrs	r4, r4, #2
 8001464:	2600      	movs	r6, #0
 8001466:	42a6      	cmp	r6, r4
 8001468:	d105      	bne.n	8001476 <__libc_init_array+0x2e>
 800146a:	bd70      	pop	{r4, r5, r6, pc}
 800146c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001470:	4798      	blx	r3
 8001472:	3601      	adds	r6, #1
 8001474:	e7ee      	b.n	8001454 <__libc_init_array+0xc>
 8001476:	f855 3b04 	ldr.w	r3, [r5], #4
 800147a:	4798      	blx	r3
 800147c:	3601      	adds	r6, #1
 800147e:	e7f2      	b.n	8001466 <__libc_init_array+0x1e>
 8001480:	0800286c 	.word	0x0800286c
 8001484:	0800286c 	.word	0x0800286c
 8001488:	0800286c 	.word	0x0800286c
 800148c:	08002870 	.word	0x08002870

08001490 <__retarget_lock_acquire_recursive>:
 8001490:	4770      	bx	lr

08001492 <__retarget_lock_release_recursive>:
 8001492:	4770      	bx	lr

08001494 <_free_r>:
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	4605      	mov	r5, r0
 8001498:	2900      	cmp	r1, #0
 800149a:	d041      	beq.n	8001520 <_free_r+0x8c>
 800149c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014a0:	1f0c      	subs	r4, r1, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bfb8      	it	lt
 80014a6:	18e4      	addlt	r4, r4, r3
 80014a8:	f000 f8e0 	bl	800166c <__malloc_lock>
 80014ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <_free_r+0x90>)
 80014ae:	6813      	ldr	r3, [r2, #0]
 80014b0:	b933      	cbnz	r3, 80014c0 <_free_r+0x2c>
 80014b2:	6063      	str	r3, [r4, #4]
 80014b4:	6014      	str	r4, [r2, #0]
 80014b6:	4628      	mov	r0, r5
 80014b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014bc:	f000 b8dc 	b.w	8001678 <__malloc_unlock>
 80014c0:	42a3      	cmp	r3, r4
 80014c2:	d908      	bls.n	80014d6 <_free_r+0x42>
 80014c4:	6820      	ldr	r0, [r4, #0]
 80014c6:	1821      	adds	r1, r4, r0
 80014c8:	428b      	cmp	r3, r1
 80014ca:	bf01      	itttt	eq
 80014cc:	6819      	ldreq	r1, [r3, #0]
 80014ce:	685b      	ldreq	r3, [r3, #4]
 80014d0:	1809      	addeq	r1, r1, r0
 80014d2:	6021      	streq	r1, [r4, #0]
 80014d4:	e7ed      	b.n	80014b2 <_free_r+0x1e>
 80014d6:	461a      	mov	r2, r3
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	b10b      	cbz	r3, 80014e0 <_free_r+0x4c>
 80014dc:	42a3      	cmp	r3, r4
 80014de:	d9fa      	bls.n	80014d6 <_free_r+0x42>
 80014e0:	6811      	ldr	r1, [r2, #0]
 80014e2:	1850      	adds	r0, r2, r1
 80014e4:	42a0      	cmp	r0, r4
 80014e6:	d10b      	bne.n	8001500 <_free_r+0x6c>
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	4401      	add	r1, r0
 80014ec:	1850      	adds	r0, r2, r1
 80014ee:	4283      	cmp	r3, r0
 80014f0:	6011      	str	r1, [r2, #0]
 80014f2:	d1e0      	bne.n	80014b6 <_free_r+0x22>
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	6053      	str	r3, [r2, #4]
 80014fa:	4408      	add	r0, r1
 80014fc:	6010      	str	r0, [r2, #0]
 80014fe:	e7da      	b.n	80014b6 <_free_r+0x22>
 8001500:	d902      	bls.n	8001508 <_free_r+0x74>
 8001502:	230c      	movs	r3, #12
 8001504:	602b      	str	r3, [r5, #0]
 8001506:	e7d6      	b.n	80014b6 <_free_r+0x22>
 8001508:	6820      	ldr	r0, [r4, #0]
 800150a:	1821      	adds	r1, r4, r0
 800150c:	428b      	cmp	r3, r1
 800150e:	bf04      	itt	eq
 8001510:	6819      	ldreq	r1, [r3, #0]
 8001512:	685b      	ldreq	r3, [r3, #4]
 8001514:	6063      	str	r3, [r4, #4]
 8001516:	bf04      	itt	eq
 8001518:	1809      	addeq	r1, r1, r0
 800151a:	6021      	streq	r1, [r4, #0]
 800151c:	6054      	str	r4, [r2, #4]
 800151e:	e7ca      	b.n	80014b6 <_free_r+0x22>
 8001520:	bd38      	pop	{r3, r4, r5, pc}
 8001522:	bf00      	nop
 8001524:	20000230 	.word	0x20000230

08001528 <sbrk_aligned>:
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	4e0f      	ldr	r6, [pc, #60]	@ (8001568 <sbrk_aligned+0x40>)
 800152c:	460c      	mov	r4, r1
 800152e:	6831      	ldr	r1, [r6, #0]
 8001530:	4605      	mov	r5, r0
 8001532:	b911      	cbnz	r1, 800153a <sbrk_aligned+0x12>
 8001534:	f000 fba4 	bl	8001c80 <_sbrk_r>
 8001538:	6030      	str	r0, [r6, #0]
 800153a:	4621      	mov	r1, r4
 800153c:	4628      	mov	r0, r5
 800153e:	f000 fb9f 	bl	8001c80 <_sbrk_r>
 8001542:	1c43      	adds	r3, r0, #1
 8001544:	d103      	bne.n	800154e <sbrk_aligned+0x26>
 8001546:	f04f 34ff 	mov.w	r4, #4294967295
 800154a:	4620      	mov	r0, r4
 800154c:	bd70      	pop	{r4, r5, r6, pc}
 800154e:	1cc4      	adds	r4, r0, #3
 8001550:	f024 0403 	bic.w	r4, r4, #3
 8001554:	42a0      	cmp	r0, r4
 8001556:	d0f8      	beq.n	800154a <sbrk_aligned+0x22>
 8001558:	1a21      	subs	r1, r4, r0
 800155a:	4628      	mov	r0, r5
 800155c:	f000 fb90 	bl	8001c80 <_sbrk_r>
 8001560:	3001      	adds	r0, #1
 8001562:	d1f2      	bne.n	800154a <sbrk_aligned+0x22>
 8001564:	e7ef      	b.n	8001546 <sbrk_aligned+0x1e>
 8001566:	bf00      	nop
 8001568:	2000022c 	.word	0x2000022c

0800156c <_malloc_r>:
 800156c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001570:	1ccd      	adds	r5, r1, #3
 8001572:	f025 0503 	bic.w	r5, r5, #3
 8001576:	3508      	adds	r5, #8
 8001578:	2d0c      	cmp	r5, #12
 800157a:	bf38      	it	cc
 800157c:	250c      	movcc	r5, #12
 800157e:	2d00      	cmp	r5, #0
 8001580:	4606      	mov	r6, r0
 8001582:	db01      	blt.n	8001588 <_malloc_r+0x1c>
 8001584:	42a9      	cmp	r1, r5
 8001586:	d904      	bls.n	8001592 <_malloc_r+0x26>
 8001588:	230c      	movs	r3, #12
 800158a:	6033      	str	r3, [r6, #0]
 800158c:	2000      	movs	r0, #0
 800158e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001668 <_malloc_r+0xfc>
 8001596:	f000 f869 	bl	800166c <__malloc_lock>
 800159a:	f8d8 3000 	ldr.w	r3, [r8]
 800159e:	461c      	mov	r4, r3
 80015a0:	bb44      	cbnz	r4, 80015f4 <_malloc_r+0x88>
 80015a2:	4629      	mov	r1, r5
 80015a4:	4630      	mov	r0, r6
 80015a6:	f7ff ffbf 	bl	8001528 <sbrk_aligned>
 80015aa:	1c43      	adds	r3, r0, #1
 80015ac:	4604      	mov	r4, r0
 80015ae:	d158      	bne.n	8001662 <_malloc_r+0xf6>
 80015b0:	f8d8 4000 	ldr.w	r4, [r8]
 80015b4:	4627      	mov	r7, r4
 80015b6:	2f00      	cmp	r7, #0
 80015b8:	d143      	bne.n	8001642 <_malloc_r+0xd6>
 80015ba:	2c00      	cmp	r4, #0
 80015bc:	d04b      	beq.n	8001656 <_malloc_r+0xea>
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	4639      	mov	r1, r7
 80015c2:	4630      	mov	r0, r6
 80015c4:	eb04 0903 	add.w	r9, r4, r3
 80015c8:	f000 fb5a 	bl	8001c80 <_sbrk_r>
 80015cc:	4581      	cmp	r9, r0
 80015ce:	d142      	bne.n	8001656 <_malloc_r+0xea>
 80015d0:	6821      	ldr	r1, [r4, #0]
 80015d2:	1a6d      	subs	r5, r5, r1
 80015d4:	4629      	mov	r1, r5
 80015d6:	4630      	mov	r0, r6
 80015d8:	f7ff ffa6 	bl	8001528 <sbrk_aligned>
 80015dc:	3001      	adds	r0, #1
 80015de:	d03a      	beq.n	8001656 <_malloc_r+0xea>
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	442b      	add	r3, r5
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	f8d8 3000 	ldr.w	r3, [r8]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	bb62      	cbnz	r2, 8001648 <_malloc_r+0xdc>
 80015ee:	f8c8 7000 	str.w	r7, [r8]
 80015f2:	e00f      	b.n	8001614 <_malloc_r+0xa8>
 80015f4:	6822      	ldr	r2, [r4, #0]
 80015f6:	1b52      	subs	r2, r2, r5
 80015f8:	d420      	bmi.n	800163c <_malloc_r+0xd0>
 80015fa:	2a0b      	cmp	r2, #11
 80015fc:	d917      	bls.n	800162e <_malloc_r+0xc2>
 80015fe:	1961      	adds	r1, r4, r5
 8001600:	42a3      	cmp	r3, r4
 8001602:	6025      	str	r5, [r4, #0]
 8001604:	bf18      	it	ne
 8001606:	6059      	strne	r1, [r3, #4]
 8001608:	6863      	ldr	r3, [r4, #4]
 800160a:	bf08      	it	eq
 800160c:	f8c8 1000 	streq.w	r1, [r8]
 8001610:	5162      	str	r2, [r4, r5]
 8001612:	604b      	str	r3, [r1, #4]
 8001614:	4630      	mov	r0, r6
 8001616:	f000 f82f 	bl	8001678 <__malloc_unlock>
 800161a:	f104 000b 	add.w	r0, r4, #11
 800161e:	1d23      	adds	r3, r4, #4
 8001620:	f020 0007 	bic.w	r0, r0, #7
 8001624:	1ac2      	subs	r2, r0, r3
 8001626:	bf1c      	itt	ne
 8001628:	1a1b      	subne	r3, r3, r0
 800162a:	50a3      	strne	r3, [r4, r2]
 800162c:	e7af      	b.n	800158e <_malloc_r+0x22>
 800162e:	6862      	ldr	r2, [r4, #4]
 8001630:	42a3      	cmp	r3, r4
 8001632:	bf0c      	ite	eq
 8001634:	f8c8 2000 	streq.w	r2, [r8]
 8001638:	605a      	strne	r2, [r3, #4]
 800163a:	e7eb      	b.n	8001614 <_malloc_r+0xa8>
 800163c:	4623      	mov	r3, r4
 800163e:	6864      	ldr	r4, [r4, #4]
 8001640:	e7ae      	b.n	80015a0 <_malloc_r+0x34>
 8001642:	463c      	mov	r4, r7
 8001644:	687f      	ldr	r7, [r7, #4]
 8001646:	e7b6      	b.n	80015b6 <_malloc_r+0x4a>
 8001648:	461a      	mov	r2, r3
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	42a3      	cmp	r3, r4
 800164e:	d1fb      	bne.n	8001648 <_malloc_r+0xdc>
 8001650:	2300      	movs	r3, #0
 8001652:	6053      	str	r3, [r2, #4]
 8001654:	e7de      	b.n	8001614 <_malloc_r+0xa8>
 8001656:	230c      	movs	r3, #12
 8001658:	6033      	str	r3, [r6, #0]
 800165a:	4630      	mov	r0, r6
 800165c:	f000 f80c 	bl	8001678 <__malloc_unlock>
 8001660:	e794      	b.n	800158c <_malloc_r+0x20>
 8001662:	6005      	str	r5, [r0, #0]
 8001664:	e7d6      	b.n	8001614 <_malloc_r+0xa8>
 8001666:	bf00      	nop
 8001668:	20000230 	.word	0x20000230

0800166c <__malloc_lock>:
 800166c:	4801      	ldr	r0, [pc, #4]	@ (8001674 <__malloc_lock+0x8>)
 800166e:	f7ff bf0f 	b.w	8001490 <__retarget_lock_acquire_recursive>
 8001672:	bf00      	nop
 8001674:	20000228 	.word	0x20000228

08001678 <__malloc_unlock>:
 8001678:	4801      	ldr	r0, [pc, #4]	@ (8001680 <__malloc_unlock+0x8>)
 800167a:	f7ff bf0a 	b.w	8001492 <__retarget_lock_release_recursive>
 800167e:	bf00      	nop
 8001680:	20000228 	.word	0x20000228

08001684 <__ssputs_r>:
 8001684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001688:	688e      	ldr	r6, [r1, #8]
 800168a:	461f      	mov	r7, r3
 800168c:	42be      	cmp	r6, r7
 800168e:	680b      	ldr	r3, [r1, #0]
 8001690:	4682      	mov	sl, r0
 8001692:	460c      	mov	r4, r1
 8001694:	4690      	mov	r8, r2
 8001696:	d82d      	bhi.n	80016f4 <__ssputs_r+0x70>
 8001698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800169c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80016a0:	d026      	beq.n	80016f0 <__ssputs_r+0x6c>
 80016a2:	6965      	ldr	r5, [r4, #20]
 80016a4:	6909      	ldr	r1, [r1, #16]
 80016a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016aa:	eba3 0901 	sub.w	r9, r3, r1
 80016ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80016b2:	1c7b      	adds	r3, r7, #1
 80016b4:	444b      	add	r3, r9
 80016b6:	106d      	asrs	r5, r5, #1
 80016b8:	429d      	cmp	r5, r3
 80016ba:	bf38      	it	cc
 80016bc:	461d      	movcc	r5, r3
 80016be:	0553      	lsls	r3, r2, #21
 80016c0:	d527      	bpl.n	8001712 <__ssputs_r+0x8e>
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7ff ff52 	bl	800156c <_malloc_r>
 80016c8:	4606      	mov	r6, r0
 80016ca:	b360      	cbz	r0, 8001726 <__ssputs_r+0xa2>
 80016cc:	6921      	ldr	r1, [r4, #16]
 80016ce:	464a      	mov	r2, r9
 80016d0:	f000 fae6 	bl	8001ca0 <memcpy>
 80016d4:	89a3      	ldrh	r3, [r4, #12]
 80016d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80016da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016de:	81a3      	strh	r3, [r4, #12]
 80016e0:	6126      	str	r6, [r4, #16]
 80016e2:	6165      	str	r5, [r4, #20]
 80016e4:	444e      	add	r6, r9
 80016e6:	eba5 0509 	sub.w	r5, r5, r9
 80016ea:	6026      	str	r6, [r4, #0]
 80016ec:	60a5      	str	r5, [r4, #8]
 80016ee:	463e      	mov	r6, r7
 80016f0:	42be      	cmp	r6, r7
 80016f2:	d900      	bls.n	80016f6 <__ssputs_r+0x72>
 80016f4:	463e      	mov	r6, r7
 80016f6:	6820      	ldr	r0, [r4, #0]
 80016f8:	4632      	mov	r2, r6
 80016fa:	4641      	mov	r1, r8
 80016fc:	f000 faa6 	bl	8001c4c <memmove>
 8001700:	68a3      	ldr	r3, [r4, #8]
 8001702:	1b9b      	subs	r3, r3, r6
 8001704:	60a3      	str	r3, [r4, #8]
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	4433      	add	r3, r6
 800170a:	6023      	str	r3, [r4, #0]
 800170c:	2000      	movs	r0, #0
 800170e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001712:	462a      	mov	r2, r5
 8001714:	f000 fad2 	bl	8001cbc <_realloc_r>
 8001718:	4606      	mov	r6, r0
 800171a:	2800      	cmp	r0, #0
 800171c:	d1e0      	bne.n	80016e0 <__ssputs_r+0x5c>
 800171e:	6921      	ldr	r1, [r4, #16]
 8001720:	4650      	mov	r0, sl
 8001722:	f7ff feb7 	bl	8001494 <_free_r>
 8001726:	230c      	movs	r3, #12
 8001728:	f8ca 3000 	str.w	r3, [sl]
 800172c:	89a3      	ldrh	r3, [r4, #12]
 800172e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001732:	81a3      	strh	r3, [r4, #12]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	e7e9      	b.n	800170e <__ssputs_r+0x8a>
	...

0800173c <_svfiprintf_r>:
 800173c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001740:	4698      	mov	r8, r3
 8001742:	898b      	ldrh	r3, [r1, #12]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	b09d      	sub	sp, #116	@ 0x74
 8001748:	4607      	mov	r7, r0
 800174a:	460d      	mov	r5, r1
 800174c:	4614      	mov	r4, r2
 800174e:	d510      	bpl.n	8001772 <_svfiprintf_r+0x36>
 8001750:	690b      	ldr	r3, [r1, #16]
 8001752:	b973      	cbnz	r3, 8001772 <_svfiprintf_r+0x36>
 8001754:	2140      	movs	r1, #64	@ 0x40
 8001756:	f7ff ff09 	bl	800156c <_malloc_r>
 800175a:	6028      	str	r0, [r5, #0]
 800175c:	6128      	str	r0, [r5, #16]
 800175e:	b930      	cbnz	r0, 800176e <_svfiprintf_r+0x32>
 8001760:	230c      	movs	r3, #12
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	b01d      	add	sp, #116	@ 0x74
 800176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800176e:	2340      	movs	r3, #64	@ 0x40
 8001770:	616b      	str	r3, [r5, #20]
 8001772:	2300      	movs	r3, #0
 8001774:	9309      	str	r3, [sp, #36]	@ 0x24
 8001776:	2320      	movs	r3, #32
 8001778:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800177c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001780:	2330      	movs	r3, #48	@ 0x30
 8001782:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001920 <_svfiprintf_r+0x1e4>
 8001786:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800178a:	f04f 0901 	mov.w	r9, #1
 800178e:	4623      	mov	r3, r4
 8001790:	469a      	mov	sl, r3
 8001792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001796:	b10a      	cbz	r2, 800179c <_svfiprintf_r+0x60>
 8001798:	2a25      	cmp	r2, #37	@ 0x25
 800179a:	d1f9      	bne.n	8001790 <_svfiprintf_r+0x54>
 800179c:	ebba 0b04 	subs.w	fp, sl, r4
 80017a0:	d00b      	beq.n	80017ba <_svfiprintf_r+0x7e>
 80017a2:	465b      	mov	r3, fp
 80017a4:	4622      	mov	r2, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	4638      	mov	r0, r7
 80017aa:	f7ff ff6b 	bl	8001684 <__ssputs_r>
 80017ae:	3001      	adds	r0, #1
 80017b0:	f000 80a7 	beq.w	8001902 <_svfiprintf_r+0x1c6>
 80017b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017b6:	445a      	add	r2, fp
 80017b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80017ba:	f89a 3000 	ldrb.w	r3, [sl]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 809f 	beq.w	8001902 <_svfiprintf_r+0x1c6>
 80017c4:	2300      	movs	r3, #0
 80017c6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017ce:	f10a 0a01 	add.w	sl, sl, #1
 80017d2:	9304      	str	r3, [sp, #16]
 80017d4:	9307      	str	r3, [sp, #28]
 80017d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017da:	931a      	str	r3, [sp, #104]	@ 0x68
 80017dc:	4654      	mov	r4, sl
 80017de:	2205      	movs	r2, #5
 80017e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017e4:	484e      	ldr	r0, [pc, #312]	@ (8001920 <_svfiprintf_r+0x1e4>)
 80017e6:	f7fe fcfb 	bl	80001e0 <memchr>
 80017ea:	9a04      	ldr	r2, [sp, #16]
 80017ec:	b9d8      	cbnz	r0, 8001826 <_svfiprintf_r+0xea>
 80017ee:	06d0      	lsls	r0, r2, #27
 80017f0:	bf44      	itt	mi
 80017f2:	2320      	movmi	r3, #32
 80017f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017f8:	0711      	lsls	r1, r2, #28
 80017fa:	bf44      	itt	mi
 80017fc:	232b      	movmi	r3, #43	@ 0x2b
 80017fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001802:	f89a 3000 	ldrb.w	r3, [sl]
 8001806:	2b2a      	cmp	r3, #42	@ 0x2a
 8001808:	d015      	beq.n	8001836 <_svfiprintf_r+0xfa>
 800180a:	9a07      	ldr	r2, [sp, #28]
 800180c:	4654      	mov	r4, sl
 800180e:	2000      	movs	r0, #0
 8001810:	f04f 0c0a 	mov.w	ip, #10
 8001814:	4621      	mov	r1, r4
 8001816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800181a:	3b30      	subs	r3, #48	@ 0x30
 800181c:	2b09      	cmp	r3, #9
 800181e:	d94b      	bls.n	80018b8 <_svfiprintf_r+0x17c>
 8001820:	b1b0      	cbz	r0, 8001850 <_svfiprintf_r+0x114>
 8001822:	9207      	str	r2, [sp, #28]
 8001824:	e014      	b.n	8001850 <_svfiprintf_r+0x114>
 8001826:	eba0 0308 	sub.w	r3, r0, r8
 800182a:	fa09 f303 	lsl.w	r3, r9, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	9304      	str	r3, [sp, #16]
 8001832:	46a2      	mov	sl, r4
 8001834:	e7d2      	b.n	80017dc <_svfiprintf_r+0xa0>
 8001836:	9b03      	ldr	r3, [sp, #12]
 8001838:	1d19      	adds	r1, r3, #4
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	9103      	str	r1, [sp, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	bfbb      	ittet	lt
 8001842:	425b      	neglt	r3, r3
 8001844:	f042 0202 	orrlt.w	r2, r2, #2
 8001848:	9307      	strge	r3, [sp, #28]
 800184a:	9307      	strlt	r3, [sp, #28]
 800184c:	bfb8      	it	lt
 800184e:	9204      	strlt	r2, [sp, #16]
 8001850:	7823      	ldrb	r3, [r4, #0]
 8001852:	2b2e      	cmp	r3, #46	@ 0x2e
 8001854:	d10a      	bne.n	800186c <_svfiprintf_r+0x130>
 8001856:	7863      	ldrb	r3, [r4, #1]
 8001858:	2b2a      	cmp	r3, #42	@ 0x2a
 800185a:	d132      	bne.n	80018c2 <_svfiprintf_r+0x186>
 800185c:	9b03      	ldr	r3, [sp, #12]
 800185e:	1d1a      	adds	r2, r3, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	9203      	str	r2, [sp, #12]
 8001864:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001868:	3402      	adds	r4, #2
 800186a:	9305      	str	r3, [sp, #20]
 800186c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001930 <_svfiprintf_r+0x1f4>
 8001870:	7821      	ldrb	r1, [r4, #0]
 8001872:	2203      	movs	r2, #3
 8001874:	4650      	mov	r0, sl
 8001876:	f7fe fcb3 	bl	80001e0 <memchr>
 800187a:	b138      	cbz	r0, 800188c <_svfiprintf_r+0x150>
 800187c:	9b04      	ldr	r3, [sp, #16]
 800187e:	eba0 000a 	sub.w	r0, r0, sl
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	4082      	lsls	r2, r0
 8001886:	4313      	orrs	r3, r2
 8001888:	3401      	adds	r4, #1
 800188a:	9304      	str	r3, [sp, #16]
 800188c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001890:	4824      	ldr	r0, [pc, #144]	@ (8001924 <_svfiprintf_r+0x1e8>)
 8001892:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001896:	2206      	movs	r2, #6
 8001898:	f7fe fca2 	bl	80001e0 <memchr>
 800189c:	2800      	cmp	r0, #0
 800189e:	d036      	beq.n	800190e <_svfiprintf_r+0x1d2>
 80018a0:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <_svfiprintf_r+0x1ec>)
 80018a2:	bb1b      	cbnz	r3, 80018ec <_svfiprintf_r+0x1b0>
 80018a4:	9b03      	ldr	r3, [sp, #12]
 80018a6:	3307      	adds	r3, #7
 80018a8:	f023 0307 	bic.w	r3, r3, #7
 80018ac:	3308      	adds	r3, #8
 80018ae:	9303      	str	r3, [sp, #12]
 80018b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80018b2:	4433      	add	r3, r6
 80018b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80018b6:	e76a      	b.n	800178e <_svfiprintf_r+0x52>
 80018b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80018bc:	460c      	mov	r4, r1
 80018be:	2001      	movs	r0, #1
 80018c0:	e7a8      	b.n	8001814 <_svfiprintf_r+0xd8>
 80018c2:	2300      	movs	r3, #0
 80018c4:	3401      	adds	r4, #1
 80018c6:	9305      	str	r3, [sp, #20]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 0c0a 	mov.w	ip, #10
 80018ce:	4620      	mov	r0, r4
 80018d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018d4:	3a30      	subs	r2, #48	@ 0x30
 80018d6:	2a09      	cmp	r2, #9
 80018d8:	d903      	bls.n	80018e2 <_svfiprintf_r+0x1a6>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0c6      	beq.n	800186c <_svfiprintf_r+0x130>
 80018de:	9105      	str	r1, [sp, #20]
 80018e0:	e7c4      	b.n	800186c <_svfiprintf_r+0x130>
 80018e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80018e6:	4604      	mov	r4, r0
 80018e8:	2301      	movs	r3, #1
 80018ea:	e7f0      	b.n	80018ce <_svfiprintf_r+0x192>
 80018ec:	ab03      	add	r3, sp, #12
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	462a      	mov	r2, r5
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <_svfiprintf_r+0x1f0>)
 80018f4:	a904      	add	r1, sp, #16
 80018f6:	4638      	mov	r0, r7
 80018f8:	f3af 8000 	nop.w
 80018fc:	1c42      	adds	r2, r0, #1
 80018fe:	4606      	mov	r6, r0
 8001900:	d1d6      	bne.n	80018b0 <_svfiprintf_r+0x174>
 8001902:	89ab      	ldrh	r3, [r5, #12]
 8001904:	065b      	lsls	r3, r3, #25
 8001906:	f53f af2d 	bmi.w	8001764 <_svfiprintf_r+0x28>
 800190a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800190c:	e72c      	b.n	8001768 <_svfiprintf_r+0x2c>
 800190e:	ab03      	add	r3, sp, #12
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	462a      	mov	r2, r5
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <_svfiprintf_r+0x1f0>)
 8001916:	a904      	add	r1, sp, #16
 8001918:	4638      	mov	r0, r7
 800191a:	f000 f879 	bl	8001a10 <_printf_i>
 800191e:	e7ed      	b.n	80018fc <_svfiprintf_r+0x1c0>
 8001920:	08002817 	.word	0x08002817
 8001924:	08002821 	.word	0x08002821
 8001928:	00000000 	.word	0x00000000
 800192c:	08001685 	.word	0x08001685
 8001930:	0800281d 	.word	0x0800281d

08001934 <_printf_common>:
 8001934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001938:	4616      	mov	r6, r2
 800193a:	4698      	mov	r8, r3
 800193c:	688a      	ldr	r2, [r1, #8]
 800193e:	690b      	ldr	r3, [r1, #16]
 8001940:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001944:	4293      	cmp	r3, r2
 8001946:	bfb8      	it	lt
 8001948:	4613      	movlt	r3, r2
 800194a:	6033      	str	r3, [r6, #0]
 800194c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001950:	4607      	mov	r7, r0
 8001952:	460c      	mov	r4, r1
 8001954:	b10a      	cbz	r2, 800195a <_printf_common+0x26>
 8001956:	3301      	adds	r3, #1
 8001958:	6033      	str	r3, [r6, #0]
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	0699      	lsls	r1, r3, #26
 800195e:	bf42      	ittt	mi
 8001960:	6833      	ldrmi	r3, [r6, #0]
 8001962:	3302      	addmi	r3, #2
 8001964:	6033      	strmi	r3, [r6, #0]
 8001966:	6825      	ldr	r5, [r4, #0]
 8001968:	f015 0506 	ands.w	r5, r5, #6
 800196c:	d106      	bne.n	800197c <_printf_common+0x48>
 800196e:	f104 0a19 	add.w	sl, r4, #25
 8001972:	68e3      	ldr	r3, [r4, #12]
 8001974:	6832      	ldr	r2, [r6, #0]
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	42ab      	cmp	r3, r5
 800197a:	dc26      	bgt.n	80019ca <_printf_common+0x96>
 800197c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	3b00      	subs	r3, #0
 8001984:	bf18      	it	ne
 8001986:	2301      	movne	r3, #1
 8001988:	0692      	lsls	r2, r2, #26
 800198a:	d42b      	bmi.n	80019e4 <_printf_common+0xb0>
 800198c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001990:	4641      	mov	r1, r8
 8001992:	4638      	mov	r0, r7
 8001994:	47c8      	blx	r9
 8001996:	3001      	adds	r0, #1
 8001998:	d01e      	beq.n	80019d8 <_printf_common+0xa4>
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	6922      	ldr	r2, [r4, #16]
 800199e:	f003 0306 	and.w	r3, r3, #6
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf02      	ittt	eq
 80019a6:	68e5      	ldreq	r5, [r4, #12]
 80019a8:	6833      	ldreq	r3, [r6, #0]
 80019aa:	1aed      	subeq	r5, r5, r3
 80019ac:	68a3      	ldr	r3, [r4, #8]
 80019ae:	bf0c      	ite	eq
 80019b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019b4:	2500      	movne	r5, #0
 80019b6:	4293      	cmp	r3, r2
 80019b8:	bfc4      	itt	gt
 80019ba:	1a9b      	subgt	r3, r3, r2
 80019bc:	18ed      	addgt	r5, r5, r3
 80019be:	2600      	movs	r6, #0
 80019c0:	341a      	adds	r4, #26
 80019c2:	42b5      	cmp	r5, r6
 80019c4:	d11a      	bne.n	80019fc <_printf_common+0xc8>
 80019c6:	2000      	movs	r0, #0
 80019c8:	e008      	b.n	80019dc <_printf_common+0xa8>
 80019ca:	2301      	movs	r3, #1
 80019cc:	4652      	mov	r2, sl
 80019ce:	4641      	mov	r1, r8
 80019d0:	4638      	mov	r0, r7
 80019d2:	47c8      	blx	r9
 80019d4:	3001      	adds	r0, #1
 80019d6:	d103      	bne.n	80019e0 <_printf_common+0xac>
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e0:	3501      	adds	r5, #1
 80019e2:	e7c6      	b.n	8001972 <_printf_common+0x3e>
 80019e4:	18e1      	adds	r1, r4, r3
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	2030      	movs	r0, #48	@ 0x30
 80019ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80019ee:	4422      	add	r2, r4
 80019f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80019f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80019f8:	3302      	adds	r3, #2
 80019fa:	e7c7      	b.n	800198c <_printf_common+0x58>
 80019fc:	2301      	movs	r3, #1
 80019fe:	4622      	mov	r2, r4
 8001a00:	4641      	mov	r1, r8
 8001a02:	4638      	mov	r0, r7
 8001a04:	47c8      	blx	r9
 8001a06:	3001      	adds	r0, #1
 8001a08:	d0e6      	beq.n	80019d8 <_printf_common+0xa4>
 8001a0a:	3601      	adds	r6, #1
 8001a0c:	e7d9      	b.n	80019c2 <_printf_common+0x8e>
	...

08001a10 <_printf_i>:
 8001a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a14:	7e0f      	ldrb	r7, [r1, #24]
 8001a16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a18:	2f78      	cmp	r7, #120	@ 0x78
 8001a1a:	4691      	mov	r9, r2
 8001a1c:	4680      	mov	r8, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	469a      	mov	sl, r3
 8001a22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a26:	d807      	bhi.n	8001a38 <_printf_i+0x28>
 8001a28:	2f62      	cmp	r7, #98	@ 0x62
 8001a2a:	d80a      	bhi.n	8001a42 <_printf_i+0x32>
 8001a2c:	2f00      	cmp	r7, #0
 8001a2e:	f000 80d1 	beq.w	8001bd4 <_printf_i+0x1c4>
 8001a32:	2f58      	cmp	r7, #88	@ 0x58
 8001a34:	f000 80b8 	beq.w	8001ba8 <_printf_i+0x198>
 8001a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a40:	e03a      	b.n	8001ab8 <_printf_i+0xa8>
 8001a42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a46:	2b15      	cmp	r3, #21
 8001a48:	d8f6      	bhi.n	8001a38 <_printf_i+0x28>
 8001a4a:	a101      	add	r1, pc, #4	@ (adr r1, 8001a50 <_printf_i+0x40>)
 8001a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a50:	08001aa9 	.word	0x08001aa9
 8001a54:	08001abd 	.word	0x08001abd
 8001a58:	08001a39 	.word	0x08001a39
 8001a5c:	08001a39 	.word	0x08001a39
 8001a60:	08001a39 	.word	0x08001a39
 8001a64:	08001a39 	.word	0x08001a39
 8001a68:	08001abd 	.word	0x08001abd
 8001a6c:	08001a39 	.word	0x08001a39
 8001a70:	08001a39 	.word	0x08001a39
 8001a74:	08001a39 	.word	0x08001a39
 8001a78:	08001a39 	.word	0x08001a39
 8001a7c:	08001bbb 	.word	0x08001bbb
 8001a80:	08001ae7 	.word	0x08001ae7
 8001a84:	08001b75 	.word	0x08001b75
 8001a88:	08001a39 	.word	0x08001a39
 8001a8c:	08001a39 	.word	0x08001a39
 8001a90:	08001bdd 	.word	0x08001bdd
 8001a94:	08001a39 	.word	0x08001a39
 8001a98:	08001ae7 	.word	0x08001ae7
 8001a9c:	08001a39 	.word	0x08001a39
 8001aa0:	08001a39 	.word	0x08001a39
 8001aa4:	08001b7d 	.word	0x08001b7d
 8001aa8:	6833      	ldr	r3, [r6, #0]
 8001aaa:	1d1a      	adds	r2, r3, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6032      	str	r2, [r6, #0]
 8001ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ab4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e09c      	b.n	8001bf6 <_printf_i+0x1e6>
 8001abc:	6833      	ldr	r3, [r6, #0]
 8001abe:	6820      	ldr	r0, [r4, #0]
 8001ac0:	1d19      	adds	r1, r3, #4
 8001ac2:	6031      	str	r1, [r6, #0]
 8001ac4:	0606      	lsls	r6, r0, #24
 8001ac6:	d501      	bpl.n	8001acc <_printf_i+0xbc>
 8001ac8:	681d      	ldr	r5, [r3, #0]
 8001aca:	e003      	b.n	8001ad4 <_printf_i+0xc4>
 8001acc:	0645      	lsls	r5, r0, #25
 8001ace:	d5fb      	bpl.n	8001ac8 <_printf_i+0xb8>
 8001ad0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ad4:	2d00      	cmp	r5, #0
 8001ad6:	da03      	bge.n	8001ae0 <_printf_i+0xd0>
 8001ad8:	232d      	movs	r3, #45	@ 0x2d
 8001ada:	426d      	negs	r5, r5
 8001adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ae0:	4858      	ldr	r0, [pc, #352]	@ (8001c44 <_printf_i+0x234>)
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	e011      	b.n	8001b0a <_printf_i+0xfa>
 8001ae6:	6821      	ldr	r1, [r4, #0]
 8001ae8:	6833      	ldr	r3, [r6, #0]
 8001aea:	0608      	lsls	r0, r1, #24
 8001aec:	f853 5b04 	ldr.w	r5, [r3], #4
 8001af0:	d402      	bmi.n	8001af8 <_printf_i+0xe8>
 8001af2:	0649      	lsls	r1, r1, #25
 8001af4:	bf48      	it	mi
 8001af6:	b2ad      	uxthmi	r5, r5
 8001af8:	2f6f      	cmp	r7, #111	@ 0x6f
 8001afa:	4852      	ldr	r0, [pc, #328]	@ (8001c44 <_printf_i+0x234>)
 8001afc:	6033      	str	r3, [r6, #0]
 8001afe:	bf14      	ite	ne
 8001b00:	230a      	movne	r3, #10
 8001b02:	2308      	moveq	r3, #8
 8001b04:	2100      	movs	r1, #0
 8001b06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b0a:	6866      	ldr	r6, [r4, #4]
 8001b0c:	60a6      	str	r6, [r4, #8]
 8001b0e:	2e00      	cmp	r6, #0
 8001b10:	db05      	blt.n	8001b1e <_printf_i+0x10e>
 8001b12:	6821      	ldr	r1, [r4, #0]
 8001b14:	432e      	orrs	r6, r5
 8001b16:	f021 0104 	bic.w	r1, r1, #4
 8001b1a:	6021      	str	r1, [r4, #0]
 8001b1c:	d04b      	beq.n	8001bb6 <_printf_i+0x1a6>
 8001b1e:	4616      	mov	r6, r2
 8001b20:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b24:	fb03 5711 	mls	r7, r3, r1, r5
 8001b28:	5dc7      	ldrb	r7, [r0, r7]
 8001b2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b2e:	462f      	mov	r7, r5
 8001b30:	42bb      	cmp	r3, r7
 8001b32:	460d      	mov	r5, r1
 8001b34:	d9f4      	bls.n	8001b20 <_printf_i+0x110>
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d10b      	bne.n	8001b52 <_printf_i+0x142>
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	07df      	lsls	r7, r3, #31
 8001b3e:	d508      	bpl.n	8001b52 <_printf_i+0x142>
 8001b40:	6923      	ldr	r3, [r4, #16]
 8001b42:	6861      	ldr	r1, [r4, #4]
 8001b44:	4299      	cmp	r1, r3
 8001b46:	bfde      	ittt	le
 8001b48:	2330      	movle	r3, #48	@ 0x30
 8001b4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b52:	1b92      	subs	r2, r2, r6
 8001b54:	6122      	str	r2, [r4, #16]
 8001b56:	f8cd a000 	str.w	sl, [sp]
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	aa03      	add	r2, sp, #12
 8001b5e:	4621      	mov	r1, r4
 8001b60:	4640      	mov	r0, r8
 8001b62:	f7ff fee7 	bl	8001934 <_printf_common>
 8001b66:	3001      	adds	r0, #1
 8001b68:	d14a      	bne.n	8001c00 <_printf_i+0x1f0>
 8001b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6e:	b004      	add	sp, #16
 8001b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	f043 0320 	orr.w	r3, r3, #32
 8001b7a:	6023      	str	r3, [r4, #0]
 8001b7c:	4832      	ldr	r0, [pc, #200]	@ (8001c48 <_printf_i+0x238>)
 8001b7e:	2778      	movs	r7, #120	@ 0x78
 8001b80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	6831      	ldr	r1, [r6, #0]
 8001b88:	061f      	lsls	r7, r3, #24
 8001b8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001b8e:	d402      	bmi.n	8001b96 <_printf_i+0x186>
 8001b90:	065f      	lsls	r7, r3, #25
 8001b92:	bf48      	it	mi
 8001b94:	b2ad      	uxthmi	r5, r5
 8001b96:	6031      	str	r1, [r6, #0]
 8001b98:	07d9      	lsls	r1, r3, #31
 8001b9a:	bf44      	itt	mi
 8001b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8001ba0:	6023      	strmi	r3, [r4, #0]
 8001ba2:	b11d      	cbz	r5, 8001bac <_printf_i+0x19c>
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	e7ad      	b.n	8001b04 <_printf_i+0xf4>
 8001ba8:	4826      	ldr	r0, [pc, #152]	@ (8001c44 <_printf_i+0x234>)
 8001baa:	e7e9      	b.n	8001b80 <_printf_i+0x170>
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	f023 0320 	bic.w	r3, r3, #32
 8001bb2:	6023      	str	r3, [r4, #0]
 8001bb4:	e7f6      	b.n	8001ba4 <_printf_i+0x194>
 8001bb6:	4616      	mov	r6, r2
 8001bb8:	e7bd      	b.n	8001b36 <_printf_i+0x126>
 8001bba:	6833      	ldr	r3, [r6, #0]
 8001bbc:	6825      	ldr	r5, [r4, #0]
 8001bbe:	6961      	ldr	r1, [r4, #20]
 8001bc0:	1d18      	adds	r0, r3, #4
 8001bc2:	6030      	str	r0, [r6, #0]
 8001bc4:	062e      	lsls	r6, r5, #24
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	d501      	bpl.n	8001bce <_printf_i+0x1be>
 8001bca:	6019      	str	r1, [r3, #0]
 8001bcc:	e002      	b.n	8001bd4 <_printf_i+0x1c4>
 8001bce:	0668      	lsls	r0, r5, #25
 8001bd0:	d5fb      	bpl.n	8001bca <_printf_i+0x1ba>
 8001bd2:	8019      	strh	r1, [r3, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6123      	str	r3, [r4, #16]
 8001bd8:	4616      	mov	r6, r2
 8001bda:	e7bc      	b.n	8001b56 <_printf_i+0x146>
 8001bdc:	6833      	ldr	r3, [r6, #0]
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	6032      	str	r2, [r6, #0]
 8001be2:	681e      	ldr	r6, [r3, #0]
 8001be4:	6862      	ldr	r2, [r4, #4]
 8001be6:	2100      	movs	r1, #0
 8001be8:	4630      	mov	r0, r6
 8001bea:	f7fe faf9 	bl	80001e0 <memchr>
 8001bee:	b108      	cbz	r0, 8001bf4 <_printf_i+0x1e4>
 8001bf0:	1b80      	subs	r0, r0, r6
 8001bf2:	6060      	str	r0, [r4, #4]
 8001bf4:	6863      	ldr	r3, [r4, #4]
 8001bf6:	6123      	str	r3, [r4, #16]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bfe:	e7aa      	b.n	8001b56 <_printf_i+0x146>
 8001c00:	6923      	ldr	r3, [r4, #16]
 8001c02:	4632      	mov	r2, r6
 8001c04:	4649      	mov	r1, r9
 8001c06:	4640      	mov	r0, r8
 8001c08:	47d0      	blx	sl
 8001c0a:	3001      	adds	r0, #1
 8001c0c:	d0ad      	beq.n	8001b6a <_printf_i+0x15a>
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	079b      	lsls	r3, r3, #30
 8001c12:	d413      	bmi.n	8001c3c <_printf_i+0x22c>
 8001c14:	68e0      	ldr	r0, [r4, #12]
 8001c16:	9b03      	ldr	r3, [sp, #12]
 8001c18:	4298      	cmp	r0, r3
 8001c1a:	bfb8      	it	lt
 8001c1c:	4618      	movlt	r0, r3
 8001c1e:	e7a6      	b.n	8001b6e <_printf_i+0x15e>
 8001c20:	2301      	movs	r3, #1
 8001c22:	4632      	mov	r2, r6
 8001c24:	4649      	mov	r1, r9
 8001c26:	4640      	mov	r0, r8
 8001c28:	47d0      	blx	sl
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	d09d      	beq.n	8001b6a <_printf_i+0x15a>
 8001c2e:	3501      	adds	r5, #1
 8001c30:	68e3      	ldr	r3, [r4, #12]
 8001c32:	9903      	ldr	r1, [sp, #12]
 8001c34:	1a5b      	subs	r3, r3, r1
 8001c36:	42ab      	cmp	r3, r5
 8001c38:	dcf2      	bgt.n	8001c20 <_printf_i+0x210>
 8001c3a:	e7eb      	b.n	8001c14 <_printf_i+0x204>
 8001c3c:	2500      	movs	r5, #0
 8001c3e:	f104 0619 	add.w	r6, r4, #25
 8001c42:	e7f5      	b.n	8001c30 <_printf_i+0x220>
 8001c44:	08002828 	.word	0x08002828
 8001c48:	08002839 	.word	0x08002839

08001c4c <memmove>:
 8001c4c:	4288      	cmp	r0, r1
 8001c4e:	b510      	push	{r4, lr}
 8001c50:	eb01 0402 	add.w	r4, r1, r2
 8001c54:	d902      	bls.n	8001c5c <memmove+0x10>
 8001c56:	4284      	cmp	r4, r0
 8001c58:	4623      	mov	r3, r4
 8001c5a:	d807      	bhi.n	8001c6c <memmove+0x20>
 8001c5c:	1e43      	subs	r3, r0, #1
 8001c5e:	42a1      	cmp	r1, r4
 8001c60:	d008      	beq.n	8001c74 <memmove+0x28>
 8001c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c6a:	e7f8      	b.n	8001c5e <memmove+0x12>
 8001c6c:	4402      	add	r2, r0
 8001c6e:	4601      	mov	r1, r0
 8001c70:	428a      	cmp	r2, r1
 8001c72:	d100      	bne.n	8001c76 <memmove+0x2a>
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c7e:	e7f7      	b.n	8001c70 <memmove+0x24>

08001c80 <_sbrk_r>:
 8001c80:	b538      	push	{r3, r4, r5, lr}
 8001c82:	4d06      	ldr	r5, [pc, #24]	@ (8001c9c <_sbrk_r+0x1c>)
 8001c84:	2300      	movs	r3, #0
 8001c86:	4604      	mov	r4, r0
 8001c88:	4608      	mov	r0, r1
 8001c8a:	602b      	str	r3, [r5, #0]
 8001c8c:	f7ff fa62 	bl	8001154 <_sbrk>
 8001c90:	1c43      	adds	r3, r0, #1
 8001c92:	d102      	bne.n	8001c9a <_sbrk_r+0x1a>
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	b103      	cbz	r3, 8001c9a <_sbrk_r+0x1a>
 8001c98:	6023      	str	r3, [r4, #0]
 8001c9a:	bd38      	pop	{r3, r4, r5, pc}
 8001c9c:	20000224 	.word	0x20000224

08001ca0 <memcpy>:
 8001ca0:	440a      	add	r2, r1
 8001ca2:	4291      	cmp	r1, r2
 8001ca4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001ca8:	d100      	bne.n	8001cac <memcpy+0xc>
 8001caa:	4770      	bx	lr
 8001cac:	b510      	push	{r4, lr}
 8001cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cb6:	4291      	cmp	r1, r2
 8001cb8:	d1f9      	bne.n	8001cae <memcpy+0xe>
 8001cba:	bd10      	pop	{r4, pc}

08001cbc <_realloc_r>:
 8001cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc0:	4607      	mov	r7, r0
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	b921      	cbnz	r1, 8001cd2 <_realloc_r+0x16>
 8001cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ccc:	4611      	mov	r1, r2
 8001cce:	f7ff bc4d 	b.w	800156c <_malloc_r>
 8001cd2:	b92a      	cbnz	r2, 8001ce0 <_realloc_r+0x24>
 8001cd4:	f7ff fbde 	bl	8001494 <_free_r>
 8001cd8:	4625      	mov	r5, r4
 8001cda:	4628      	mov	r0, r5
 8001cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ce0:	f000 f81a 	bl	8001d18 <_malloc_usable_size_r>
 8001ce4:	4284      	cmp	r4, r0
 8001ce6:	4606      	mov	r6, r0
 8001ce8:	d802      	bhi.n	8001cf0 <_realloc_r+0x34>
 8001cea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001cee:	d8f4      	bhi.n	8001cda <_realloc_r+0x1e>
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	f7ff fc3a 	bl	800156c <_malloc_r>
 8001cf8:	4680      	mov	r8, r0
 8001cfa:	b908      	cbnz	r0, 8001d00 <_realloc_r+0x44>
 8001cfc:	4645      	mov	r5, r8
 8001cfe:	e7ec      	b.n	8001cda <_realloc_r+0x1e>
 8001d00:	42b4      	cmp	r4, r6
 8001d02:	4622      	mov	r2, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	bf28      	it	cs
 8001d08:	4632      	movcs	r2, r6
 8001d0a:	f7ff ffc9 	bl	8001ca0 <memcpy>
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4638      	mov	r0, r7
 8001d12:	f7ff fbbf 	bl	8001494 <_free_r>
 8001d16:	e7f1      	b.n	8001cfc <_realloc_r+0x40>

08001d18 <_malloc_usable_size_r>:
 8001d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d1c:	1f18      	subs	r0, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bfbc      	itt	lt
 8001d22:	580b      	ldrlt	r3, [r1, r0]
 8001d24:	18c0      	addlt	r0, r0, r3
 8001d26:	4770      	bx	lr

08001d28 <log10f>:
 8001d28:	b508      	push	{r3, lr}
 8001d2a:	ed2d 8b02 	vpush	{d8}
 8001d2e:	eeb0 8a40 	vmov.f32	s16, s0
 8001d32:	f000 f88f 	bl	8001e54 <__ieee754_log10f>
 8001d36:	eeb4 8a48 	vcmp.f32	s16, s16
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d60f      	bvs.n	8001d60 <log10f+0x38>
 8001d40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	d80a      	bhi.n	8001d60 <log10f+0x38>
 8001d4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d52:	d108      	bne.n	8001d66 <log10f+0x3e>
 8001d54:	f7ff fb72 	bl	800143c <__errno>
 8001d58:	2322      	movs	r3, #34	@ 0x22
 8001d5a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001d7c <log10f+0x54>
 8001d5e:	6003      	str	r3, [r0, #0]
 8001d60:	ecbd 8b02 	vpop	{d8}
 8001d64:	bd08      	pop	{r3, pc}
 8001d66:	f7ff fb69 	bl	800143c <__errno>
 8001d6a:	ecbd 8b02 	vpop	{d8}
 8001d6e:	2321      	movs	r3, #33	@ 0x21
 8001d70:	6003      	str	r3, [r0, #0]
 8001d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d76:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <log10f+0x58>)
 8001d78:	f000 b866 	b.w	8001e48 <nanf>
 8001d7c:	ff800000 	.word	0xff800000
 8001d80:	0800281c 	.word	0x0800281c

08001d84 <powf>:
 8001d84:	b508      	push	{r3, lr}
 8001d86:	ed2d 8b04 	vpush	{d8-d9}
 8001d8a:	eeb0 8a60 	vmov.f32	s16, s1
 8001d8e:	eeb0 9a40 	vmov.f32	s18, s0
 8001d92:	f000 f8b7 	bl	8001f04 <__ieee754_powf>
 8001d96:	eeb4 8a48 	vcmp.f32	s16, s16
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	eef0 8a40 	vmov.f32	s17, s0
 8001da2:	d63e      	bvs.n	8001e22 <powf+0x9e>
 8001da4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	d112      	bne.n	8001dd4 <powf+0x50>
 8001dae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	d039      	beq.n	8001e2c <powf+0xa8>
 8001db8:	eeb0 0a48 	vmov.f32	s0, s16
 8001dbc:	f000 f839 	bl	8001e32 <finitef>
 8001dc0:	b378      	cbz	r0, 8001e22 <powf+0x9e>
 8001dc2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	d52a      	bpl.n	8001e22 <powf+0x9e>
 8001dcc:	f7ff fb36 	bl	800143c <__errno>
 8001dd0:	2322      	movs	r3, #34	@ 0x22
 8001dd2:	e014      	b.n	8001dfe <powf+0x7a>
 8001dd4:	f000 f82d 	bl	8001e32 <finitef>
 8001dd8:	b998      	cbnz	r0, 8001e02 <powf+0x7e>
 8001dda:	eeb0 0a49 	vmov.f32	s0, s18
 8001dde:	f000 f828 	bl	8001e32 <finitef>
 8001de2:	b170      	cbz	r0, 8001e02 <powf+0x7e>
 8001de4:	eeb0 0a48 	vmov.f32	s0, s16
 8001de8:	f000 f823 	bl	8001e32 <finitef>
 8001dec:	b148      	cbz	r0, 8001e02 <powf+0x7e>
 8001dee:	eef4 8a68 	vcmp.f32	s17, s17
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	d7e9      	bvc.n	8001dcc <powf+0x48>
 8001df8:	f7ff fb20 	bl	800143c <__errno>
 8001dfc:	2321      	movs	r3, #33	@ 0x21
 8001dfe:	6003      	str	r3, [r0, #0]
 8001e00:	e00f      	b.n	8001e22 <powf+0x9e>
 8001e02:	eef5 8a40 	vcmp.f32	s17, #0.0
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	d10a      	bne.n	8001e22 <powf+0x9e>
 8001e0c:	eeb0 0a49 	vmov.f32	s0, s18
 8001e10:	f000 f80f 	bl	8001e32 <finitef>
 8001e14:	b128      	cbz	r0, 8001e22 <powf+0x9e>
 8001e16:	eeb0 0a48 	vmov.f32	s0, s16
 8001e1a:	f000 f80a 	bl	8001e32 <finitef>
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d1d4      	bne.n	8001dcc <powf+0x48>
 8001e22:	eeb0 0a68 	vmov.f32	s0, s17
 8001e26:	ecbd 8b04 	vpop	{d8-d9}
 8001e2a:	bd08      	pop	{r3, pc}
 8001e2c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8001e30:	e7f7      	b.n	8001e22 <powf+0x9e>

08001e32 <finitef>:
 8001e32:	ee10 3a10 	vmov	r3, s0
 8001e36:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8001e3a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8001e3e:	bfac      	ite	ge
 8001e40:	2000      	movge	r0, #0
 8001e42:	2001      	movlt	r0, #1
 8001e44:	4770      	bx	lr
	...

08001e48 <nanf>:
 8001e48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8001e50 <nanf+0x8>
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	7fc00000 	.word	0x7fc00000

08001e54 <__ieee754_log10f>:
 8001e54:	b508      	push	{r3, lr}
 8001e56:	ee10 3a10 	vmov	r3, s0
 8001e5a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8001e5e:	ed2d 8b02 	vpush	{d8}
 8001e62:	d108      	bne.n	8001e76 <__ieee754_log10f+0x22>
 8001e64:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001eec <__ieee754_log10f+0x98>
 8001e68:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8001ef0 <__ieee754_log10f+0x9c>
 8001e6c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8001e70:	ecbd 8b02 	vpop	{d8}
 8001e74:	bd08      	pop	{r3, pc}
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	da02      	bge.n	8001e82 <__ieee754_log10f+0x2e>
 8001e7c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8001e80:	e7f2      	b.n	8001e68 <__ieee754_log10f+0x14>
 8001e82:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8001e86:	db02      	blt.n	8001e8e <__ieee754_log10f+0x3a>
 8001e88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8001e8c:	e7f0      	b.n	8001e70 <__ieee754_log10f+0x1c>
 8001e8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e92:	bfbf      	itttt	lt
 8001e94:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8001ef4 <__ieee754_log10f+0xa0>
 8001e98:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8001e9c:	f06f 0118 	mvnlt.w	r1, #24
 8001ea0:	ee17 2a90 	vmovlt	r2, s15
 8001ea4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8001ea8:	bfa8      	it	ge
 8001eaa:	2100      	movge	r1, #0
 8001eac:	3b7f      	subs	r3, #127	@ 0x7f
 8001eae:	440b      	add	r3, r1
 8001eb0:	0fd9      	lsrs	r1, r3, #31
 8001eb2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8001ebe:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8001ec2:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8001ec6:	ee00 3a10 	vmov	s0, r3
 8001eca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ece:	f000 fb7f 	bl	80025d0 <__ieee754_logf>
 8001ed2:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8001ef8 <__ieee754_log10f+0xa4>
 8001ed6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001eda:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8001efc <__ieee754_log10f+0xa8>
 8001ede:	eea8 0a27 	vfma.f32	s0, s16, s15
 8001ee2:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8001f00 <__ieee754_log10f+0xac>
 8001ee6:	eea8 0a27 	vfma.f32	s0, s16, s15
 8001eea:	e7c1      	b.n	8001e70 <__ieee754_log10f+0x1c>
 8001eec:	cc000000 	.word	0xcc000000
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	4c000000 	.word	0x4c000000
 8001ef8:	3ede5bd9 	.word	0x3ede5bd9
 8001efc:	355427db 	.word	0x355427db
 8001f00:	3e9a2080 	.word	0x3e9a2080

08001f04 <__ieee754_powf>:
 8001f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f08:	ee10 4a90 	vmov	r4, s1
 8001f0c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8001f10:	ed2d 8b02 	vpush	{d8}
 8001f14:	ee10 6a10 	vmov	r6, s0
 8001f18:	eeb0 8a40 	vmov.f32	s16, s0
 8001f1c:	eef0 8a60 	vmov.f32	s17, s1
 8001f20:	d10c      	bne.n	8001f3c <__ieee754_powf+0x38>
 8001f22:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8001f26:	0076      	lsls	r6, r6, #1
 8001f28:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8001f2c:	f240 8274 	bls.w	8002418 <__ieee754_powf+0x514>
 8001f30:	ee38 0a28 	vadd.f32	s0, s16, s17
 8001f34:	ecbd 8b02 	vpop	{d8}
 8001f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f3c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8001f40:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8001f44:	d802      	bhi.n	8001f4c <__ieee754_powf+0x48>
 8001f46:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001f4a:	d908      	bls.n	8001f5e <__ieee754_powf+0x5a>
 8001f4c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8001f50:	d1ee      	bne.n	8001f30 <__ieee754_powf+0x2c>
 8001f52:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8001f56:	0064      	lsls	r4, r4, #1
 8001f58:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8001f5c:	e7e6      	b.n	8001f2c <__ieee754_powf+0x28>
 8001f5e:	2e00      	cmp	r6, #0
 8001f60:	da1f      	bge.n	8001fa2 <__ieee754_powf+0x9e>
 8001f62:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8001f66:	f080 8260 	bcs.w	800242a <__ieee754_powf+0x526>
 8001f6a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001f6e:	d32f      	bcc.n	8001fd0 <__ieee754_powf+0xcc>
 8001f70:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8001f74:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8001f78:	fa49 f503 	asr.w	r5, r9, r3
 8001f7c:	fa05 f303 	lsl.w	r3, r5, r3
 8001f80:	454b      	cmp	r3, r9
 8001f82:	d123      	bne.n	8001fcc <__ieee754_powf+0xc8>
 8001f84:	f005 0501 	and.w	r5, r5, #1
 8001f88:	f1c5 0502 	rsb	r5, r5, #2
 8001f8c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001f90:	d11f      	bne.n	8001fd2 <__ieee754_powf+0xce>
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	f280 8246 	bge.w	8002424 <__ieee754_powf+0x520>
 8001f98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001f9c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8001fa0:	e7c8      	b.n	8001f34 <__ieee754_powf+0x30>
 8001fa2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001fa6:	d111      	bne.n	8001fcc <__ieee754_powf+0xc8>
 8001fa8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8001fac:	f000 8234 	beq.w	8002418 <__ieee754_powf+0x514>
 8001fb0:	d906      	bls.n	8001fc0 <__ieee754_powf+0xbc>
 8001fb2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80022c8 <__ieee754_powf+0x3c4>
 8001fb6:	2c00      	cmp	r4, #0
 8001fb8:	bfa8      	it	ge
 8001fba:	eeb0 0a68 	vmovge.f32	s0, s17
 8001fbe:	e7b9      	b.n	8001f34 <__ieee754_powf+0x30>
 8001fc0:	2c00      	cmp	r4, #0
 8001fc2:	f280 822c 	bge.w	800241e <__ieee754_powf+0x51a>
 8001fc6:	eeb1 0a68 	vneg.f32	s0, s17
 8001fca:	e7b3      	b.n	8001f34 <__ieee754_powf+0x30>
 8001fcc:	2500      	movs	r5, #0
 8001fce:	e7dd      	b.n	8001f8c <__ieee754_powf+0x88>
 8001fd0:	2500      	movs	r5, #0
 8001fd2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8001fd6:	d102      	bne.n	8001fde <__ieee754_powf+0xda>
 8001fd8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8001fdc:	e7aa      	b.n	8001f34 <__ieee754_powf+0x30>
 8001fde:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8001fe2:	f040 8227 	bne.w	8002434 <__ieee754_powf+0x530>
 8001fe6:	2e00      	cmp	r6, #0
 8001fe8:	f2c0 8224 	blt.w	8002434 <__ieee754_powf+0x530>
 8001fec:	eeb0 0a48 	vmov.f32	s0, s16
 8001ff0:	ecbd 8b02 	vpop	{d8}
 8001ff4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ff8:	f000 bae6 	b.w	80025c8 <__ieee754_sqrtf>
 8001ffc:	2d01      	cmp	r5, #1
 8001ffe:	d199      	bne.n	8001f34 <__ieee754_powf+0x30>
 8002000:	eeb1 0a40 	vneg.f32	s0, s0
 8002004:	e796      	b.n	8001f34 <__ieee754_powf+0x30>
 8002006:	0ff0      	lsrs	r0, r6, #31
 8002008:	3801      	subs	r0, #1
 800200a:	ea55 0300 	orrs.w	r3, r5, r0
 800200e:	d104      	bne.n	800201a <__ieee754_powf+0x116>
 8002010:	ee38 8a48 	vsub.f32	s16, s16, s16
 8002014:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002018:	e78c      	b.n	8001f34 <__ieee754_powf+0x30>
 800201a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800201e:	d96d      	bls.n	80020fc <__ieee754_powf+0x1f8>
 8002020:	4baa      	ldr	r3, [pc, #680]	@ (80022cc <__ieee754_powf+0x3c8>)
 8002022:	4598      	cmp	r8, r3
 8002024:	d808      	bhi.n	8002038 <__ieee754_powf+0x134>
 8002026:	2c00      	cmp	r4, #0
 8002028:	da0b      	bge.n	8002042 <__ieee754_powf+0x13e>
 800202a:	2000      	movs	r0, #0
 800202c:	ecbd 8b02 	vpop	{d8}
 8002030:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002034:	f000 bac2 	b.w	80025bc <__math_oflowf>
 8002038:	4ba5      	ldr	r3, [pc, #660]	@ (80022d0 <__ieee754_powf+0x3cc>)
 800203a:	4598      	cmp	r8, r3
 800203c:	d908      	bls.n	8002050 <__ieee754_powf+0x14c>
 800203e:	2c00      	cmp	r4, #0
 8002040:	dcf3      	bgt.n	800202a <__ieee754_powf+0x126>
 8002042:	2000      	movs	r0, #0
 8002044:	ecbd 8b02 	vpop	{d8}
 8002048:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800204c:	f000 bab0 	b.w	80025b0 <__math_uflowf>
 8002050:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002054:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002058:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80022d4 <__ieee754_powf+0x3d0>
 800205c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8002060:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002064:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002068:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800206c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002070:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80022d8 <__ieee754_powf+0x3d4>
 8002074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002078:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80022dc <__ieee754_powf+0x3d8>
 800207c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8002080:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80022e0 <__ieee754_powf+0x3dc>
 8002084:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002088:	eeb0 7a67 	vmov.f32	s14, s15
 800208c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8002090:	ee17 3a10 	vmov	r3, s14
 8002094:	f36f 030b 	bfc	r3, #0, #12
 8002098:	ee07 3a10 	vmov	s14, r3
 800209c:	eeb0 6a47 	vmov.f32	s12, s14
 80020a0:	eea0 6a66 	vfms.f32	s12, s0, s13
 80020a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80020a8:	3d01      	subs	r5, #1
 80020aa:	4305      	orrs	r5, r0
 80020ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020b0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80020b4:	f36f 040b 	bfc	r4, #0, #12
 80020b8:	bf18      	it	ne
 80020ba:	eeb0 8a66 	vmovne.f32	s16, s13
 80020be:	ee06 4a90 	vmov	s13, r4
 80020c2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80020c6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80020ca:	ee67 7a26 	vmul.f32	s15, s14, s13
 80020ce:	eee6 0a07 	vfma.f32	s1, s12, s14
 80020d2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80020d6:	ee17 1a10 	vmov	r1, s14
 80020da:	2900      	cmp	r1, #0
 80020dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80020e0:	f340 80dd 	ble.w	800229e <__ieee754_powf+0x39a>
 80020e4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80020e8:	f240 80ca 	bls.w	8002280 <__ieee754_powf+0x37c>
 80020ec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	bf4c      	ite	mi
 80020f6:	2001      	movmi	r0, #1
 80020f8:	2000      	movpl	r0, #0
 80020fa:	e797      	b.n	800202c <__ieee754_powf+0x128>
 80020fc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8002100:	bf01      	itttt	eq
 8002102:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80022e4 <__ieee754_powf+0x3e0>
 8002106:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800210a:	f06f 0317 	mvneq.w	r3, #23
 800210e:	ee17 7a90 	vmoveq	r7, s15
 8002112:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8002116:	bf18      	it	ne
 8002118:	2300      	movne	r3, #0
 800211a:	3a7f      	subs	r2, #127	@ 0x7f
 800211c:	441a      	add	r2, r3
 800211e:	4b72      	ldr	r3, [pc, #456]	@ (80022e8 <__ieee754_powf+0x3e4>)
 8002120:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8002124:	429f      	cmp	r7, r3
 8002126:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800212a:	dd06      	ble.n	800213a <__ieee754_powf+0x236>
 800212c:	4b6f      	ldr	r3, [pc, #444]	@ (80022ec <__ieee754_powf+0x3e8>)
 800212e:	429f      	cmp	r7, r3
 8002130:	f340 80a4 	ble.w	800227c <__ieee754_powf+0x378>
 8002134:	3201      	adds	r2, #1
 8002136:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800213a:	2600      	movs	r6, #0
 800213c:	4b6c      	ldr	r3, [pc, #432]	@ (80022f0 <__ieee754_powf+0x3ec>)
 800213e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002142:	ee07 1a10 	vmov	s14, r1
 8002146:	edd3 5a00 	vldr	s11, [r3]
 800214a:	4b6a      	ldr	r3, [pc, #424]	@ (80022f4 <__ieee754_powf+0x3f0>)
 800214c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8002150:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002154:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8002158:	1049      	asrs	r1, r1, #1
 800215a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800215e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8002162:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8002166:	ee37 6a65 	vsub.f32	s12, s14, s11
 800216a:	ee07 1a90 	vmov	s15, r1
 800216e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8002172:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8002176:	ee15 7a10 	vmov	r7, s10
 800217a:	401f      	ands	r7, r3
 800217c:	ee06 7a90 	vmov	s13, r7
 8002180:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8002184:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002188:	ee65 7a05 	vmul.f32	s15, s10, s10
 800218c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8002190:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80022f8 <__ieee754_powf+0x3f4>
 8002194:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80022fc <__ieee754_powf+0x3f8>
 8002198:	eee7 5a87 	vfma.f32	s11, s15, s14
 800219c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002300 <__ieee754_powf+0x3fc>
 80021a0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80021a4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80022d4 <__ieee754_powf+0x3d0>
 80021a8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80021ac:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002304 <__ieee754_powf+0x400>
 80021b0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80021b4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8002308 <__ieee754_powf+0x404>
 80021b8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80021bc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80021c0:	ee35 7a26 	vadd.f32	s14, s10, s13
 80021c4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80021c8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80021cc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80021d0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80021d4:	eef0 5a67 	vmov.f32	s11, s15
 80021d8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80021dc:	ee75 5a87 	vadd.f32	s11, s11, s14
 80021e0:	ee15 1a90 	vmov	r1, s11
 80021e4:	4019      	ands	r1, r3
 80021e6:	ee05 1a90 	vmov	s11, r1
 80021ea:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80021ee:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80021f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80021fa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80021fe:	eeb0 6a67 	vmov.f32	s12, s15
 8002202:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8002206:	ee16 1a10 	vmov	r1, s12
 800220a:	4019      	ands	r1, r3
 800220c:	ee06 1a10 	vmov	s12, r1
 8002210:	eeb0 7a46 	vmov.f32	s14, s12
 8002214:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8002218:	493c      	ldr	r1, [pc, #240]	@ (800230c <__ieee754_powf+0x408>)
 800221a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800221e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002222:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002310 <__ieee754_powf+0x40c>
 8002226:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8002314 <__ieee754_powf+0x410>
 800222a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002318 <__ieee754_powf+0x414>
 8002232:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002236:	ed91 7a00 	vldr	s14, [r1]
 800223a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800223e:	ee07 2a10 	vmov	s14, r2
 8002242:	4a36      	ldr	r2, [pc, #216]	@ (800231c <__ieee754_powf+0x418>)
 8002244:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002248:	eeb0 7a67 	vmov.f32	s14, s15
 800224c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002250:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8002254:	ed92 5a00 	vldr	s10, [r2]
 8002258:	ee37 7a05 	vadd.f32	s14, s14, s10
 800225c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002260:	ee17 2a10 	vmov	r2, s14
 8002264:	401a      	ands	r2, r3
 8002266:	ee07 2a10 	vmov	s14, r2
 800226a:	ee77 6a66 	vsub.f32	s13, s14, s13
 800226e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8002272:	eee6 6a65 	vfms.f32	s13, s12, s11
 8002276:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800227a:	e715      	b.n	80020a8 <__ieee754_powf+0x1a4>
 800227c:	2601      	movs	r6, #1
 800227e:	e75d      	b.n	800213c <__ieee754_powf+0x238>
 8002280:	d152      	bne.n	8002328 <__ieee754_powf+0x424>
 8002282:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002320 <__ieee754_powf+0x41c>
 8002286:	ee37 7a67 	vsub.f32	s14, s14, s15
 800228a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800228e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	f73f af29 	bgt.w	80020ec <__ieee754_powf+0x1e8>
 800229a:	2386      	movs	r3, #134	@ 0x86
 800229c:	e048      	b.n	8002330 <__ieee754_powf+0x42c>
 800229e:	4a21      	ldr	r2, [pc, #132]	@ (8002324 <__ieee754_powf+0x420>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d907      	bls.n	80022b4 <__ieee754_powf+0x3b0>
 80022a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	bf4c      	ite	mi
 80022ae:	2001      	movmi	r0, #1
 80022b0:	2000      	movpl	r0, #0
 80022b2:	e6c7      	b.n	8002044 <__ieee754_powf+0x140>
 80022b4:	d138      	bne.n	8002328 <__ieee754_powf+0x424>
 80022b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ba:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	dbea      	blt.n	800229a <__ieee754_powf+0x396>
 80022c4:	e7ee      	b.n	80022a4 <__ieee754_powf+0x3a0>
 80022c6:	bf00      	nop
 80022c8:	00000000 	.word	0x00000000
 80022cc:	3f7ffff3 	.word	0x3f7ffff3
 80022d0:	3f800007 	.word	0x3f800007
 80022d4:	3eaaaaab 	.word	0x3eaaaaab
 80022d8:	3fb8aa00 	.word	0x3fb8aa00
 80022dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80022e0:	36eca570 	.word	0x36eca570
 80022e4:	4b800000 	.word	0x4b800000
 80022e8:	001cc471 	.word	0x001cc471
 80022ec:	005db3d6 	.word	0x005db3d6
 80022f0:	0800285c 	.word	0x0800285c
 80022f4:	fffff000 	.word	0xfffff000
 80022f8:	3e6c3255 	.word	0x3e6c3255
 80022fc:	3e53f142 	.word	0x3e53f142
 8002300:	3e8ba305 	.word	0x3e8ba305
 8002304:	3edb6db7 	.word	0x3edb6db7
 8002308:	3f19999a 	.word	0x3f19999a
 800230c:	0800284c 	.word	0x0800284c
 8002310:	3f76384f 	.word	0x3f76384f
 8002314:	3f763800 	.word	0x3f763800
 8002318:	369dc3a0 	.word	0x369dc3a0
 800231c:	08002854 	.word	0x08002854
 8002320:	3338aa3c 	.word	0x3338aa3c
 8002324:	43160000 	.word	0x43160000
 8002328:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800232c:	d96f      	bls.n	800240e <__ieee754_powf+0x50a>
 800232e:	15db      	asrs	r3, r3, #23
 8002330:	3b7e      	subs	r3, #126	@ 0x7e
 8002332:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002336:	4118      	asrs	r0, r3
 8002338:	4408      	add	r0, r1
 800233a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800233e:	4a4e      	ldr	r2, [pc, #312]	@ (8002478 <__ieee754_powf+0x574>)
 8002340:	3b7f      	subs	r3, #127	@ 0x7f
 8002342:	411a      	asrs	r2, r3
 8002344:	4002      	ands	r2, r0
 8002346:	ee07 2a10 	vmov	s14, r2
 800234a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800234e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8002352:	f1c3 0317 	rsb	r3, r3, #23
 8002356:	4118      	asrs	r0, r3
 8002358:	2900      	cmp	r1, #0
 800235a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800235e:	bfb8      	it	lt
 8002360:	4240      	neglt	r0, r0
 8002362:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8002366:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800247c <__ieee754_powf+0x578>
 800236a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8002480 <__ieee754_powf+0x57c>
 800236e:	ee16 3a90 	vmov	r3, s13
 8002372:	f36f 030b 	bfc	r3, #0, #12
 8002376:	ee06 3a90 	vmov	s13, r3
 800237a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800237e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002382:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8002386:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8002484 <__ieee754_powf+0x580>
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	eee0 7a87 	vfma.f32	s15, s1, s14
 8002392:	eeb0 7a67 	vmov.f32	s14, s15
 8002396:	eea6 7a86 	vfma.f32	s14, s13, s12
 800239a:	eef0 5a47 	vmov.f32	s11, s14
 800239e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80023a2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80023a6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80023aa:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8002488 <__ieee754_powf+0x584>
 80023ae:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800248c <__ieee754_powf+0x588>
 80023b2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80023b6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002490 <__ieee754_powf+0x58c>
 80023ba:	eee6 5a26 	vfma.f32	s11, s12, s13
 80023be:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8002494 <__ieee754_powf+0x590>
 80023c2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80023c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002498 <__ieee754_powf+0x594>
 80023ca:	eee6 5a26 	vfma.f32	s11, s12, s13
 80023ce:	eeb0 6a47 	vmov.f32	s12, s14
 80023d2:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80023d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023da:	ee67 5a06 	vmul.f32	s11, s14, s12
 80023de:	ee36 6a66 	vsub.f32	s12, s12, s13
 80023e2:	eee7 7a27 	vfma.f32	s15, s14, s15
 80023e6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80023ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80023f6:	ee10 3a10 	vmov	r3, s0
 80023fa:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80023fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002402:	da06      	bge.n	8002412 <__ieee754_powf+0x50e>
 8002404:	f000 f854 	bl	80024b0 <scalbnf>
 8002408:	ee20 0a08 	vmul.f32	s0, s0, s16
 800240c:	e592      	b.n	8001f34 <__ieee754_powf+0x30>
 800240e:	2000      	movs	r0, #0
 8002410:	e7a7      	b.n	8002362 <__ieee754_powf+0x45e>
 8002412:	ee00 3a10 	vmov	s0, r3
 8002416:	e7f7      	b.n	8002408 <__ieee754_powf+0x504>
 8002418:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800241c:	e58a      	b.n	8001f34 <__ieee754_powf+0x30>
 800241e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800249c <__ieee754_powf+0x598>
 8002422:	e587      	b.n	8001f34 <__ieee754_powf+0x30>
 8002424:	eeb0 0a48 	vmov.f32	s0, s16
 8002428:	e584      	b.n	8001f34 <__ieee754_powf+0x30>
 800242a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800242e:	f43f adbb 	beq.w	8001fa8 <__ieee754_powf+0xa4>
 8002432:	2502      	movs	r5, #2
 8002434:	eeb0 0a48 	vmov.f32	s0, s16
 8002438:	f000 f832 	bl	80024a0 <fabsf>
 800243c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8002440:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8002444:	4647      	mov	r7, r8
 8002446:	d003      	beq.n	8002450 <__ieee754_powf+0x54c>
 8002448:	f1b8 0f00 	cmp.w	r8, #0
 800244c:	f47f addb 	bne.w	8002006 <__ieee754_powf+0x102>
 8002450:	2c00      	cmp	r4, #0
 8002452:	bfbc      	itt	lt
 8002454:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8002458:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800245c:	2e00      	cmp	r6, #0
 800245e:	f6bf ad69 	bge.w	8001f34 <__ieee754_powf+0x30>
 8002462:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8002466:	ea58 0805 	orrs.w	r8, r8, r5
 800246a:	f47f adc7 	bne.w	8001ffc <__ieee754_powf+0xf8>
 800246e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002472:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002476:	e55d      	b.n	8001f34 <__ieee754_powf+0x30>
 8002478:	ff800000 	.word	0xff800000
 800247c:	3f317218 	.word	0x3f317218
 8002480:	3f317200 	.word	0x3f317200
 8002484:	35bfbe8c 	.word	0x35bfbe8c
 8002488:	b5ddea0e 	.word	0xb5ddea0e
 800248c:	3331bb4c 	.word	0x3331bb4c
 8002490:	388ab355 	.word	0x388ab355
 8002494:	bb360b61 	.word	0xbb360b61
 8002498:	3e2aaaab 	.word	0x3e2aaaab
 800249c:	00000000 	.word	0x00000000

080024a0 <fabsf>:
 80024a0:	ee10 3a10 	vmov	r3, s0
 80024a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024a8:	ee00 3a10 	vmov	s0, r3
 80024ac:	4770      	bx	lr
	...

080024b0 <scalbnf>:
 80024b0:	ee10 3a10 	vmov	r3, s0
 80024b4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80024b8:	d02b      	beq.n	8002512 <scalbnf+0x62>
 80024ba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80024be:	d302      	bcc.n	80024c6 <scalbnf+0x16>
 80024c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80024c4:	4770      	bx	lr
 80024c6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80024ca:	d123      	bne.n	8002514 <scalbnf+0x64>
 80024cc:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <scalbnf+0xb0>)
 80024ce:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002564 <scalbnf+0xb4>
 80024d2:	4298      	cmp	r0, r3
 80024d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024d8:	db17      	blt.n	800250a <scalbnf+0x5a>
 80024da:	ee10 3a10 	vmov	r3, s0
 80024de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80024e2:	3a19      	subs	r2, #25
 80024e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80024e8:	4288      	cmp	r0, r1
 80024ea:	dd15      	ble.n	8002518 <scalbnf+0x68>
 80024ec:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002568 <scalbnf+0xb8>
 80024f0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800256c <scalbnf+0xbc>
 80024f4:	ee10 3a10 	vmov	r3, s0
 80024f8:	eeb0 7a67 	vmov.f32	s14, s15
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bfb8      	it	lt
 8002500:	eef0 7a66 	vmovlt.f32	s15, s13
 8002504:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002508:	4770      	bx	lr
 800250a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002570 <scalbnf+0xc0>
 800250e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002512:	4770      	bx	lr
 8002514:	0dd2      	lsrs	r2, r2, #23
 8002516:	e7e5      	b.n	80024e4 <scalbnf+0x34>
 8002518:	4410      	add	r0, r2
 800251a:	28fe      	cmp	r0, #254	@ 0xfe
 800251c:	dce6      	bgt.n	80024ec <scalbnf+0x3c>
 800251e:	2800      	cmp	r0, #0
 8002520:	dd06      	ble.n	8002530 <scalbnf+0x80>
 8002522:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002526:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800252a:	ee00 3a10 	vmov	s0, r3
 800252e:	4770      	bx	lr
 8002530:	f110 0f16 	cmn.w	r0, #22
 8002534:	da09      	bge.n	800254a <scalbnf+0x9a>
 8002536:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002570 <scalbnf+0xc0>
 800253a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002574 <scalbnf+0xc4>
 800253e:	ee10 3a10 	vmov	r3, s0
 8002542:	eeb0 7a67 	vmov.f32	s14, s15
 8002546:	2b00      	cmp	r3, #0
 8002548:	e7d9      	b.n	80024fe <scalbnf+0x4e>
 800254a:	3019      	adds	r0, #25
 800254c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002550:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002554:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002578 <scalbnf+0xc8>
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	e7d7      	b.n	800250e <scalbnf+0x5e>
 800255e:	bf00      	nop
 8002560:	ffff3cb0 	.word	0xffff3cb0
 8002564:	4c000000 	.word	0x4c000000
 8002568:	7149f2ca 	.word	0x7149f2ca
 800256c:	f149f2ca 	.word	0xf149f2ca
 8002570:	0da24260 	.word	0x0da24260
 8002574:	8da24260 	.word	0x8da24260
 8002578:	33000000 	.word	0x33000000

0800257c <with_errnof>:
 800257c:	b510      	push	{r4, lr}
 800257e:	ed2d 8b02 	vpush	{d8}
 8002582:	eeb0 8a40 	vmov.f32	s16, s0
 8002586:	4604      	mov	r4, r0
 8002588:	f7fe ff58 	bl	800143c <__errno>
 800258c:	eeb0 0a48 	vmov.f32	s0, s16
 8002590:	ecbd 8b02 	vpop	{d8}
 8002594:	6004      	str	r4, [r0, #0]
 8002596:	bd10      	pop	{r4, pc}

08002598 <xflowf>:
 8002598:	b130      	cbz	r0, 80025a8 <xflowf+0x10>
 800259a:	eef1 7a40 	vneg.f32	s15, s0
 800259e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80025a2:	2022      	movs	r0, #34	@ 0x22
 80025a4:	f7ff bfea 	b.w	800257c <with_errnof>
 80025a8:	eef0 7a40 	vmov.f32	s15, s0
 80025ac:	e7f7      	b.n	800259e <xflowf+0x6>
	...

080025b0 <__math_uflowf>:
 80025b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80025b8 <__math_uflowf+0x8>
 80025b4:	f7ff bff0 	b.w	8002598 <xflowf>
 80025b8:	10000000 	.word	0x10000000

080025bc <__math_oflowf>:
 80025bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80025c4 <__math_oflowf+0x8>
 80025c0:	f7ff bfea 	b.w	8002598 <xflowf>
 80025c4:	70000000 	.word	0x70000000

080025c8 <__ieee754_sqrtf>:
 80025c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80025cc:	4770      	bx	lr
	...

080025d0 <__ieee754_logf>:
 80025d0:	ee10 3a10 	vmov	r3, s0
 80025d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80025d8:	d106      	bne.n	80025e8 <__ieee754_logf+0x18>
 80025da:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002774 <__ieee754_logf+0x1a4>
 80025de:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8002778 <__ieee754_logf+0x1a8>
 80025e2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80025e6:	4770      	bx	lr
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	461a      	mov	r2, r3
 80025ec:	da02      	bge.n	80025f4 <__ieee754_logf+0x24>
 80025ee:	ee30 7a40 	vsub.f32	s14, s0, s0
 80025f2:	e7f4      	b.n	80025de <__ieee754_logf+0xe>
 80025f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80025f8:	db02      	blt.n	8002600 <__ieee754_logf+0x30>
 80025fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80025fe:	4770      	bx	lr
 8002600:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002604:	bfb8      	it	lt
 8002606:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800277c <__ieee754_logf+0x1ac>
 800260a:	485d      	ldr	r0, [pc, #372]	@ (8002780 <__ieee754_logf+0x1b0>)
 800260c:	bfbe      	ittt	lt
 800260e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8002612:	f06f 0118 	mvnlt.w	r1, #24
 8002616:	ee17 2a90 	vmovlt	r2, s15
 800261a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800261e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8002622:	4410      	add	r0, r2
 8002624:	bfa8      	it	ge
 8002626:	2100      	movge	r1, #0
 8002628:	3b7f      	subs	r3, #127	@ 0x7f
 800262a:	440b      	add	r3, r1
 800262c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8002630:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8002634:	4311      	orrs	r1, r2
 8002636:	ee00 1a10 	vmov	s0, r1
 800263a:	4952      	ldr	r1, [pc, #328]	@ (8002784 <__ieee754_logf+0x1b4>)
 800263c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8002640:	f102 000f 	add.w	r0, r2, #15
 8002644:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002648:	4001      	ands	r1, r0
 800264a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800264e:	bb89      	cbnz	r1, 80026b4 <__ieee754_logf+0xe4>
 8002650:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002658:	d10f      	bne.n	800267a <__ieee754_logf+0xaa>
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8087 	beq.w	800276e <__ieee754_logf+0x19e>
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8002788 <__ieee754_logf+0x1b8>
 8002668:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800278c <__ieee754_logf+0x1bc>
 800266c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002670:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002674:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002678:	4770      	bx	lr
 800267a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8002790 <__ieee754_logf+0x1c0>
 800267e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002682:	eee0 7a66 	vfms.f32	s15, s0, s13
 8002686:	ee20 7a00 	vmul.f32	s14, s0, s0
 800268a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268e:	b913      	cbnz	r3, 8002696 <__ieee754_logf+0xc6>
 8002690:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002694:	4770      	bx	lr
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002788 <__ieee754_logf+0x1b8>
 800269e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80026a6:	ee37 0a40 	vsub.f32	s0, s14, s0
 80026aa:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800278c <__ieee754_logf+0x1bc>
 80026ae:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80026b2:	4770      	bx	lr
 80026b4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80026b8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80026bc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8002794 <__ieee754_logf+0x1c4>
 80026c0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8002798 <__ieee754_logf+0x1c8>
 80026c4:	4935      	ldr	r1, [pc, #212]	@ (800279c <__ieee754_logf+0x1cc>)
 80026c6:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80026ca:	4411      	add	r1, r2
 80026cc:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80026d0:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80026d4:	430a      	orrs	r2, r1
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	ee26 5a06 	vmul.f32	s10, s12, s12
 80026e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026e4:	ee25 7a05 	vmul.f32	s14, s10, s10
 80026e8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80027a0 <__ieee754_logf+0x1d0>
 80026ec:	eee7 7a25 	vfma.f32	s15, s14, s11
 80026f0:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80027a4 <__ieee754_logf+0x1d4>
 80026f4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80026f8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80027a8 <__ieee754_logf+0x1d8>
 80026fc:	eee7 7a24 	vfma.f32	s15, s14, s9
 8002700:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80027ac <__ieee754_logf+0x1dc>
 8002704:	eee7 4a87 	vfma.f32	s9, s15, s14
 8002708:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80027b0 <__ieee754_logf+0x1e0>
 800270c:	eee4 7a87 	vfma.f32	s15, s9, s14
 8002710:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002714:	eee5 7a87 	vfma.f32	s15, s11, s14
 8002718:	dd1a      	ble.n	8002750 <__ieee754_logf+0x180>
 800271a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800271e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002722:	ee27 7a00 	vmul.f32	s14, s14, s0
 8002726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800272a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800272e:	b913      	cbnz	r3, 8002736 <__ieee754_logf+0x166>
 8002730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002734:	e7ac      	b.n	8002690 <__ieee754_logf+0xc0>
 8002736:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002788 <__ieee754_logf+0x1b8>
 800273a:	eee6 7a86 	vfma.f32	s15, s13, s12
 800273e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002742:	ee37 0a40 	vsub.f32	s0, s14, s0
 8002746:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800278c <__ieee754_logf+0x1bc>
 800274a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800274e:	4770      	bx	lr
 8002750:	ee70 7a67 	vsub.f32	s15, s0, s15
 8002754:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002758:	b913      	cbnz	r3, 8002760 <__ieee754_logf+0x190>
 800275a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800275e:	4770      	bx	lr
 8002760:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002788 <__ieee754_logf+0x1b8>
 8002764:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8002768:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800276c:	e7eb      	b.n	8002746 <__ieee754_logf+0x176>
 800276e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8002778 <__ieee754_logf+0x1a8>
 8002772:	4770      	bx	lr
 8002774:	cc000000 	.word	0xcc000000
 8002778:	00000000 	.word	0x00000000
 800277c:	4c000000 	.word	0x4c000000
 8002780:	004afb20 	.word	0x004afb20
 8002784:	007ffff0 	.word	0x007ffff0
 8002788:	3717f7d1 	.word	0x3717f7d1
 800278c:	3f317180 	.word	0x3f317180
 8002790:	3eaaaaab 	.word	0x3eaaaaab
 8002794:	3e1cd04f 	.word	0x3e1cd04f
 8002798:	3e178897 	.word	0x3e178897
 800279c:	ffcf5c30 	.word	0xffcf5c30
 80027a0:	3e638e29 	.word	0x3e638e29
 80027a4:	3ecccccd 	.word	0x3ecccccd
 80027a8:	3e3a3325 	.word	0x3e3a3325
 80027ac:	3e924925 	.word	0x3e924925
 80027b0:	3f2aaaab 	.word	0x3f2aaaab

080027b4 <_init>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr

080027c0 <_fini>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	bf00      	nop
 80027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c6:	bc08      	pop	{r3}
 80027c8:	469e      	mov	lr, r3
 80027ca:	4770      	bx	lr
