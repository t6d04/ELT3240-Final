
ELT3240-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000e48  08000e48  00001e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e5c  08000e5c  0000204c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000e5c  08000e5c  0000204c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000e5c  08000e5c  0000204c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e5c  08000e5c  00001e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e60  08000e60  00001e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08000e64  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000004c  08000eb0  0000204c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08000eb0  00002084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000396b  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001334  00000000  00000000  000059e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00006d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002f4  00000000  00000000  00007170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016250  00000000  00000000  00007464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b32  00000000  00000000  0001d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008520d  00000000  00000000  000251e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa3f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c74  00000000  00000000  000aa438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ab0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000004c 	.word	0x2000004c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000e30 	.word	0x08000e30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000050 	.word	0x20000050
 80001d4:	08000e30 	.word	0x08000e30

080001d8 <adc_init>:
#include "stm32f4xx.h"
#include "adc.h"

void adc_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80001dc:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <adc_init+0x58>)
 80001de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80001e0:	4a13      	ldr	r2, [pc, #76]	@ (8000230 <adc_init+0x58>)
 80001e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001e6:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001e8:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <adc_init+0x58>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ec:	4a10      	ldr	r2, [pc, #64]	@ (8000230 <adc_init+0x58>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (3 << (0 * 2));
 80001f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <adc_init+0x5c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000234 <adc_init+0x5c>)
 80001fa:	f043 0303 	orr.w	r3, r3, #3
 80001fe:	6013      	str	r3, [r2, #0]
    ADC->CCR = 0;
 8000200:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <adc_init+0x60>)
 8000202:	2200      	movs	r2, #0
 8000204:	605a      	str	r2, [r3, #4]
    ADC1->CR1 = 0;
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <adc_init+0x64>)
 8000208:	2200      	movs	r2, #0
 800020a:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = ADC_CR2_ADON;
 800020c:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <adc_init+0x64>)
 800020e:	2201      	movs	r2, #1
 8000210:	609a      	str	r2, [r3, #8]
    ADC1->SMPR2 |= (7 << 0);
 8000212:	4b0a      	ldr	r3, [pc, #40]	@ (800023c <adc_init+0x64>)
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	4a09      	ldr	r2, [pc, #36]	@ (800023c <adc_init+0x64>)
 8000218:	f043 0307 	orr.w	r3, r3, #7
 800021c:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 0;
 800021e:	4b07      	ldr	r3, [pc, #28]	@ (800023c <adc_init+0x64>)
 8000220:	2200      	movs	r2, #0
 8000222:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	40012300 	.word	0x40012300
 800023c:	40012000 	.word	0x40012000

08000240 <adc_read>:

uint16_t adc_read(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000244:	4b0a      	ldr	r3, [pc, #40]	@ (8000270 <adc_read+0x30>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4a09      	ldr	r2, [pc, #36]	@ (8000270 <adc_read+0x30>)
 800024a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800024e:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 8000250:	bf00      	nop
 8000252:	4b07      	ldr	r3, [pc, #28]	@ (8000270 <adc_read+0x30>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f003 0302 	and.w	r3, r3, #2
 800025a:	2b00      	cmp	r3, #0
 800025c:	d0f9      	beq.n	8000252 <adc_read+0x12>
    return ADC1->DR;
 800025e:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <adc_read+0x30>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	b29b      	uxth	r3, r3
}
 8000264:	4618      	mov	r0, r3
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40012000 	.word	0x40012000

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4907      	ldr	r1, [pc, #28]	@ (80002ac <__NVIC_EnableIRQ+0x38>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <button_init>:
#include "stm32f4xx.h"
#include "state_machine.h"

void button_init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
//
//    GPIOB->MODER &= ~(3 << (3 * 2));
//    GPIOB->PUPDR &= ~(3 << (3 * 2));
//    GPIOB->PUPDR |=  (1 << (3 * 2));

    SYSCFG->EXTICR[3] &= ~(0xF << 4 * (13 - 12));
 80002b4:	4b17      	ldr	r3, [pc, #92]	@ (8000314 <button_init+0x64>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a16      	ldr	r2, [pc, #88]	@ (8000314 <button_init+0x64>)
 80002ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002be:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |=  (0x2 << 4 * (13 - 12));
 80002c0:	4b14      	ldr	r3, [pc, #80]	@ (8000314 <button_init+0x64>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a13      	ldr	r2, [pc, #76]	@ (8000314 <button_init+0x64>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]

    SYSCFG->EXTICR[0] &= ~(0xF << 4 * 3);
 80002cc:	4b11      	ldr	r3, [pc, #68]	@ (8000314 <button_init+0x64>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4a10      	ldr	r2, [pc, #64]	@ (8000314 <button_init+0x64>)
 80002d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80002d6:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  (0x1 << 4 * 3);
 80002d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <button_init+0x64>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000314 <button_init+0x64>)
 80002de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002e2:	6093      	str	r3, [r2, #8]

    EXTI->IMR  |= (1 << 13) | (1 << 3);
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <button_init+0x68>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000318 <button_init+0x68>)
 80002ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 13) | (1 << 3);
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <button_init+0x68>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a07      	ldr	r2, [pc, #28]	@ (8000318 <button_init+0x68>)
 80002fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000304:	2028      	movs	r0, #40	@ 0x28
 8000306:	f7ff ffb5 	bl	8000274 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI3_IRQn);
 800030a:	2009      	movs	r0, #9
 800030c:	f7ff ffb2 	bl	8000274 <__NVIC_EnableIRQ>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40013800 	.word	0x40013800
 8000318:	40013c00 	.word	0x40013c00

0800031c <buzzer_off>:
	} else {
		buzzer_duration = 0;
	}
}

void buzzer_off(void) {
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(1 << BUZZER_PIN);
 8000320:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <buzzer_off+0x28>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <buzzer_off+0x28>)
 8000326:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800032a:	6153      	str	r3, [r2, #20]
	buzzer_active = 0;
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <buzzer_off+0x2c>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
	buzzer_duration = 0;
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <buzzer_off+0x30>)
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40020400 	.word	0x40020400
 8000348:	2000006c 	.word	0x2000006c
 800034c:	20000070 	.word	0x20000070

08000350 <buzzer_check>:

void buzzer_check(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	if (buzzer_active && buzzer_duration > 0) {
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <buzzer_check+0x30>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d00f      	beq.n	800037c <buzzer_check+0x2c>
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <buzzer_check+0x34>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d00b      	beq.n	800037c <buzzer_check+0x2c>
		if ((millis() - buzzer_start) >= buzzer_duration) {
 8000364:	f000 fc78 	bl	8000c58 <millis>
 8000368:	4602      	mov	r2, r0
 800036a:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <buzzer_check+0x38>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1ad2      	subs	r2, r2, r3
 8000370:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <buzzer_check+0x34>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	d301      	bcc.n	800037c <buzzer_check+0x2c>
			buzzer_off();
 8000378:	f7ff ffd0 	bl	800031c <buzzer_off>
		}
	}
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000006c 	.word	0x2000006c
 8000384:	20000070 	.word	0x20000070
 8000388:	20000068 	.word	0x20000068

0800038c <rs_from_adc>:
#define RL 10000.0f
#define VCC 3.3f
static float R0 = 10000.0f;

static float rs_from_adc(uint16_t adc)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	80fb      	strh	r3, [r7, #6]
    float vout = ((float)adc / 4095.0f) * VCC;
 8000396:	88fb      	ldrh	r3, [r7, #6]
 8000398:	ee07 3a90 	vmov	s15, r3
 800039c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80003a0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000400 <rs_from_adc+0x74>
 80003a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003a8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000404 <rs_from_adc+0x78>
 80003ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003b0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (vout < 0.01f) vout = 0.01f;
 80003b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80003b8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000408 <rs_from_adc+0x7c>
 80003bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c4:	d501      	bpl.n	80003ca <rs_from_adc+0x3e>
 80003c6:	4b11      	ldr	r3, [pc, #68]	@ (800040c <rs_from_adc+0x80>)
 80003c8:	60fb      	str	r3, [r7, #12]
    float rs = (VCC - vout) * RL / vout;
 80003ca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000404 <rs_from_adc+0x78>
 80003ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80003d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000410 <rs_from_adc+0x84>
 80003da:	ee67 6a87 	vmul.f32	s13, s15, s14
 80003de:	ed97 7a03 	vldr	s14, [r7, #12]
 80003e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003e6:	edc7 7a02 	vstr	s15, [r7, #8]
    return rs;
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	ee07 3a90 	vmov	s15, r3
}
 80003f0:	eeb0 0a67 	vmov.f32	s0, s15
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	457ff000 	.word	0x457ff000
 8000404:	40533333 	.word	0x40533333
 8000408:	3c23d70a 	.word	0x3c23d70a
 800040c:	3c23d70a 	.word	0x3c23d70a
 8000410:	461c4000 	.word	0x461c4000

08000414 <gas_sensor_init>:

void gas_sensor_init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
    adc_init();
 8000418:	f7ff fede 	bl	80001d8 <adc_init>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <gas_sensor_calibrate>:

void gas_sensor_calibrate(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 100; i++) {
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	e009      	b.n	8000444 <gas_sensor_calibrate+0x24>
        sum += adc_read();
 8000430:	f7ff ff06 	bl	8000240 <adc_read>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	4413      	add	r3, r2
 800043c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 100; i++) {
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	3301      	adds	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	2b63      	cmp	r3, #99	@ 0x63
 8000448:	ddf2      	ble.n	8000430 <gas_sensor_calibrate+0x10>
    }
    uint16_t avg_adc = sum / 100;
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	4a08      	ldr	r2, [pc, #32]	@ (8000470 <gas_sensor_calibrate+0x50>)
 800044e:	fba2 2303 	umull	r2, r3, r2, r3
 8000452:	095b      	lsrs	r3, r3, #5
 8000454:	80fb      	strh	r3, [r7, #6]
    float rs = rs_from_adc(avg_adc);
 8000456:	88fb      	ldrh	r3, [r7, #6]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff97 	bl	800038c <rs_from_adc>
 800045e:	ed87 0a00 	vstr	s0, [r7]
    R0 = rs / 1.0f;
 8000462:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <gas_sensor_calibrate+0x54>)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	51eb851f 	.word	0x51eb851f
 8000474:	20000000 	.word	0x20000000

08000478 <gpio_init>:
#include "stm32f4xx.h"

void gpio_init(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
    // Enable GPIO Clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800047c:	4b7c      	ldr	r3, [pc, #496]	@ (8000670 <gpio_init+0x1f8>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000480:	4a7b      	ldr	r2, [pc, #492]	@ (8000670 <gpio_init+0x1f8>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000488:	4b79      	ldr	r3, [pc, #484]	@ (8000670 <gpio_init+0x1f8>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a78      	ldr	r2, [pc, #480]	@ (8000670 <gpio_init+0x1f8>)
 800048e:	f043 0302 	orr.w	r3, r3, #2
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000494:	4b76      	ldr	r3, [pc, #472]	@ (8000670 <gpio_init+0x1f8>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000498:	4a75      	ldr	r2, [pc, #468]	@ (8000670 <gpio_init+0x1f8>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80004a0:	4b73      	ldr	r3, [pc, #460]	@ (8000670 <gpio_init+0x1f8>)
 80004a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004a4:	4a72      	ldr	r2, [pc, #456]	@ (8000670 <gpio_init+0x1f8>)
 80004a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004aa:	6453      	str	r3, [r2, #68]	@ 0x44

    // ===== MQ-5 Sensor: PA0 (Analog input) =====
    GPIOA->MODER &= ~(3 << (0 * 2));
 80004ac:	4b71      	ldr	r3, [pc, #452]	@ (8000674 <gpio_init+0x1fc>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a70      	ldr	r2, [pc, #448]	@ (8000674 <gpio_init+0x1fc>)
 80004b2:	f023 0303 	bic.w	r3, r3, #3
 80004b6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0 << (0 * 2));
 80004b8:	4b6e      	ldr	r3, [pc, #440]	@ (8000674 <gpio_init+0x1fc>)
 80004ba:	4a6e      	ldr	r2, [pc, #440]	@ (8000674 <gpio_init+0x1fc>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	6013      	str	r3, [r2, #0]

    // ===== Relay: PA8 (Output) =====
    GPIOA->MODER &= ~(3 << (8 * 2));
 80004c0:	4b6c      	ldr	r3, [pc, #432]	@ (8000674 <gpio_init+0x1fc>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a6b      	ldr	r2, [pc, #428]	@ (8000674 <gpio_init+0x1fc>)
 80004c6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80004ca:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << (8 * 2));
 80004cc:	4b69      	ldr	r3, [pc, #420]	@ (8000674 <gpio_init+0x1fc>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a68      	ldr	r2, [pc, #416]	@ (8000674 <gpio_init+0x1fc>)
 80004d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004d6:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 8);
 80004d8:	4b66      	ldr	r3, [pc, #408]	@ (8000674 <gpio_init+0x1fc>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4a65      	ldr	r2, [pc, #404]	@ (8000674 <gpio_init+0x1fc>)
 80004de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004e2:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3 << (8 * 2));
 80004e4:	4b63      	ldr	r3, [pc, #396]	@ (8000674 <gpio_init+0x1fc>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4a62      	ldr	r2, [pc, #392]	@ (8000674 <gpio_init+0x1fc>)
 80004ea:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80004ee:	6093      	str	r3, [r2, #8]

    // ===== LED1: PB0 (Output) =====
    GPIOB->MODER &= ~(3 << (0 * 2));
 80004f0:	4b61      	ldr	r3, [pc, #388]	@ (8000678 <gpio_init+0x200>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a60      	ldr	r2, [pc, #384]	@ (8000678 <gpio_init+0x200>)
 80004f6:	f023 0303 	bic.w	r3, r3, #3
 80004fa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (0 * 2));
 80004fc:	4b5e      	ldr	r3, [pc, #376]	@ (8000678 <gpio_init+0x200>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a5d      	ldr	r2, [pc, #372]	@ (8000678 <gpio_init+0x200>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 0);
 8000508:	4b5b      	ldr	r3, [pc, #364]	@ (8000678 <gpio_init+0x200>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4a5a      	ldr	r2, [pc, #360]	@ (8000678 <gpio_init+0x200>)
 800050e:	f023 0301 	bic.w	r3, r3, #1
 8000512:	6053      	str	r3, [r2, #4]

    // ===== LED2: PB1 (Output) =====
    GPIOB->MODER &= ~(3 << (1 * 2));
 8000514:	4b58      	ldr	r3, [pc, #352]	@ (8000678 <gpio_init+0x200>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a57      	ldr	r2, [pc, #348]	@ (8000678 <gpio_init+0x200>)
 800051a:	f023 030c 	bic.w	r3, r3, #12
 800051e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (1 * 2));
 8000520:	4b55      	ldr	r3, [pc, #340]	@ (8000678 <gpio_init+0x200>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a54      	ldr	r2, [pc, #336]	@ (8000678 <gpio_init+0x200>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 1);
 800052c:	4b52      	ldr	r3, [pc, #328]	@ (8000678 <gpio_init+0x200>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4a51      	ldr	r2, [pc, #324]	@ (8000678 <gpio_init+0x200>)
 8000532:	f023 0302 	bic.w	r3, r3, #2
 8000536:	6053      	str	r3, [r2, #4]

    // ===== SW2: PB3 (Input, Pull-up) =====
    GPIOB->MODER &= ~(3 << (3 * 2));
 8000538:	4b4f      	ldr	r3, [pc, #316]	@ (8000678 <gpio_init+0x200>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a4e      	ldr	r2, [pc, #312]	@ (8000678 <gpio_init+0x200>)
 800053e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000542:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(3 << (3 * 2));
 8000544:	4b4c      	ldr	r3, [pc, #304]	@ (8000678 <gpio_init+0x200>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a4b      	ldr	r2, [pc, #300]	@ (8000678 <gpio_init+0x200>)
 800054a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800054e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (3 * 2));
 8000550:	4b49      	ldr	r3, [pc, #292]	@ (8000678 <gpio_init+0x200>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	4a48      	ldr	r2, [pc, #288]	@ (8000678 <gpio_init+0x200>)
 8000556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800055a:	60d3      	str	r3, [r2, #12]

    // ===== LCD I2C: PB6 (SCL), PB7 (SDA), AF4, Open-drain =====
    GPIOB->MODER &= ~(3 << (6 * 2));
 800055c:	4b46      	ldr	r3, [pc, #280]	@ (8000678 <gpio_init+0x200>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a45      	ldr	r2, [pc, #276]	@ (8000678 <gpio_init+0x200>)
 8000562:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000566:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (6 * 2));
 8000568:	4b43      	ldr	r3, [pc, #268]	@ (8000678 <gpio_init+0x200>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a42      	ldr	r2, [pc, #264]	@ (8000678 <gpio_init+0x200>)
 800056e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000572:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |=  (1 << 6);
 8000574:	4b40      	ldr	r3, [pc, #256]	@ (8000678 <gpio_init+0x200>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4a3f      	ldr	r2, [pc, #252]	@ (8000678 <gpio_init+0x200>)
 800057a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800057e:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR |=  (1 << (6 * 2));
 8000580:	4b3d      	ldr	r3, [pc, #244]	@ (8000678 <gpio_init+0x200>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	4a3c      	ldr	r2, [pc, #240]	@ (8000678 <gpio_init+0x200>)
 8000586:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800058a:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER &= ~(3 << (7 * 2));
 800058c:	4b3a      	ldr	r3, [pc, #232]	@ (8000678 <gpio_init+0x200>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a39      	ldr	r2, [pc, #228]	@ (8000678 <gpio_init+0x200>)
 8000592:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000596:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (7 * 2));
 8000598:	4b37      	ldr	r3, [pc, #220]	@ (8000678 <gpio_init+0x200>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a36      	ldr	r2, [pc, #216]	@ (8000678 <gpio_init+0x200>)
 800059e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005a2:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |=  (1 << 7);
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <gpio_init+0x200>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a33      	ldr	r2, [pc, #204]	@ (8000678 <gpio_init+0x200>)
 80005aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ae:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR |=  (1 << (7 * 2));
 80005b0:	4b31      	ldr	r3, [pc, #196]	@ (8000678 <gpio_init+0x200>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a30      	ldr	r2, [pc, #192]	@ (8000678 <gpio_init+0x200>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	60d3      	str	r3, [r2, #12]

    // ===== Buzzer: PB10 (Output) =====
    GPIOB->MODER &= ~(3 << (10 * 2));
 80005bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <gpio_init+0x200>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000678 <gpio_init+0x200>)
 80005c2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80005c6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (10 * 2));
 80005c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000678 <gpio_init+0x200>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000678 <gpio_init+0x200>)
 80005ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d2:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER &= ~(1 << 10);
 80005d4:	4b28      	ldr	r3, [pc, #160]	@ (8000678 <gpio_init+0x200>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a27      	ldr	r2, [pc, #156]	@ (8000678 <gpio_init+0x200>)
 80005da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80005de:	6053      	str	r3, [r2, #4]

    // ===== LED Xanh lá: PC0 (Output) =====
    GPIOC->MODER &= ~(3 << (0 * 2));
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <gpio_init+0x204>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a25      	ldr	r2, [pc, #148]	@ (800067c <gpio_init+0x204>)
 80005e6:	f023 0303 	bic.w	r3, r3, #3
 80005ea:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (0 * 2));
 80005ec:	4b23      	ldr	r3, [pc, #140]	@ (800067c <gpio_init+0x204>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a22      	ldr	r2, [pc, #136]	@ (800067c <gpio_init+0x204>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6013      	str	r3, [r2, #0]

    // ===== LED Xanh dương: PC1 (Output) =====
    GPIOC->MODER &= ~(3 << (1 * 2));
 80005f8:	4b20      	ldr	r3, [pc, #128]	@ (800067c <gpio_init+0x204>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1f      	ldr	r2, [pc, #124]	@ (800067c <gpio_init+0x204>)
 80005fe:	f023 030c 	bic.w	r3, r3, #12
 8000602:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (1 * 2));
 8000604:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <gpio_init+0x204>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <gpio_init+0x204>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6013      	str	r3, [r2, #0]

    // ===== LED Vàng: PC2 (Output) =====
    GPIOC->MODER &= ~(3 << (2 * 2));
 8000610:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <gpio_init+0x204>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a19      	ldr	r2, [pc, #100]	@ (800067c <gpio_init+0x204>)
 8000616:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800061a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (2 * 2));
 800061c:	4b17      	ldr	r3, [pc, #92]	@ (800067c <gpio_init+0x204>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	@ (800067c <gpio_init+0x204>)
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]

    // ===== LED Đỏ: PC3 (Output) =====
    GPIOC->MODER &= ~(3 << (3 * 2));
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <gpio_init+0x204>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a13      	ldr	r2, [pc, #76]	@ (800067c <gpio_init+0x204>)
 800062e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000632:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (1 << (3 * 2));
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <gpio_init+0x204>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a10      	ldr	r2, [pc, #64]	@ (800067c <gpio_init+0x204>)
 800063a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800063e:	6013      	str	r3, [r2, #0]

    // ===== SW1: PC13 (Input, Pull-up) =====
    GPIOC->MODER &= ~(3 << (13 * 2));
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <gpio_init+0x204>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <gpio_init+0x204>)
 8000646:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800064a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3 << (13 * 2));
 800064c:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <gpio_init+0x204>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <gpio_init+0x204>)
 8000652:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000656:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |=  (1 << (13 * 2));
 8000658:	4b08      	ldr	r3, [pc, #32]	@ (800067c <gpio_init+0x204>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	4a07      	ldr	r2, [pc, #28]	@ (800067c <gpio_init+0x204>)
 800065e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800

08000680 <i2c2_init>:
#include "stm32f4xx.h"
#include "i2c.h"

void i2c2_init(void) {
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <i2c2_init+0xec>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <i2c2_init+0xec>)
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000690:	4b36      	ldr	r3, [pc, #216]	@ (800076c <i2c2_init+0xec>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a35      	ldr	r2, [pc, #212]	@ (800076c <i2c2_init+0xec>)
 8000696:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOB->MODER &= ~(3 << (8 * 2));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <i2c2_init+0xf0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a33      	ldr	r2, [pc, #204]	@ (8000770 <i2c2_init+0xf0>)
 80006a2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80006a6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (8 * 2));
 80006a8:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <i2c2_init+0xf0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a30      	ldr	r2, [pc, #192]	@ (8000770 <i2c2_init+0xf0>)
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b2:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((8 - 8) * 4));
 80006b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000770 <i2c2_init+0xf0>)
 80006b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000770 <i2c2_init+0xf0>)
 80006ba:	f023 030f 	bic.w	r3, r3, #15
 80006be:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((8 - 8) * 4));
 80006c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <i2c2_init+0xf0>)
 80006c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000770 <i2c2_init+0xf0>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 8);
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <i2c2_init+0xf0>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a27      	ldr	r2, [pc, #156]	@ (8000770 <i2c2_init+0xf0>)
 80006d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006d6:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (8 * 2));
 80006d8:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <i2c2_init+0xf0>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <i2c2_init+0xf0>)
 80006de:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80006e2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (8 * 2));
 80006e4:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <i2c2_init+0xf0>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <i2c2_init+0xf0>)
 80006ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ee:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER &= ~(3 << (9 * 2));
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <i2c2_init+0xf0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <i2c2_init+0xf0>)
 80006f6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80006fa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << (9 * 2));
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <i2c2_init+0xf0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1b      	ldr	r2, [pc, #108]	@ (8000770 <i2c2_init+0xf0>)
 8000702:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000706:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] &= ~(0xF << ((9 - 8) * 4));
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <i2c2_init+0xf0>)
 800070a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070c:	4a18      	ldr	r2, [pc, #96]	@ (8000770 <i2c2_init+0xf0>)
 800070e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000712:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((9 - 8) * 4));
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <i2c2_init+0xf0>)
 8000716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000718:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <i2c2_init+0xf0>)
 800071a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1 << 9);
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <i2c2_init+0xf0>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <i2c2_init+0xf0>)
 8000726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800072a:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3 << (9 * 2));
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <i2c2_init+0xf0>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a0f      	ldr	r2, [pc, #60]	@ (8000770 <i2c2_init+0xf0>)
 8000732:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000736:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (1 << (9 * 2));
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <i2c2_init+0xf0>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	4a0c      	ldr	r2, [pc, #48]	@ (8000770 <i2c2_init+0xf0>)
 800073e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000742:	60d3      	str	r3, [r2, #12]

    I2C1->CR2 = 16;
 8000744:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <i2c2_init+0xf4>)
 8000746:	2210      	movs	r2, #16
 8000748:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 800074a:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <i2c2_init+0xf4>)
 800074c:	2250      	movs	r2, #80	@ 0x50
 800074e:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <i2c2_init+0xf4>)
 8000752:	2211      	movs	r2, #17
 8000754:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8000756:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <i2c2_init+0xf4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <i2c2_init+0xf4>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400
 8000774:	40005400 	.word	0x40005400

08000778 <lcd_i2c_start>:
#include "stm32f4xx.h"
#include "lcd.h"

void lcd_i2c_start(void) {
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <lcd_i2c_start+0x44>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0e      	ldr	r2, [pc, #56]	@ (80007bc <lcd_i2c_start+0x44>)
 8000782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000786:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000788:	bf00      	nop
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <lcd_i2c_start+0x44>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f9      	beq.n	800078a <lcd_i2c_start+0x12>
    I2C1->DR = (LCD_ADDR << 1);
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <lcd_i2c_start+0x44>)
 8000798:	224e      	movs	r2, #78	@ 0x4e
 800079a:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800079c:	bf00      	nop
 800079e:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <lcd_i2c_start+0x44>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0f9      	beq.n	800079e <lcd_i2c_start+0x26>
    (void)I2C1->SR1; (void)I2C1->SR2;
 80007aa:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <lcd_i2c_start+0x44>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <lcd_i2c_start+0x44>)
 80007b0:	699b      	ldr	r3, [r3, #24]
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40005400 	.word	0x40005400

080007c0 <lcd_i2c_stop>:

void lcd_i2c_stop(void) {
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <lcd_i2c_stop+0x1c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <lcd_i2c_stop+0x1c>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40005400 	.word	0x40005400

080007e0 <lcd_i2c_write>:

void lcd_i2c_write(uint8_t data) {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80007ea:	bf00      	nop
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <lcd_i2c_write+0x3c>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0f9      	beq.n	80007ec <lcd_i2c_write+0xc>
    I2C1->DR = data;
 80007f8:	4a08      	ldr	r2, [pc, #32]	@ (800081c <lcd_i2c_write+0x3c>)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80007fe:	bf00      	nop
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <lcd_i2c_write+0x3c>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f9      	beq.n	8000800 <lcd_i2c_write+0x20>
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40005400 	.word	0x40005400

08000820 <lcd_write_nibble>:

void lcd_write_nibble(uint8_t nibble, uint8_t control) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble & 0xF0) | control | LCD_BACKLIGHT;
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	f023 030f 	bic.w	r3, r3, #15
 8000838:	b25a      	sxtb	r2, r3
 800083a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800083e:	4313      	orrs	r3, r2
 8000840:	b25b      	sxtb	r3, r3
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	b25b      	sxtb	r3, r3
 8000848:	73fb      	strb	r3, [r7, #15]
    lcd_i2c_start();
 800084a:	f7ff ff95 	bl	8000778 <lcd_i2c_start>
    lcd_i2c_write(data);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ffc5 	bl	80007e0 <lcd_i2c_write>
    lcd_i2c_write(data | LCD_ENABLE);
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ffbe 	bl	80007e0 <lcd_i2c_write>
    for (volatile int i = 0; i < 1000; i++);
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	e002      	b.n	8000870 <lcd_write_nibble+0x50>
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	3301      	adds	r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000876:	dbf8      	blt.n	800086a <lcd_write_nibble+0x4a>
    lcd_i2c_write(data & ~LCD_ENABLE);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	f023 0304 	bic.w	r3, r3, #4
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffad 	bl	80007e0 <lcd_i2c_write>
    lcd_i2c_stop();
 8000886:	f7ff ff9b 	bl	80007c0 <lcd_i2c_stop>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <lcd_write_byte>:

void lcd_write_byte(uint8_t byte, uint8_t control) {
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	460a      	mov	r2, r1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4613      	mov	r3, r2
 80008a0:	71bb      	strb	r3, [r7, #6]
    lcd_write_nibble(byte & 0xF0, control);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f023 030f 	bic.w	r3, r3, #15
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	79ba      	ldrb	r2, [r7, #6]
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ffb6 	bl	8000820 <lcd_write_nibble>
    lcd_write_nibble((byte << 4) & 0xF0, control);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	79ba      	ldrb	r2, [r7, #6]
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffae 	bl	8000820 <lcd_write_nibble>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <lcd_command>:

void lcd_command(uint8_t cmd) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
    lcd_write_byte(cmd, 0x00);
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffd9 	bl	8000892 <lcd_write_byte>
    for (volatile int i = 0; i < 5000; i++);
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	e002      	b.n	80008ec <lcd_command+0x20>
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f241 3287 	movw	r2, #4999	@ 0x1387
 80008f2:	4293      	cmp	r3, r2
 80008f4:	ddf7      	ble.n	80008e6 <lcd_command+0x1a>
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <lcd_init>:
void lcd_data(uint8_t data) {
    lcd_write_byte(data, LCD_REGISTER_SELECT);
    for (volatile int i = 0; i < 5000; i++);
}

void lcd_init(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 100000; i++);
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	e002      	b.n	8000912 <lcd_init+0x12>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3301      	adds	r3, #1
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <lcd_init+0x60>)
 8000916:	4293      	cmp	r3, r2
 8000918:	ddf8      	ble.n	800090c <lcd_init+0xc>
    lcd_command(0x33);
 800091a:	2033      	movs	r0, #51	@ 0x33
 800091c:	f7ff ffd6 	bl	80008cc <lcd_command>
    lcd_command(0x32);
 8000920:	2032      	movs	r0, #50	@ 0x32
 8000922:	f7ff ffd3 	bl	80008cc <lcd_command>
    lcd_command(0x28);
 8000926:	2028      	movs	r0, #40	@ 0x28
 8000928:	f7ff ffd0 	bl	80008cc <lcd_command>
    lcd_command(0x0C);
 800092c:	200c      	movs	r0, #12
 800092e:	f7ff ffcd 	bl	80008cc <lcd_command>
    lcd_command(0x06);
 8000932:	2006      	movs	r0, #6
 8000934:	f7ff ffca 	bl	80008cc <lcd_command>
    lcd_command(0x01);
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff ffc7 	bl	80008cc <lcd_command>
    for (volatile int i = 0; i < 50000; i++);
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	e002      	b.n	800094a <lcd_init+0x4a>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000950:	4293      	cmp	r3, r2
 8000952:	ddf7      	ble.n	8000944 <lcd_init+0x44>
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	0001869f 	.word	0x0001869f

08000964 <led_check>:
            LED_PORT->ODR &= ~(1 << pin);
        }
    }
}

void led_check(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
    uint32_t now = millis();
 800096a:	f000 f975 	bl	8000c58 <millis>
 800096e:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	e02f      	b.n	80009d6 <led_check+0x72>
        if (leds[i].blinking && (now - leds[i].last_toggle >= leds[i].interval)) {
 8000976:	4a1c      	ldr	r2, [pc, #112]	@ (80009e8 <led_check+0x84>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	4413      	add	r3, r2
 800097e:	330c      	adds	r3, #12
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d024      	beq.n	80009d0 <led_check+0x6c>
 8000986:	4a18      	ldr	r2, [pc, #96]	@ (80009e8 <led_check+0x84>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	4413      	add	r3, r2
 800098e:	3304      	adds	r3, #4
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	1ad2      	subs	r2, r2, r3
 8000996:	4914      	ldr	r1, [pc, #80]	@ (80009e8 <led_check+0x84>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	440b      	add	r3, r1
 800099e:	3308      	adds	r3, #8
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d314      	bcc.n	80009d0 <led_check+0x6c>
            LED_PORT->ODR ^= (1 << leds[i].pin);
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <led_check+0x88>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	490f      	ldr	r1, [pc, #60]	@ (80009e8 <led_check+0x84>)
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	440a      	add	r2, r1
 80009b2:	7812      	ldrb	r2, [r2, #0]
 80009b4:	4611      	mov	r1, r2
 80009b6:	2201      	movs	r2, #1
 80009b8:	408a      	lsls	r2, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <led_check+0x88>)
 80009be:	404b      	eors	r3, r1
 80009c0:	6153      	str	r3, [r2, #20]
            leds[i].last_toggle = now;
 80009c2:	4a09      	ldr	r2, [pc, #36]	@ (80009e8 <led_check+0x84>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	4413      	add	r3, r2
 80009ca:	3304      	adds	r3, #4
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3301      	adds	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d9cc      	bls.n	8000976 <led_check+0x12>
        }
    }
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000004 	.word	0x20000004
 80009ec:	40020800 	.word	0x40020800

080009f0 <main>:
#include "gas_sensor.h"
#include "button.h"
#include <stdio.h>
#include "uart.h"

int main(void){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	timer_init();
 80009f4:	f000 f91e 	bl	8000c34 <timer_init>
	gpio_init();
 80009f8:	f7ff fd3e 	bl	8000478 <gpio_init>
	button_init();
 80009fc:	f7ff fc58 	bl	80002b0 <button_init>

	i2c2_init();
 8000a00:	f7ff fe3e 	bl	8000680 <i2c2_init>
	lcd_init();
 8000a04:	f7ff ff7c 	bl	8000900 <lcd_init>

	uart1_init();
 8000a08:	f000 f948 	bl	8000c9c <uart1_init>

//	led_blink(LED_DANGER_PIN, 200);

    gas_sensor_init();
 8000a0c:	f7ff fd02 	bl	8000414 <gas_sensor_init>
    gas_sensor_calibrate();
 8000a10:	f7ff fd06 	bl	8000420 <gas_sensor_calibrate>
	while(1){

//		uint16_t ppm = gas_sensor_read_ppm();
//		state_machine_update(ppm);

		uart1_send_string("HELLO FROM USART1\r\n");
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <main+0x38>)
 8000a16:	f000 f993 	bl	8000d40 <uart1_send_string>
//		led_on(1);
		timer_delay_ms(1000);
 8000a1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1e:	f000 f927 	bl	8000c70 <timer_delay_ms>
		uart1_send_string("HELLO FROM USART1\r\n");
 8000a22:	bf00      	nop
 8000a24:	e7f6      	b.n	8000a14 <main+0x24>
 8000a26:	bf00      	nop
 8000a28:	08000e48 	.word	0x08000e48

08000a2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a30:	f3bf 8f4f 	dsb	sy
}
 8000a34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <__NVIC_SystemReset+0x24>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a3e:	4904      	ldr	r1, [pc, #16]	@ (8000a50 <__NVIC_SystemReset+0x24>)
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_SystemReset+0x28>)
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a46:	f3bf 8f4f 	dsb	sy
}
 8000a4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <__NVIC_SystemReset+0x20>
 8000a50:	e000ed00 	.word	0xe000ed00
 8000a54:	05fa0004 	.word	0x05fa0004

08000a58 <state_machine_toggle>:
{
    return gas_alert_level;
}

void state_machine_toggle(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
    if (system_state == SYSTEM_STOPPED)
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <state_machine_toggle+0x24>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d103      	bne.n	8000a6c <state_machine_toggle+0x14>
    {
        system_state = SYSTEM_RUNNING;
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <state_machine_toggle+0x24>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        system_state = SYSTEM_STOPPED;
    }
}
 8000a6a:	e002      	b.n	8000a72 <state_machine_toggle+0x1a>
        system_state = SYSTEM_STOPPED;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <state_machine_toggle+0x24>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20000074 	.word	0x20000074

08000a80 <state_machine_reset>:

void state_machine_reset(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
//    system_state = SYSTEM_STOPPED;
//    gas_alert_level = GAS_SAFE;
    NVIC_SystemReset();
 8000a84:	f7ff ffd2 	bl	8000a2c <__NVIC_SystemReset>

08000a88 <EXTI15_10_IRQHandler>:
#include "led.h"
#include "buzzer.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */
void EXTI15_10_IRQHandler(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 13)) {
 8000a8c:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <EXTI15_10_IRQHandler+0x24>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d007      	beq.n	8000aa8 <EXTI15_10_IRQHandler+0x20>
        EXTI->PR |= (1 << 13);
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <EXTI15_10_IRQHandler+0x24>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4a03      	ldr	r2, [pc, #12]	@ (8000aac <EXTI15_10_IRQHandler+0x24>)
 8000a9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000aa2:	6153      	str	r3, [r2, #20]
        state_machine_toggle();
 8000aa4:	f7ff ffd8 	bl	8000a58 <state_machine_toggle>
    }
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013c00 	.word	0x40013c00

08000ab0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 3)) {
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <EXTI3_IRQHandler+0x24>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d007      	beq.n	8000ad0 <EXTI3_IRQHandler+0x20>
        EXTI->PR |= (1 << 3);
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <EXTI3_IRQHandler+0x24>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4a03      	ldr	r2, [pc, #12]	@ (8000ad4 <EXTI3_IRQHandler+0x24>)
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	6153      	str	r3, [r2, #20]
        state_machine_reset();
 8000acc:	f7ff ffd8 	bl	8000a80 <state_machine_reset>
    }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40013c00 	.word	0x40013c00

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <NMI_Handler+0x4>

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <UsageFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 f947 	bl	8000dc0 <HAL_IncTick>
  timer_systick_callback();
 8000b32:	f000 f865 	bl	8000c00 <timer_systick_callback>
  buzzer_check();
 8000b36:	f7ff fc0b 	bl	8000350 <buzzer_check>
  led_check();
 8000b3a:	f7ff ff13 	bl	8000964 <led_check>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_SetPriority>:
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	db0a      	blt.n	8000b92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	490c      	ldr	r1, [pc, #48]	@ (8000bb4 <__NVIC_SetPriority+0x4c>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b90:	e00a      	b.n	8000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	@ (8000bb8 <__NVIC_SetPriority+0x50>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	3b04      	subs	r3, #4
 8000ba0:	0112      	lsls	r2, r2, #4
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	761a      	strb	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff ffc2 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <timer_systick_callback>:
#include "timer.h"

static volatile uint32_t system_millis = 0;
static volatile uint32_t blocking_delay = 0;

void timer_systick_callback(void) {
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
    system_millis++;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <timer_systick_callback+0x2c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <timer_systick_callback+0x2c>)
 8000c0c:	6013      	str	r3, [r2, #0]
    if (blocking_delay > 0) blocking_delay--;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <timer_systick_callback+0x30>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d004      	beq.n	8000c20 <timer_systick_callback+0x20>
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <timer_systick_callback+0x30>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <timer_systick_callback+0x30>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000078 	.word	0x20000078
 8000c30:	2000007c 	.word	0x2000007c

08000c34 <timer_init>:

void timer_init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    SysTick_Config(SystemCoreClock / 1000);
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <timer_init+0x1c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <timer_init+0x20>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	099b      	lsrs	r3, r3, #6
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ffb9 	bl	8000bbc <SysTick_Config>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000044 	.word	0x20000044
 8000c54:	10624dd3 	.word	0x10624dd3

08000c58 <millis>:

uint32_t millis(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
    return system_millis;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <millis+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000078 	.word	0x20000078

08000c70 <timer_delay_ms>:

void timer_delay_ms(uint32_t ms) {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    blocking_delay = ms;
 8000c78:	4a07      	ldr	r2, [pc, #28]	@ (8000c98 <timer_delay_ms+0x28>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
    while (blocking_delay > 0);
 8000c7e:	bf00      	nop
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <timer_delay_ms+0x28>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1fb      	bne.n	8000c80 <timer_delay_ms+0x10>
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000007c 	.word	0x2000007c

08000c9c <uart1_init>:
#include "stm32f4xx.h"
#include "uart.h"

void uart1_init(void) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;      // Enable GPIOA
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <uart1_init+0x68>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <uart1_init+0x68>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;     // Enable USART1
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <uart1_init+0x68>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <uart1_init+0x68>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6453      	str	r3, [r2, #68]	@ 0x44

    // PA9 = TX (AF7)
    GPIOA->MODER &= ~(3 << (9 * 2));
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <uart1_init+0x6c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <uart1_init+0x6c>)
 8000cbe:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000cc2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2 << (9 * 2));
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <uart1_init+0x6c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d08 <uart1_init+0x6c>)
 8000cca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cce:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0xF << ((9 - 8) * 4));
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <uart1_init+0x6c>)
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <uart1_init+0x6c>)
 8000cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000cda:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  (7 << ((9 - 8) * 4));
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <uart1_init+0x6c>)
 8000cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce0:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <uart1_init+0x6c>)
 8000ce2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000ce6:	6253      	str	r3, [r2, #36]	@ 0x24

    // BRR = 0x0683 for 9600 baud at PCLK2 = 50MHz
    USART1->BRR = 0x0683;  // Nếu PCLK2 = 50 MHz
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <uart1_init+0x70>)
 8000cea:	f240 6283 	movw	r2, #1667	@ 0x683
 8000cee:	609a      	str	r2, [r3, #8]
    USART1->CR1 = USART_CR1_TE | USART_CR1_UE;  // Enable TX + USART
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <uart1_init+0x70>)
 8000cf2:	f242 0208 	movw	r2, #8200	@ 0x2008
 8000cf6:	60da      	str	r2, [r3, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40011000 	.word	0x40011000

08000d10 <uart1_send_char>:

void uart1_send_char(char c) {
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 8000d1a:	bf00      	nop
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <uart1_send_char+0x2c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f9      	beq.n	8000d1c <uart1_send_char+0xc>
    USART1->DR = c;
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <uart1_send_char+0x2c>)
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	6053      	str	r3, [r2, #4]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40011000 	.word	0x40011000

08000d40 <uart1_send_string>:

void uart1_send_string(const char* str) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000d48:	e006      	b.n	8000d58 <uart1_send_string+0x18>
        uart1_send_char(*str++);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ffdc 	bl	8000d10 <uart1_send_char>
    while (*str) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1f4      	bne.n	8000d4a <uart1_send_string+0xa>
    }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d70:	f7ff fee8 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	@ (8000da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	@ (8000dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f000 f825 	bl	8000de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fe27 	bl	80009f0 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000db0:	08000e64 	.word	0x08000e64
  ldr r2, =_sbss
 8000db4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000db8:	20000084 	.word	0x20000084

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000048 	.word	0x20000048
 8000de4:	20000080 	.word	0x20000080

08000de8 <__libc_init_array>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	4d0d      	ldr	r5, [pc, #52]	@ (8000e20 <__libc_init_array+0x38>)
 8000dec:	4c0d      	ldr	r4, [pc, #52]	@ (8000e24 <__libc_init_array+0x3c>)
 8000dee:	1b64      	subs	r4, r4, r5
 8000df0:	10a4      	asrs	r4, r4, #2
 8000df2:	2600      	movs	r6, #0
 8000df4:	42a6      	cmp	r6, r4
 8000df6:	d109      	bne.n	8000e0c <__libc_init_array+0x24>
 8000df8:	4d0b      	ldr	r5, [pc, #44]	@ (8000e28 <__libc_init_array+0x40>)
 8000dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8000e2c <__libc_init_array+0x44>)
 8000dfc:	f000 f818 	bl	8000e30 <_init>
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	10a4      	asrs	r4, r4, #2
 8000e04:	2600      	movs	r6, #0
 8000e06:	42a6      	cmp	r6, r4
 8000e08:	d105      	bne.n	8000e16 <__libc_init_array+0x2e>
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e10:	4798      	blx	r3
 8000e12:	3601      	adds	r6, #1
 8000e14:	e7ee      	b.n	8000df4 <__libc_init_array+0xc>
 8000e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1a:	4798      	blx	r3
 8000e1c:	3601      	adds	r6, #1
 8000e1e:	e7f2      	b.n	8000e06 <__libc_init_array+0x1e>
 8000e20:	08000e5c 	.word	0x08000e5c
 8000e24:	08000e5c 	.word	0x08000e5c
 8000e28:	08000e5c 	.word	0x08000e5c
 8000e2c:	08000e60 	.word	0x08000e60

08000e30 <_init>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	bf00      	nop
 8000e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e36:	bc08      	pop	{r3}
 8000e38:	469e      	mov	lr, r3
 8000e3a:	4770      	bx	lr

08000e3c <_fini>:
 8000e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3e:	bf00      	nop
 8000e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e42:	bc08      	pop	{r3}
 8000e44:	469e      	mov	lr, r3
 8000e46:	4770      	bx	lr
